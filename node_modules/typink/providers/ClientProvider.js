import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect, useMemo } from 'react';
import { useInitializeClient } from '../hooks/internal/index.js';
import { assert } from 'dedot/utils';
import { development } from '../networks/index.js';
import { useWallet } from './WalletProvider.js';
import { useLocalStorage } from 'react-use';
export const ClientContext = createContext({});
export const useClient = () => {
    return useContext(ClientContext);
};
const DEFAULT_NETWORKS = [development];
/**
 * Manages the initialization and state of the Dedot client, network selection, and related configurations.
 *
 * @param {Object} props - The properties passed to the ClientProvider component.
 * @param {React.ReactNode} props.children - The child components to be wrapped by the ClientProvider.
 * @param {NetworkId} [props.defaultNetworkId] - The default network ID to use. If not provided, the first network in the supported networks list is used.
 * @param {NetworkInfo[]} [props.supportedNetworks=DEFAULT_NETWORKS] - An array of supported network information objects.
 * @param {boolean} [props.cacheMetadata=false] - Whether to cache metadata or not.
 */
export function ClientProvider({ children, defaultNetworkId, supportedNetworks = DEFAULT_NETWORKS, cacheMetadata = false, }) {
    assert(supportedNetworks.length > 0, 'Required at least one supported network');
    const { signer } = useWallet();
    const initialNetworkId = useMemo(() => {
        return (defaultNetworkId || supportedNetworks[0].id);
    }, [defaultNetworkId, supportedNetworks]);
    const [networkId, setNetworkId] = useLocalStorage('TYPINK::CONNECTED_NETWORK', initialNetworkId);
    const network = useMemo(() => supportedNetworks.find((network) => network.id === networkId), [networkId, supportedNetworks]);
    assert(network, `NetworkId ${initialNetworkId} is not available`);
    const { ready, client } = useInitializeClient(network, { cacheMetadata });
    useEffect(() => {
        client?.setSigner(signer);
    }, [signer, client]);
    return (_jsx(ClientContext.Provider, { value: {
            client,
            ready,
            network,
            networkId: networkId,
            setNetworkId,
            cacheMetadata,
            supportedNetworks,
        }, children: children }, networkId));
}
