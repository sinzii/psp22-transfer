import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect, useMemo, useState } from 'react';
import { useLocalStorage } from 'react-use';
import { useDeepDeps, useIsFirstRender } from '../hooks/index.js';
import { polkadotjs, subwallet, talisman } from '../wallets/index.js';
import { assert } from 'dedot/utils';
import { noop } from '../utils/index.js';
import { WalletProvider } from './WalletProvider.js';
export const WalletSetupContext = createContext({
    appName: 'Typink Dapp',
    accounts: [],
    connectWallet: noop,
    disconnect: noop,
    setConnectedAccount: noop,
    wallets: [],
});
export const useWalletSetup = () => {
    return useContext(WalletSetupContext);
};
const DEFAULT_WALLETS = [subwallet, talisman, polkadotjs];
/**
 * WalletSetupProvider is a component that manages wallet setup and connection state.
 * It provides context for wallet-related operations and wraps its children with necessary providers.
 *
 * @param props - The properties for the WalletSetupProvider component.
 * @param props.children - The child components to be wrapped by this provider.
 * @param props.signer - The initial signer object for the wallet.
 * @param props.connectedAccount - The initial connected account information.
 */
export function WalletSetupProvider({ children, signer: initialSigner, connectedAccount: initialConnectedAccount, wallets: initialWallets, appName }) {
    const wallets = useMemo(() => initialWallets || DEFAULT_WALLETS, useDeepDeps([initialWallets]));
    const [accounts, setAccounts] = useState([]);
    const [connectedWalletId, setConnectedWalletId, removeConnectedWalletId] = useLocalStorage('TYPINK::CONNECTED_WALLET');
    const [signer, setSigner] = useState();
    const [connectedAccount, setConnectedAccount, removeConnectedAccount] = useLocalStorage('TYPINK::CONNECTED_ACCOUNT');
    const getWallet = (id) => wallets.find((one) => one.id === id);
    const connectedWallet = useMemo(() => getWallet(connectedWalletId), [connectedWalletId]);
    const isFirstRender = useIsFirstRender();
    useEffect(() => {
        setSigner(initialSigner);
    }, [initialSigner]);
    useEffect(() => {
        if (initialConnectedAccount) {
            setConnectedAccount(initialConnectedAccount);
        }
        else if (!isFirstRender) {
            // make sure we don't accidentally remove connected account on first render
            removeConnectedAccount();
        }
    }, [initialConnectedAccount]);
    useEffect(() => {
        if (!connectedWalletId)
            return;
        let unsub;
        (async () => {
            try {
                const targetWallet = getWallet(connectedWalletId);
                assert(targetWallet, `Wallet Id Not Found ${connectedWalletId}`);
                await targetWallet.waitUntilReady();
                const injectedProvider = targetWallet.injectedProvider;
                assert(injectedProvider?.enable, `Invalid Wallet: ${targetWallet.id}`);
                const injected = await injectedProvider.enable(appName);
                const initialConnectedAccounts = await injected.accounts.get();
                // TODO keep track of wallet decision?
                if (initialConnectedAccounts.length === 0) {
                    removeConnectedWalletId();
                    return;
                }
                // reset accounts on wallet changing
                setAccounts([]);
                // only remove the connected account if we're switching to a different wallet
                if (!isFirstRender) {
                    removeConnectedAccount();
                }
                unsub = injected.accounts.subscribe(setAccounts);
                setSigner(injected.signer);
            }
            catch (e) {
                console.error('Error while connecting wallet:', e);
                removeConnectedWalletId();
            }
        })();
        return () => unsub && unsub();
    }, [connectedWalletId, appName]);
    const connectWallet = async (walletId) => {
        setConnectedWalletId(walletId);
    };
    const disconnect = () => {
        removeConnectedWalletId();
        removeConnectedAccount();
        setSigner(undefined);
        setAccounts([]);
    };
    return (_jsx(WalletSetupContext.Provider, { value: {
            accounts,
            connectWallet,
            disconnect,
            connectedWalletId,
            connectedWallet,
            setConnectedAccount,
            wallets,
            appName
        }, children: _jsx(WalletProvider, { signer: signer, connectedAccount: connectedAccount, children: children }) }));
}
