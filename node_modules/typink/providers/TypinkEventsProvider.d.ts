import { Props } from '../types.js';
import { FrameSystemEventRecord } from 'dedot/chaintypes';
export type TypinkEventsRegistration = {
    [TypinkEvent.SYSTEM_EVENTS]: (events: FrameSystemEventRecord[]) => void;
};
export type Unsub = () => void;
export declare enum TypinkEvent {
    SYSTEM_EVENTS = "SYSTEM_EVENTS"
}
export interface TypinkEventsContextProps {
    subscribeToEvent<T extends TypinkEvent>(event: T, callback: TypinkEventsRegistration[T]): Unsub;
}
export declare const TypinkEventsContext: import("react").Context<TypinkEventsContextProps>;
export declare const useTypinkEvents: () => TypinkEventsContextProps;
/**
 * TypinkEventsProvider is a React component that manages event listeners for system events.
 * It provides a context for subscribing to and managing event listeners.
 *
 * @param props - The component props.
 * @param props.children - The child components to be wrapped by the provider.
 */
export declare function TypinkEventsProvider({ children }: Props): import("react/jsx-runtime").JSX.Element;
