import { NetworkId, NetworkInfo, Props } from '../types.js';
import { ISubstrateClient } from 'dedot';
import { SubstrateApi } from 'dedot/chaintypes';
import { RpcVersion } from 'dedot/types';
export interface ClientContextProps {
    client?: ISubstrateClient<SubstrateApi[RpcVersion]>;
    ready: boolean;
    supportedNetworks: NetworkInfo[];
    network: NetworkInfo;
    networkId: NetworkId;
    setNetworkId: (one: NetworkId) => void;
    cacheMetadata?: boolean;
}
export declare const ClientContext: import("react").Context<ClientContextProps>;
export declare const useClient: () => ClientContextProps;
export interface ClientProviderProps extends Props {
    supportedNetworks?: NetworkInfo[];
    defaultNetworkId?: NetworkId;
    cacheMetadata?: boolean;
}
/**
 * Manages the initialization and state of the Dedot client, network selection, and related configurations.
 *
 * @param {Object} props - The properties passed to the ClientProvider component.
 * @param {React.ReactNode} props.children - The child components to be wrapped by the ClientProvider.
 * @param {NetworkId} [props.defaultNetworkId] - The default network ID to use. If not provided, the first network in the supported networks list is used.
 * @param {NetworkInfo[]} [props.supportedNetworks=DEFAULT_NETWORKS] - An array of supported network information objects.
 * @param {boolean} [props.cacheMetadata=false] - Whether to cache metadata or not.
 */
export declare function ClientProvider({ children, defaultNetworkId, supportedNetworks, cacheMetadata, }: ClientProviderProps): import("react/jsx-runtime").JSX.Element;
