import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect } from 'react';
import { useClient } from './ClientProvider.js';
import { useListenerCounter } from '../hooks/internal/useListenerCounter.js';
import { EventEmitter } from 'dedot/utils';
import { noop } from '../utils/index.js';
export var TypinkEvent;
(function (TypinkEvent) {
    TypinkEvent["SYSTEM_EVENTS"] = "SYSTEM_EVENTS";
})(TypinkEvent || (TypinkEvent = {}));
const eventEmitter = new EventEmitter();
export const TypinkEventsContext = createContext({});
export const useTypinkEvents = () => {
    return useContext(TypinkEventsContext);
};
/**
 * TypinkEventsProvider is a React component that manages event listeners for system events.
 * It provides a context for subscribing to and managing event listeners.
 *
 * @param props - The component props.
 * @param props.children - The child components to be wrapped by the provider.
 */
export function TypinkEventsProvider({ children }) {
    const { client } = useClient();
    const { hasAny, tryIncrease, tryDecrease } = useListenerCounter(TypinkEvent.SYSTEM_EVENTS);
    useEffect(() => {
        if (!client || !hasAny)
            return;
        let unsub;
        let unmounted = false;
        (async () => {
            unsub = await client.query.system.events((events) => {
                if (unmounted) {
                    unsub && unsub();
                    return;
                }
                eventEmitter.emit(TypinkEvent.SYSTEM_EVENTS, events);
            });
        })();
        return () => {
            unsub && unsub();
            unmounted = true;
        };
    }, [client, hasAny]);
    const subscribeToEvent = (event, callback) => {
        if (!client)
            return noop;
        const unsub = eventEmitter.on(event, callback);
        tryIncrease(event);
        return () => {
            unsub();
            tryDecrease(event);
        };
    };
    return _jsx(TypinkEventsContext.Provider, { value: { subscribeToEvent }, children: children });
}
