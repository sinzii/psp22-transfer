import { DedotError } from 'dedot/utils';
import { GenericContractApi } from '@dedot/contracts';
import { ISubstrateClient } from 'dedot';
/**
 * Typink-related errors
 */
export declare class TypinkError extends DedotError {
}
export declare class ContractMessageError<T extends any> extends TypinkError {
    error: T;
    constructor(error: T, message?: string);
}
export declare class BalanceInsufficientError extends TypinkError {
    caller: string;
    constructor(caller: string, message?: string);
}
export declare const extractHumanReadableError: <T extends GenericContractApi = GenericContractApi<import("@dedot/types").RpcVersion, import("dedot/chaintypes").SubstrateApi>, E extends Error = any>(client: ISubstrateClient<T["types"]["ChainApi"]>, error: E) => string;
export declare const withReadableErrorMessage: <T extends GenericContractApi = GenericContractApi<import("@dedot/types").RpcVersion, import("dedot/chaintypes").SubstrateApi>, E extends Error = any>(client: ISubstrateClient<T["types"]["ChainApi"]>, error: E) => Error;
