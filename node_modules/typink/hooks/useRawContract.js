import { useEffect, useState } from 'react';
import { useTypink } from './useTypink.js';
import { Contract } from 'dedot/contracts';
import { useDeepDeps } from './internal/index.js';
/**
 * A custom React hook for creating and managing a raw contract instance.
 *
 * This hook initializes a contract based on the provided metadata and address,
 * and updates it when relevant dependencies change.
 *
 * @param {string | ContractMetadata} [metadata] - The contract metadata or its string representation
 * @param {string} [address] - The address of the contract
 * @param {ExecutionOptions} [options={}] - Additional execution options for the contract
 * @returns {UseRawContract<T>} An object containing the contract instance or undefined
 */
export function useRawContract(metadata, address, options = {}) {
    const { client, defaultCaller, connectedAccount } = useTypink();
    const [contract, setContract] = useState();
    useEffect(() => {
        if (!client || !metadata || !address) {
            if (contract) {
                setContract(undefined);
            }
            return;
        }
        setContract(new Contract(client, metadata, address, // prettier-end-here
        {
            defaultCaller: connectedAccount?.address || defaultCaller,
            ...options,
        }));
    }, useDeepDeps([client, metadata, address, connectedAccount?.address, defaultCaller, options]));
    return {
        contract,
    };
}
