"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterable = void 0;
const mod_js_1 = require("../common/mod.js");
const compact_js_1 = require("./compact.js");
const int_js_1 = require("./int.js");
const compactU32 = (0, compact_js_1.compact)(int_js_1.u32);
function iterable(props) {
    return (0, mod_js_1.createShape)({
        metadata: (0, mod_js_1.metadata)("$.iterable", iterable, props),
        staticSize: compactU32.staticSize,
        subEncode(buffer, value) {
            const length = props.calcLength(value);
            compactU32.subEncode(buffer, length);
            buffer.pushAlloc(length * props.$el.staticSize);
            let i = 0;
            for (const el of value) {
                props.$el.subEncode(buffer, el);
                i++;
            }
            if (i !== length)
                throw new mod_js_1.ShapeEncodeError(this, value, "Incorrect length returned by calcLength");
            buffer.popAlloc();
        },
        subDecode(buffer) {
            const length = compactU32.subDecode(buffer);
            let done = false;
            const value = props.rehydrate(function* () {
                for (let i = 0; i < length; i++) {
                    yield props.$el.subDecode(buffer);
                }
                done = true;
            }());
            if (!done)
                throw new mod_js_1.ShapeDecodeError(this, buffer, "Iterable passed to rehydrate must be immediately exhausted");
            return value;
        },
        subAssert(assert) {
            props.assert.call(this, assert);
            const length = props.calcLength(assert.value);
            let i = 0;
            for (const el of assert.value) {
                props.$el.subAssert(new mod_js_1.AssertState(el, `#iterator[${i}]`));
                i++;
            }
            if (i !== length) {
                throw new mod_js_1.ShapeAssertError(this, assert.value, `${assert.path}: Incorrect length returned by calcLength`);
            }
        },
    });
}
exports.iterable = iterable;
//# sourceMappingURL=iterable.js.map