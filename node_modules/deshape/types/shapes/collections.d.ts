import { Shape } from "../common/mod.js";
export declare function map<KI, KO extends KI, VI, VO>($key: Shape<KI, KO>, $value: Shape<VI, VO>): Shape<ReadonlyMap<KI, VI>, ShapeMap<KO, VO>>;
export declare function set<I, O extends I>($value: Shape<I, O>): Shape<ReadonlySet<I>, ShapeSet<O>>;
export declare class ShapeMap<K, V> implements Map<K, V> {
    #private;
    readonly $key: Shape<K>;
    constructor($key: Shape<K>, entries?: Iterable<[K, V]>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(key: K): boolean;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): this;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    entries(): IterableIterator<[K, V]>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
}
export declare class ShapeSet<T> implements Set<T> {
    #private;
    readonly $value: Shape<T, unknown>;
    constructor($value: Shape<T, unknown>, values?: Iterable<T>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(value: T): boolean;
    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;
    has(key: T): boolean;
    add(value: T): this;
    [Symbol.iterator](): IterableIterator<T>;
    entries(): IterableIterator<[T, T]>;
    keys(): IterableIterator<T>;
    values(): IterableIterator<T>;
}
