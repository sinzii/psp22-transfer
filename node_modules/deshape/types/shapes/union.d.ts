import { Expand, Narrow, Shape } from "../common/mod.js";
import { AnyShape, Input, Output } from "../common/shape.js";
import { InputObject, ObjectMembers, OutputObject } from "./object.js";
export declare class Variant<T extends string, I, O> {
    readonly tag: T;
    readonly shape: Shape<I, O>;
    constructor(tag: T, shape: Shape<I, O>);
}
export type AnyVariant = Variant<any, never, unknown>;
export declare function variant<T extends string, E extends AnyShape[]>(tag: T, ...members: ObjectMembers<E>): Variant<T, InputObject<E>, OutputObject<E>>;
export type InputTaggedUnion<K extends keyof any, M extends Record<number, AnyVariant>> = {
    [I in keyof M]: Expand<Readonly<Record<K, Extract<M[I], AnyVariant>["tag"]>> & Input<Extract<M[I], AnyVariant>["shape"]>>;
}[keyof M & number];
export type OutputTaggedUnion<K extends keyof any, M extends Record<number, AnyVariant>> = {
    [I in keyof M]: Expand<Record<K, Extract<M[I], AnyVariant>["tag"]> & Output<Extract<M[I], AnyVariant>["shape"]>>;
}[keyof M & number];
export declare function taggedUnion<K extends keyof any, M extends [] | Record<number, Variant<any, never, unknown>>>(tagKey: K, members: M): Shape<InputTaggedUnion<K, M>, OutputTaggedUnion<K, M>>;
export declare function literalUnion<T extends Narrow>(members: Record<number, T>): Shape<T>;
