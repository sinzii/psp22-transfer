import { AnyShape, Expand, Input, Output, Shape, U2I } from "../common/mod.js";
export declare function field<K extends keyof any, VI, VO>(key: K, $value: Shape<VI, VO>): Shape<Expand<Readonly<Record<K, VI>>>, Expand<Record<K, VO>>>;
export declare function optionalField<K extends keyof any, VI, VO>(key: K, $value: Shape<VI, VO>): Shape<Expand<Readonly<Partial<Record<K, VI>>>>, Expand<Partial<Record<K, VO>>>>;
export type InputObject<T extends AnyShape[]> = Expand<U2I<{
    x: {};
} | {
    [K in keyof T]: {
        x: Input<T[K]>;
    };
}[number]>["x"]>;
export type OutputObject<T extends AnyShape[]> = Expand<U2I<{
    x: {};
} | {
    [K in keyof T]: {
        x: Output<T[K]>;
    };
}[number]>["x"]>;
type UnionKeys<T> = T extends T ? keyof T : never;
export type ObjectMembers<T extends AnyShape[]> = [
    ...never extends T ? {
        [K in keyof T]: AnyShape extends T[K] ? AnyShape : UnionKeys<Input<T[K]>> & {
            [L in keyof T]: K extends L ? never : UnionKeys<Input<T[L]>>;
        }[number] extends (infer O extends keyof any) ? [O] extends [never] ? Shape<Input<T[K]> & {}> : Shape<{
            [_ in O]?: never;
        }> : never;
    } : T
];
export declare function object<T extends AnyShape[]>(...members: ObjectMembers<T>): Shape<InputObject<T>, OutputObject<T>>;
export {};
