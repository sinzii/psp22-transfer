import { AnyShape } from "./shape.js";
type TypeofMap = {
    string: string;
    number: number;
    bigint: bigint;
    boolean: boolean;
    undefined: undefined;
    object: {} | null;
    function: Function;
};
export declare class AssertState {
    value: unknown;
    pathPart: string;
    parent?: AssertState | undefined;
    constructor(value: unknown, pathPart?: string, parent?: AssertState | undefined);
    get path(): string;
    typeof<K extends keyof TypeofMap>(shape: AnyShape, type: K): void;
    nonNull(shape: AnyShape): void;
    instanceof(shape: AnyShape, ctor: abstract new (...args: any) => unknown): void;
    key(shape: AnyShape, key: keyof any): AssertState;
    equals(shape: AnyShape, value: unknown, label?: string): void;
    integer(shape: AnyShape, min: number, max: number): void;
    bigint(shape: AnyShape, min: bigint, max: bigint): void;
}
export {};
