import { Shape } from "./shape.js";
export type Metadata<I, O> = Array<{
    type: "atomic";
    name: string;
    factory?: never;
    args?: never;
} | {
    type: "factory";
    name: string;
    factory: (...args: any) => Shape<I, O>;
    args: any[];
}>;
/** Metadata for an atomic shape */
export declare function metadata<I = any, O = any>(name: string): Metadata<I, O>;
/** Metadata for a factory-made shape */
export declare function metadata<I, O, A extends unknown[]>(name: string, factory: (...args: A) => Shape<I, O>, ...args: A): Metadata<I, O>;
/** Concatenate multiple metadata arrays */
export declare function metadata<I, O>(...metadata: Metadata<I, O>[]): Metadata<I, O>;
export declare class ShapeVisitor<R> {
    #private;
    add<I, O, A extends unknown[]>(shape: (...args: A) => Shape<I, O>, fn: (shape: Shape<I, O>, ...args: A) => R): this;
    add<I, O>(shape: Shape<I, O>, fn: (shape: Shape<I, O>) => R): this;
    fallback(fn: <I, O>(shape: Shape<I, O>) => R): this;
    /**
     * ```ts
     * visitor.generic(<T>() =>
     *   visitor.add($.array<T>, (shape, $el) => {
     *     ...
     *   })
     * )
     * ```
     */
    generic(fn: (visitor: this) => void): this;
    visit<I, O>(shape: Shape<I, O>): R;
}
