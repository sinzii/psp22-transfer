import { EventEmitter as EE } from 'eventemitter3';
const handlerWrapper = (handler) => {
    return (...args) => {
        try {
            handler(...args);
        }
        catch {
            // ignore this!
        }
    };
};
export class EventEmitter {
    #emitter;
    #mapper;
    constructor() {
        this.#emitter = new EE();
        this.#mapper = new Map();
    }
    emit(event, ...args) {
        return this.#emitter.emit(event, ...args);
    }
    clearEvents() {
        this.#emitter.removeAllListeners();
        this.#mapper.clear();
    }
    on(event, handler) {
        const wrapper = handlerWrapper(handler);
        this.#mapper.set(handler, wrapper);
        this.#emitter.on(event, wrapper);
        return () => {
            this.off(event, handler);
        };
    }
    once(event, handler) {
        const wrapper = handlerWrapper(handler);
        this.#mapper.set(handler, wrapper);
        this.#emitter.once(event, wrapper);
        return () => {
            this.off(event, handler);
        };
    }
    off(event, handler) {
        if (handler) {
            const wrapper = this.#mapper.get(handler);
            if (!wrapper)
                return this;
            this.#emitter.off(event, wrapper);
            this.#mapper.delete(handler);
        }
        else {
            this.#emitter.off(event);
        }
        return this;
    }
}
