type Unsub = () => void;
type HandlerFn = (...args: any[]) => void;
export interface IEventEmitter<EventTypes extends string = string> {
    on(event: EventTypes, handler: HandlerFn): Unsub;
    once(event: EventTypes, handler: HandlerFn): Unsub;
    off(event: EventTypes, handler?: HandlerFn): this;
}
export declare class EventEmitter<EventTypes extends string = string> implements IEventEmitter<EventTypes> {
    #private;
    constructor();
    emit(event: EventTypes, ...args: any[]): boolean;
    protected clearEvents(): void;
    on(event: EventTypes, handler: HandlerFn): Unsub;
    once(event: EventTypes, handler: HandlerFn): Unsub;
    off(event: EventTypes, handler?: HandlerFn): this;
}
export {};
