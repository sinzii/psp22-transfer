import { Deferred } from '@dedot/utils';
export type WorkItem<T = any> = (...args: any[]) => Promise<T> | T;
type Work = {
    work: WorkItem;
    defer: Deferred<any>;
};
/**
 * @name AsyncQueue
 * @description A queue to process async works in sequence,
 * only one work is processed at a time
 */
export declare class AsyncQueue {
    protected _works: Array<Work>;
    protected _working: boolean;
    protected _currentWork?: Work;
    constructor();
    /**
     * Enqueue a work to be processed
     *
     * @param work
     */
    enqueue<T = any>(work: WorkItem<T>): Promise<T>;
    /**
     * Clear the pending works queue
     */
    clear(): void;
    /**
     * Cancel the current work & clear the queue
     */
    cancel(): void;
    /**
     * Cancel the current work if there is any work is going on
     */
    cancelCurrentWork(): void;
    get size(): number;
    get isWorking(): boolean;
    protected dequeue(): Promise<void>;
}
export {};
