import { hexToU8a } from './hex.js';
import { u8aEq } from './u8a.js';
export function isNull(input) {
    return input === null;
}
export function isUndefined(input) {
    return input === undefined || typeof input === 'undefined';
}
export function isString(input) {
    return typeof input === 'string';
}
export function isBoolean(input) {
    return typeof input === 'boolean';
}
export function isFunction(input) {
    return typeof input === 'function';
}
export function isNumber(input) {
    return typeof input === 'number';
}
export function isBigInt(input) {
    return typeof input === 'bigint';
}
export function isObject(input) {
    return !!input && typeof input === 'object';
}
export function isU8a(input) {
    return input instanceof Uint8Array;
}
export const HEX_REGEX = /^0x[\da-fA-F]+$/;
/**
 * Checks if the given input is a hex string.
 *
 * @param {unknown} input - The input to be checked.
 * @param {boolean} [strict=false] - If true, the function also checks if the hex is of even length (padded hex).
 * @returns {boolean} Returns true if the input is a hex string, false otherwise.
 */
export function isHex(input, strict) {
    return isString(input) && (input === '0x' || HEX_REGEX.test(input)) && (!strict || input.length % 2 === 0);
}
const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]); // \0asm
/**
 * @Ref: https://github.com/polkadot-js/common/blob/master/packages/util/src/is/wasm.ts
 */
export function isWasm(input) {
    if (typeof input === 'string') {
        input = hexToU8a(input);
    }
    return isU8a(input) && u8aEq(input.subarray(0, 4), WASM_MAGIC);
}
