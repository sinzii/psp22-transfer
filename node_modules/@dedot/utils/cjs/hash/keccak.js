"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keccakAsHex = exports.keccakAsU8a = void 0;
// Copyright 2017-2024 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/polkadot-js/common/blob/22aab4a4e62944a2cf8c885f50be2c1b842813ec/packages/util-crypto/src/keccak/asU8a.ts
const sha3_1 = require("@noble/hashes/sha3");
const to_js_1 = require("../to.js");
const u8a_js_1 = require("../u8a.js");
function keccakAsU8a(data, bitLength = 256) {
    const u8a = (0, to_js_1.toU8a)(data);
    if (bitLength === 256) {
        return (0, sha3_1.keccak_256)(u8a);
    }
    else if (bitLength === 512) {
        return (0, sha3_1.keccak_512)(u8a);
    }
    throw new Error('Invalid bitLength, only support 256 or 512!');
}
exports.keccakAsU8a = keccakAsU8a;
function keccakAsHex(data, bitLength) {
    return (0, u8a_js_1.u8aToHex)(keccakAsU8a(data, bitLength));
}
exports.keccakAsHex = keccakAsHex;
