"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWasm = exports.isHex = exports.HEX_REGEX = exports.isU8a = exports.isObject = exports.isBigInt = exports.isNumber = exports.isFunction = exports.isBoolean = exports.isString = exports.isUndefined = exports.isNull = void 0;
const hex_js_1 = require("./hex.js");
const u8a_js_1 = require("./u8a.js");
function isNull(input) {
    return input === null;
}
exports.isNull = isNull;
function isUndefined(input) {
    return input === undefined || typeof input === 'undefined';
}
exports.isUndefined = isUndefined;
function isString(input) {
    return typeof input === 'string';
}
exports.isString = isString;
function isBoolean(input) {
    return typeof input === 'boolean';
}
exports.isBoolean = isBoolean;
function isFunction(input) {
    return typeof input === 'function';
}
exports.isFunction = isFunction;
function isNumber(input) {
    return typeof input === 'number';
}
exports.isNumber = isNumber;
function isBigInt(input) {
    return typeof input === 'bigint';
}
exports.isBigInt = isBigInt;
function isObject(input) {
    return !!input && typeof input === 'object';
}
exports.isObject = isObject;
function isU8a(input) {
    return input instanceof Uint8Array;
}
exports.isU8a = isU8a;
exports.HEX_REGEX = /^0x[\da-fA-F]+$/;
/**
 * Checks if the given input is a hex string.
 *
 * @param {unknown} input - The input to be checked.
 * @param {boolean} [strict=false] - If true, the function also checks if the hex is of even length (padded hex).
 * @returns {boolean} Returns true if the input is a hex string, false otherwise.
 */
function isHex(input, strict) {
    return isString(input) && (input === '0x' || exports.HEX_REGEX.test(input)) && (!strict || input.length % 2 === 0);
}
exports.isHex = isHex;
const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]); // \0asm
/**
 * @Ref: https://github.com/polkadot-js/common/blob/master/packages/util/src/is/wasm.ts
 */
function isWasm(input) {
    if (typeof input === 'string') {
        input = (0, hex_js_1.hexToU8a)(input);
    }
    return isU8a(input) && (0, u8a_js_1.u8aEq)(input.subarray(0, 4), WASM_MAGIC);
}
exports.isWasm = isWasm;
