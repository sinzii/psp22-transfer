"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toU8a = exports.toHex = void 0;
const hex_js_1 = require("./hex.js");
const is_js_1 = require("./is.js");
const number_js_1 = require("./number.js");
const index_js_1 = require("./string/index.js");
const u8a_js_1 = require("./u8a.js");
/**
 * Converts the input to a hex string.
 *
 * @param {string | number | Uint8Array | HexString} input - The input to be converted to a hex string.
 * This can be a string, number, Uint8Array, or a hex string.
 * @returns {HexString} The hex string representation of the input.
 * @throws {Error} Throws an error if the input type is not string, number, Uint8Array, or hex string.
 */
function toHex(input) {
    if ((0, is_js_1.isU8a)(input)) {
        return (0, u8a_js_1.u8aToHex)(input);
    }
    else if ((0, is_js_1.isNumber)(input)) {
        return (0, number_js_1.numberToHex)(input);
    }
    else if ((0, is_js_1.isHex)(input)) {
        return input;
    }
    else if ((0, is_js_1.isString)(input)) {
        return (0, index_js_1.stringToHex)(input);
    }
    throw new Error(`Invalid input type of: ${input}`);
}
exports.toHex = toHex;
/**
 * Converts the input to a Uint8Array.
 *
 * @param {string | number | Uint8Array | HexString} input - The input to be converted to a Uint8Array.
 * This can be a string, number, Uint8Array, or a hex string.
 * @returns {Uint8Array} The Uint8Array representation of the input.
 * @throws {Error} Throws an error if the input type is not string, number, Uint8Array, or hex string.
 */
function toU8a(input) {
    if ((0, is_js_1.isU8a)(input)) {
        return input;
    }
    else if ((0, is_js_1.isNumber)(input)) {
        return (0, number_js_1.numberToU8a)(input);
    }
    else if ((0, is_js_1.isHex)(input)) {
        return (0, hex_js_1.hexToU8a)(input);
    }
    else if ((0, is_js_1.isString)(input)) {
        return (0, index_js_1.stringToU8a)(input);
    }
    throw new Error(`Invalid input type of: ${input}`);
}
exports.toU8a = toU8a;
