"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hexStripPrefix = exports.hexAddPrefix = exports.isZeroHex = exports.hexToString = exports.hexToU8a = void 0;
const utils_1 = require("@noble/hashes/utils");
const is_js_1 = require("./is.js");
const u8a_js_1 = require("./u8a.js");
/**
 * Converts a hex string to a Uint8Array.
 *
 * @param {HexString | string} input - The hex string to be converted to a Uint8Array.
 * If the string starts with '0x', it will be removed before conversion.
 * @returns {Uint8Array} The Uint8Array representation of the hex string.
 */
function hexToU8a(input) {
    return (0, utils_1.hexToBytes)((0, exports.hexStripPrefix)(input));
}
exports.hexToU8a = hexToU8a;
/**
 * Converts a hex string to a string.
 *
 * @param {HexString | string} input - The hex string to be converted to a string.
 * @returns {string} The string representation of the hex string.
 */
function hexToString(input) {
    return (0, u8a_js_1.u8aToString)(hexToU8a(input));
}
exports.hexToString = hexToString;
/**
 * Check if a hex is zero
 * - isZeroHash('0x000000') returns `true`
 * - isZeroHash('0x000001') returns `false`
 *
 * @param input {HexString}
 */
const isZeroHex = (input) => {
    return (0, is_js_1.isHex)(input) && hexToU8a(input).every((b) => b === 0);
};
exports.isZeroHex = isZeroHex;
/**
 * Add '0x' prefix to a hex string if it doesn't have one
 *
 * @param input {HexString}
 */
const hexAddPrefix = (input) => {
    if (!input)
        return '0x';
    return (input.startsWith('0x') ? input : `0x${input}`);
};
exports.hexAddPrefix = hexAddPrefix;
/**
 * Remove '0x' prefix from a hex string if it has one
 *
 * @param input {HexString}
 */
const hexStripPrefix = (input) => {
    if (!input)
        return '';
    return input.startsWith('0x') ? input.substring(2) : input;
};
exports.hexStripPrefix = hexStripPrefix;
// - TODO hexToNumber
// - TODO hexToBigInt
