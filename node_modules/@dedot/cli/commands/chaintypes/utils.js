import { rpc } from '@polkadot/types-support/metadata/static-substrate';
import staticSubstrate from '@polkadot/types-support/metadata/v15/substrate-hex';
import { ConstantExecutor } from '@dedot/api';
import { $Metadata, PortableRegistry } from '@dedot/codecs';
import * as $ from '@dedot/shape';
import { hexToU8a, u8aToHex } from '@dedot/utils';
import { getMetadataFromRuntime } from '@polkadot-api/wasm-executor';
import * as fs from 'fs';
export const getRuntimeVersion = (metadata) => {
    const registry = new PortableRegistry(metadata.latest);
    const executor = new ConstantExecutor({
        registry,
        metadata,
    });
    return executor.execute('system', 'version');
};
export const decodeMetadata = (metadataHex) => {
    const metadata = $Metadata.tryDecode(metadataHex);
    const runtimeVersion = getRuntimeVersion(metadata);
    const apis = runtimeVersion.apis.reduce((acc, [name, version]) => {
        acc[name] = version;
        return acc;
    }, {});
    return {
        metadata,
        runtimeVersion: {
            ...runtimeVersion,
            apis,
        },
    };
};
export const parseMetadataFromRaw = async (metadataFile) => {
    const metadataHex = fs.readFileSync(metadataFile, 'utf-8').trim();
    const { metadata, runtimeVersion } = decodeMetadata(metadataHex);
    return {
        metadata,
        runtimeVersion,
        rpcMethods: [],
    };
};
export const parseMetadataFromWasm = async (runtimeFile) => {
    const u8aMetadata = hexToU8a(getMetadataFromRuntime(('0x' + fs.readFileSync(runtimeFile).toString('hex'))));
    // Because this u8aMetadata has compactInt prefixed for it length, we need to get rid of it.
    const length = $.compactU32.tryDecode(u8aMetadata);
    const offset = $.compactU32.tryEncode(length).length;
    const metadataHex = u8aToHex(u8aMetadata.subarray(offset));
    const { metadata, runtimeVersion } = decodeMetadata(metadataHex);
    return {
        metadata,
        runtimeVersion,
        rpcMethods: [],
    };
};
export const parseStaticSubstrate = async () => {
    const { runtimeVersion, metadata } = decodeMetadata(staticSubstrate);
    return {
        metadata,
        runtimeVersion,
        rpcMethods: rpc.methods,
    };
};
