const checkAvailability = () => {
    try {
        localStorage.setItem('dedot', 'true');
        localStorage.removeItem('dedot');
    }
    catch {
        throw new Error('localStorage is not available!');
    }
};
const DEFAULT_PREFIX = 'dedot:';
/**
 * A wrapper for localStorage
 */
export class LocalStorage {
    prefix;
    constructor(prefix = DEFAULT_PREFIX) {
        this.prefix = prefix;
        checkAvailability();
    }
    async clear() {
        const length = localStorage.length;
        const keysToRemove = [];
        for (let idx = 0; idx < length; idx += 1) {
            const key = localStorage.key(idx);
            if (key?.startsWith(this.prefix)) {
                keysToRemove.push(key);
            }
        }
        keysToRemove.forEach((key) => localStorage.removeItem(key));
    }
    async get(key) {
        return localStorage.getItem(this.#getPrefixedKey(key));
    }
    #getPrefixedKey(key) {
        return key.startsWith(DEFAULT_PREFIX) ? key : `${this.prefix}${key}`;
    }
    async set(key, value) {
        localStorage.setItem(this.#getPrefixedKey(key), value);
        return value;
    }
    async keys() {
        const length = localStorage.length;
        const keys = [];
        for (let idx = 0; idx < length; idx += 1) {
            const key = localStorage.key(idx);
            if (key?.startsWith(this.prefix))
                keys.push(key.substring(this.prefix.length));
        }
        return keys;
    }
    async length() {
        return (await this.keys()).length;
    }
    async remove(key) {
        localStorage.removeItem(this.#getPrefixedKey(key));
    }
}
