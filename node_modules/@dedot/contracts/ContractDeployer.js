import { TypinkRegistry } from './TypinkRegistry.js';
import { ConstructorQueryExecutor } from './executor/ConstructorQueryExecutor.js';
import { ConstructorTxExecutor } from './executor/index.js';
import { ensureSupportContractsPallet, newProxyChain, parseRawMetadata } from './utils.js';
export class ContractDeployer {
    client;
    #metadata;
    #registry;
    #code;
    #options;
    constructor(client, metadata, codeHashOrWasm, options) {
        this.client = client;
        ensureSupportContractsPallet(client);
        this.#metadata = typeof metadata === 'string' ? parseRawMetadata(metadata) : metadata;
        this.#registry = new TypinkRegistry(this.#metadata);
        this.#code = codeHashOrWasm;
        this.#options = options;
    }
    get metadata() {
        return this.#metadata;
    }
    get registry() {
        return this.#registry;
    }
    get tx() {
        return newProxyChain(new ConstructorTxExecutor(this.client, this.#registry, this.#code, this.#options));
    }
    get query() {
        return newProxyChain(new ConstructorQueryExecutor(this.client, this.#registry, this.#code, this.#options));
    }
    get options() {
        return this.#options;
    }
}
