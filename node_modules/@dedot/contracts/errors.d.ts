import { DispatchError } from '@dedot/codecs';
import { DedotError } from '@dedot/utils';
import { ContractCallResult, ContractInstantiateResult, GenericContractApi, ReturnFlags } from './types/index.js';
/**
 * Represents an error that occurred during the instantiation of a smart contract.
 * This class extends the base `DedotError` and includes a `raw` property of type `ContractInstantiateResult`.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends DedotError
 */
export declare class ContractInstantiateError<ContractApi extends GenericContractApi = GenericContractApi> extends DedotError {
    name: string;
    /**
     * The raw result of the contract instantiation.
     */
    raw: ContractInstantiateResult<ContractApi['types']['ChainApi']>;
    /**
     * Constructs a new `ContractInstantiateError` instance.
     *
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(raw: ContractInstantiateResult<ContractApi['types']['ChainApi']>);
}
/**
 * Represents an error that occurred during the dispatch phase of contract instantiation.
 * This class extends `ContractInstantiateError` and includes a `DispatchError` property.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractInstantiateError
 */
export declare class ContractInstantiateDispatchError<ContractApi extends GenericContractApi = GenericContractApi> extends ContractInstantiateError<ContractApi> {
    name: string;
    /**
     * The error that occurred during the dispatch phase.
     */
    dispatchError: DispatchError;
    /**
     * Constructs a new `ContractInstantiateDispatchError` instance.
     *
     * @param err - The `DispatchError` that occurred during the dispatch phase.
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(err: DispatchError, raw: ContractInstantiateResult<ContractApi['types']['ChainApi']>);
}
/**
 * Represents an error that occurred during the instantiation of a smart contract due to a language-specific error.
 * This class extends `ContractInstantiateError` and includes a `LangError` property.
 *
 * Ref: https://use.ink/faq/migrating-from-ink-3-to-4#:~:text=Add%20support%20for,equivalent%20LangError.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractInstantiateError
 */
export declare class ContractInstantiateLangError<ContractApi extends GenericContractApi = GenericContractApi> extends ContractInstantiateError<ContractApi> {
    name: string;
    /**
     * The language-specific error that occurred during the instantiation.
     */
    langError: ContractApi['types']['LangError'];
    /**
     * Decoded `ReturnFlags` from contract call result.
     */
    flags: ReturnFlags;
    /**
     * Constructs a new `ContractInstantiateLangError` instance.
     *
     * @param err - The `LangError` that occurred during the instantiation phase.
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(err: ContractApi['types']['LangError'], raw: ContractInstantiateResult<ContractApi['types']['ChainApi']>);
}
/**
 * Represents an error that occurred during the execution of a smart contract call.
 * This class extends the base `DedotError` and includes a `raw` property of type `ContractCallResult`.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends DedotError
 */
export declare class ContractExecutionError<ContractApi extends GenericContractApi = GenericContractApi> extends DedotError {
    name: string;
    /**
     * The raw result of the contract call.
     */
    raw: ContractCallResult<ContractApi['types']['ChainApi']>;
    /**
     * Constructs a new `ContractExecutionError` instance.
     *
     * @param raw - The raw result of the contract call.
     */
    constructor(raw: ContractCallResult<ContractApi['types']['ChainApi']>);
}
/**
 * Represents an error that occurred during the execution of a smart contract call due to a dispatch error.
 * This class extends `ContractExecutionError` and includes a `DispatchError` property.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractExecutionError
 */
export declare class ContractDispatchError<ContractApi extends GenericContractApi = GenericContractApi> extends ContractExecutionError<ContractApi> {
    name: string;
    /**
     * The error that occurred during the dispatch phase.
     */
    dispatchError: DispatchError;
    /**
     * Constructs a new `ContractDispatchError` instance.
     *
     * @param err - The `DispatchError` that occurred during the dispatch phase.
     * @param raw - The raw result of the contract call.
     */
    constructor(err: DispatchError, raw: ContractCallResult<ContractApi['types']['ChainApi']>);
}
/**
 * Represents an error that occurred during the execution of a smart contract call due to a language-specific error.
 * This class extends `ContractExecutionError` and includes a `LangError` property.
 *
 * Ref: https://use.ink/faq/migrating-from-ink-3-to-4#:~:text=Add%20support%20for,equivalent%20LangError.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractExecutionError
 */
export declare class ContractLangError<ContractApi extends GenericContractApi = GenericContractApi> extends ContractExecutionError<ContractApi> {
    name: string;
    /**
     * The language-specific error that occurred during the execution.
     */
    langError: ContractApi['types']['LangError'];
    /**
     * Decoded `ReturnFlags` from contract call result.
     */
    flags: ReturnFlags;
    /**
     * Constructs a new `ContractLangError` instance.
     *
     * @param err - The `LangError` that occurred during the execution phase.
     * @param raw - The raw result of the contract call.
     */
    constructor(err: ContractApi['types']['LangError'], raw: ContractCallResult<ContractApi['types']['ChainApi']>);
}
/**
 * Checks if the provided error is an instance of `ContractExecutionError`.
 *
 * This function is used to determine if a given error is a result of an execution error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked.
 *
 * @returns `true` if the error is an instance of `ContractExecutionError`, `false` otherwise.
 */
export declare function isContractExecutionError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractExecutionError<ContractApi>;
/**
 * Checks if the provided error is an instance of `ContractDispatchError`.
 *
 * This function is used to determine if a given error is a result of a dispatch error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractDispatchError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractDispatchError`.
 */
export declare function isContractDispatchError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractDispatchError<ContractApi>;
/**
 * Checks if the provided error is an instance of `ContractLangError`.
 *
 * This function is used to determine if a given error is a result of a language-specific error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractLangError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractLangError`.
 */
export declare function isContractLangError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractLangError<ContractApi>;
/**
 * Checks if the provided error is an instance of `ContractInstantiateError`.
 *
 * This function is used to determine if a given error is a result of an execution error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateError`.
 */
export declare function isContractInstantiateError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractInstantiateError<ContractApi>;
/**
 * Checks if the provided error is an instance of `ContractInstantiateDispatchError`.
 *
 * This function is used to determine if a given error is a result of a dispatch error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateDispatchError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateDispatchError`.
 */
export declare function isContractInstantiateDispatchError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractInstantiateDispatchError<ContractApi>;
/**
 * Checks if the provided error is an instance of `ContractInstantiateLangError`.
 *
 * This function is used to determine if a given error is a result of a language-specific error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateLangError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateLangError`.
 */
export declare function isContractInstantiateLangError<ContractApi extends GenericContractApi = GenericContractApi>(e: Error): e is ContractInstantiateLangError<ContractApi>;
