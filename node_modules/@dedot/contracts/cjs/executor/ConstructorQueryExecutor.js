"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorQueryExecutor = void 0;
const utils_1 = require("@dedot/utils");
const errors_js_1 = require("../errors.js");
const utils_js_1 = require("../utils.js");
const index_js_1 = require("./abstract/index.js");
class ConstructorQueryExecutor extends index_js_1.DeployerExecutor {
    doExecute(constructor) {
        const meta = this.findConstructorMeta(constructor);
        (0, utils_1.assert)(meta, `Constructor message not found: ${constructor}`);
        const callFn = async (...params) => {
            const { args } = meta;
            (0, utils_1.assertFalse)(params.length < args.length, `Expected at least ${args.length} arguments, got ${params.length}`);
            (0, utils_1.assertFalse)(params.length > args.length + 1, `Expected at most ${args.length + 1} arguments, got ${params.length}`);
            const callOptions = (params[args.length] || {});
            const { caller = this.options.defaultCaller, value = 0n, gasLimit, storageDepositLimit, salt = '0x', } = callOptions;
            (0, utils_1.assert)(caller, 'Expected a valid caller address in ConstructorCallOptions');
            (0, utils_1.assertFalse)((0, utils_1.isNull)(salt) || (0, utils_1.isUndefined)(salt), 'Expected a salt in ConstructorCallOptions');
            const formattedInputs = args.map((arg, index) => this.tryEncode(arg, params[index]));
            const bytes = (0, utils_1.u8aToHex)((0, utils_1.concatU8a)((0, utils_1.hexToU8a)(meta.selector), ...formattedInputs));
            const code = {
                type: (0, utils_1.isWasm)(this.code) ? 'Upload' : 'Existing',
                value: this.code,
            };
            const raw = await this.client.call.contractsApi.instantiate(caller, value, gasLimit, storageDepositLimit, code, bytes, salt);
            if (raw.result.isErr) {
                throw new errors_js_1.ContractInstantiateDispatchError(raw.result.err, raw);
            }
            const data = this.tryDecode(meta, raw.result.value.result.data);
            if (data.isErr) {
                throw new errors_js_1.ContractInstantiateLangError(data.err, raw);
            }
            const bits = raw.result.value.result.flags.bits;
            return {
                data: data.value,
                raw,
                address: raw.result.value.accountId,
                flags: (0, utils_js_1.toReturnFlags)(bits),
            };
        };
        callFn.meta = meta;
        return callFn;
    }
}
exports.ConstructorQueryExecutor = ConstructorQueryExecutor;
