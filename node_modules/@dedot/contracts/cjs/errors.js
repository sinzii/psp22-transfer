"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isContractInstantiateLangError = exports.isContractInstantiateDispatchError = exports.isContractInstantiateError = exports.isContractLangError = exports.isContractDispatchError = exports.isContractExecutionError = exports.ContractLangError = exports.ContractDispatchError = exports.ContractExecutionError = exports.ContractInstantiateLangError = exports.ContractInstantiateDispatchError = exports.ContractInstantiateError = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("./utils.js");
/**
 * Represents an error that occurred during the instantiation of a smart contract.
 * This class extends the base `DedotError` and includes a `raw` property of type `ContractInstantiateResult`.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends DedotError
 */
class ContractInstantiateError extends utils_1.DedotError {
    name = 'ContractInstantiateError';
    /**
     * The raw result of the contract instantiation.
     */
    raw;
    /**
     * Constructs a new `ContractInstantiateError` instance.
     *
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(raw) {
        super();
        this.raw = raw;
    }
}
exports.ContractInstantiateError = ContractInstantiateError;
/**
 * Represents an error that occurred during the dispatch phase of contract instantiation.
 * This class extends `ContractInstantiateError` and includes a `DispatchError` property.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractInstantiateError
 */
class ContractInstantiateDispatchError extends ContractInstantiateError {
    name = 'ContractInstantiateDispatchError';
    /**
     * The error that occurred during the dispatch phase.
     */
    dispatchError;
    /**
     * Constructs a new `ContractInstantiateDispatchError` instance.
     *
     * @param err - The `DispatchError` that occurred during the dispatch phase.
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(err, raw) {
        super(raw);
        this.dispatchError = err;
        this.message = `Dispatch error: ${JSON.stringify(err)}`;
    }
}
exports.ContractInstantiateDispatchError = ContractInstantiateDispatchError;
/**
 * Represents an error that occurred during the instantiation of a smart contract due to a language-specific error.
 * This class extends `ContractInstantiateError` and includes a `LangError` property.
 *
 * Ref: https://use.ink/faq/migrating-from-ink-3-to-4#:~:text=Add%20support%20for,equivalent%20LangError.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractInstantiateError
 */
class ContractInstantiateLangError extends ContractInstantiateError {
    name = 'ContractInstantiateLangError';
    /**
     * The language-specific error that occurred during the instantiation.
     */
    langError;
    /**
     * Decoded `ReturnFlags` from contract call result.
     */
    flags;
    /**
     * Constructs a new `ContractInstantiateLangError` instance.
     *
     * @param err - The `LangError` that occurred during the instantiation phase.
     * @param raw - The raw result of the contract instantiation.
     */
    constructor(err, raw) {
        (0, utils_1.assert)(raw.result.isOk, 'Should not throw DispatchError!');
        super(raw);
        this.langError = err;
        this.flags = (0, utils_js_1.toReturnFlags)(raw.result.value.result.flags.bits);
        this.message = `Lange error: ${JSON.stringify(err)}`;
    }
}
exports.ContractInstantiateLangError = ContractInstantiateLangError;
/**
 * Represents an error that occurred during the execution of a smart contract call.
 * This class extends the base `DedotError` and includes a `raw` property of type `ContractCallResult`.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends DedotError
 */
class ContractExecutionError extends utils_1.DedotError {
    name = 'ContractExecutionError';
    /**
     * The raw result of the contract call.
     */
    raw;
    /**
     * Constructs a new `ContractExecutionError` instance.
     *
     * @param raw - The raw result of the contract call.
     */
    constructor(raw) {
        super();
        this.raw = raw;
    }
}
exports.ContractExecutionError = ContractExecutionError;
/**
 * Represents an error that occurred during the execution of a smart contract call due to a dispatch error.
 * This class extends `ContractExecutionError` and includes a `DispatchError` property.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractExecutionError
 */
class ContractDispatchError extends ContractExecutionError {
    name = 'ContractDispatchError';
    /**
     * The error that occurred during the dispatch phase.
     */
    dispatchError;
    /**
     * Constructs a new `ContractDispatchError` instance.
     *
     * @param err - The `DispatchError` that occurred during the dispatch phase.
     * @param raw - The raw result of the contract call.
     */
    constructor(err, raw) {
        super(raw);
        this.dispatchError = err;
        this.message = `Dispatch error: ${JSON.stringify(err)}`;
    }
}
exports.ContractDispatchError = ContractDispatchError;
/**
 * Represents an error that occurred during the execution of a smart contract call due to a language-specific error.
 * This class extends `ContractExecutionError` and includes a `LangError` property.
 *
 * Ref: https://use.ink/faq/migrating-from-ink-3-to-4#:~:text=Add%20support%20for,equivalent%20LangError.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @extends ContractExecutionError
 */
class ContractLangError extends ContractExecutionError {
    name = 'ContractLangError';
    /**
     * The language-specific error that occurred during the execution.
     */
    langError;
    /**
     * Decoded `ReturnFlags` from contract call result.
     */
    flags;
    /**
     * Constructs a new `ContractLangError` instance.
     *
     * @param err - The `LangError` that occurred during the execution phase.
     * @param raw - The raw result of the contract call.
     */
    constructor(err, raw) {
        (0, utils_1.assert)(raw.result.isOk, 'Should not throw DispatchError!');
        super(raw);
        this.langError = err;
        this.flags = (0, utils_js_1.toReturnFlags)(raw.result.value.flags.bits);
        this.message = `Lange error: ${JSON.stringify(err)}`;
    }
}
exports.ContractLangError = ContractLangError;
/**
 * Checks if the provided error is an instance of `ContractExecutionError`.
 *
 * This function is used to determine if a given error is a result of an execution error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked.
 *
 * @returns `true` if the error is an instance of `ContractExecutionError`, `false` otherwise.
 */
function isContractExecutionError(e) {
    return e instanceof ContractExecutionError;
}
exports.isContractExecutionError = isContractExecutionError;
/**
 * Checks if the provided error is an instance of `ContractDispatchError`.
 *
 * This function is used to determine if a given error is a result of a dispatch error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractDispatchError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractDispatchError`.
 */
function isContractDispatchError(e) {
    return e instanceof ContractDispatchError;
}
exports.isContractDispatchError = isContractDispatchError;
/**
 * Checks if the provided error is an instance of `ContractLangError`.
 *
 * This function is used to determine if a given error is a result of a language-specific error during a smart contract call.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractLangError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractLangError`.
 */
function isContractLangError(e) {
    return e instanceof ContractLangError;
}
exports.isContractLangError = isContractLangError;
/**
 * Checks if the provided error is an instance of `ContractInstantiateError`.
 *
 * This function is used to determine if a given error is a result of an execution error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateError`.
 */
function isContractInstantiateError(e) {
    return e instanceof ContractInstantiateError;
}
exports.isContractInstantiateError = isContractInstantiateError;
/**
 * Checks if the provided error is an instance of `ContractInstantiateDispatchError`.
 *
 * This function is used to determine if a given error is a result of a dispatch error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateDispatchError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateDispatchError`.
 */
function isContractInstantiateDispatchError(e) {
    return e instanceof ContractInstantiateDispatchError;
}
exports.isContractInstantiateDispatchError = isContractInstantiateDispatchError;
/**
 * Checks if the provided error is an instance of `ContractInstantiateLangError`.
 *
 * This function is used to determine if a given error is a result of a language-specific error during the instantiation of a smart contract.
 *
 * @template ContractApi - The type of the contract API. Defaults to `GenericContractApi`.
 *
 * @param e - The error to be checked. This should be an instance of `Error`.
 *
 * @returns `true` if the error is an instance of `ContractInstantiateLangError`, `false` otherwise.
 *          This function returns a boolean value indicating whether the provided error is of type `ContractInstantiateLangError`.
 */
function isContractInstantiateLangError(e) {
    return e instanceof ContractInstantiateLangError;
}
exports.isContractInstantiateLangError = isContractInstantiateLangError;
