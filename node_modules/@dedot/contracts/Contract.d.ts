import { ISubstrateClient } from '@dedot/api';
import { AccountId32, AccountId32Like } from '@dedot/codecs';
import { IEventRecord } from '@dedot/types';
import { TypinkRegistry } from './TypinkRegistry.js';
import { ContractEvent, ContractMetadata, GenericContractApi, ExecutionOptions } from './types/index.js';
export declare class Contract<ContractApi extends GenericContractApi = GenericContractApi> {
    #private;
    readonly client: ISubstrateClient<ContractApi['types']['ChainApi']>;
    constructor(client: ISubstrateClient<ContractApi['types']['ChainApi']>, metadata: ContractMetadata | string, address: AccountId32Like, options?: ExecutionOptions);
    decodeEvent(eventRecord: IEventRecord): ContractEvent;
    decodeEvents(eventRecords: IEventRecord[]): ContractEvent[];
    get metadata(): ContractMetadata;
    get address(): AccountId32;
    get registry(): TypinkRegistry;
    get query(): ContractApi['query'];
    get tx(): ContractApi['tx'];
    get events(): ContractApi['events'];
    get options(): ExecutionOptions | undefined;
}
