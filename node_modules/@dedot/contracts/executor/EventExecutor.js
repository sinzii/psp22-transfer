import { isEventRecord } from '@dedot/api';
import { assert, stringPascalCase } from '@dedot/utils';
import { ContractExecutor } from './abstract/index.js';
export class EventExecutor extends ContractExecutor {
    doExecute(eventName) {
        const meta = this.#findEventMeta(eventName);
        assert(meta, 'Contract event metadata not found!');
        const is = (event) => {
            if (isEventRecord(event)) {
                try {
                    event = this.registry.decodeEvent(event, this.address);
                }
                catch {
                    return false;
                }
            }
            return event.name === eventName;
        };
        const find = (events) => {
            if (!events || events.length === 0)
                return undefined;
            if (isEventRecord(events[0])) {
                return this.registry.decodeEvents(events, this.address).find(is);
            }
            else {
                return events.find(is);
            }
        };
        const filter = (events) => {
            if (isEventRecord(events[0])) {
                return this.registry.decodeEvents(events, this.address).filter(is);
            }
            else {
                return events.filter(is);
            }
        };
        const watch = (callback) => {
            return this.client.query.system.events((records) => {
                const events = filter(records);
                if (events.length === 0)
                    return;
                callback(filter(records));
            });
        };
        return {
            is,
            find,
            filter,
            meta,
            watch,
        };
    }
    #findEventMeta(eventName) {
        return this.registry.metadata.spec.events.find((one) => stringPascalCase(one.label) === eventName);
    }
}
