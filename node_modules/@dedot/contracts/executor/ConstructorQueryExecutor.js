import { assert, assertFalse, concatU8a, hexToU8a, isNull, isUndefined, isWasm, u8aToHex } from '@dedot/utils';
import { ContractInstantiateDispatchError, ContractInstantiateLangError } from '../errors.js';
import { toReturnFlags } from '../utils.js';
import { DeployerExecutor } from './abstract/index.js';
export class ConstructorQueryExecutor extends DeployerExecutor {
    doExecute(constructor) {
        const meta = this.findConstructorMeta(constructor);
        assert(meta, `Constructor message not found: ${constructor}`);
        const callFn = async (...params) => {
            const { args } = meta;
            assertFalse(params.length < args.length, `Expected at least ${args.length} arguments, got ${params.length}`);
            assertFalse(params.length > args.length + 1, `Expected at most ${args.length + 1} arguments, got ${params.length}`);
            const callOptions = (params[args.length] || {});
            const { caller = this.options.defaultCaller, value = 0n, gasLimit, storageDepositLimit, salt = '0x', } = callOptions;
            assert(caller, 'Expected a valid caller address in ConstructorCallOptions');
            assertFalse(isNull(salt) || isUndefined(salt), 'Expected a salt in ConstructorCallOptions');
            const formattedInputs = args.map((arg, index) => this.tryEncode(arg, params[index]));
            const bytes = u8aToHex(concatU8a(hexToU8a(meta.selector), ...formattedInputs));
            const code = {
                type: isWasm(this.code) ? 'Upload' : 'Existing',
                value: this.code,
            };
            const raw = await this.client.call.contractsApi.instantiate(caller, value, gasLimit, storageDepositLimit, code, bytes, salt);
            if (raw.result.isErr) {
                throw new ContractInstantiateDispatchError(raw.result.err, raw);
            }
            const data = this.tryDecode(meta, raw.result.value.result.data);
            if (data.isErr) {
                throw new ContractInstantiateLangError(data.err, raw);
            }
            const bits = raw.result.value.result.flags.bits;
            return {
                data: data.value,
                raw,
                address: raw.result.value.accountId,
                flags: toReturnFlags(bits),
            };
        };
        callFn.meta = meta;
        return callFn;
    }
}
