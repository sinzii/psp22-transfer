import { ISubstrateClient } from '@dedot/api';
import { SubstrateApi } from '@dedot/api/chaintypes';
import { GenericSubstrateApi, RpcVersion } from '@dedot/types';
import { TypinkRegistry } from '../../TypinkRegistry.js';
import { ContractMessageArg, ContractMessage, ExecutionOptions, ContractMetadata } from '../../types/index.js';
export declare abstract class Executor<ChainApi extends GenericSubstrateApi = SubstrateApi[RpcVersion]> {
    readonly client: ISubstrateClient<ChainApi>;
    readonly registry: TypinkRegistry;
    readonly options: ExecutionOptions;
    constructor(client: ISubstrateClient<ChainApi>, registry: TypinkRegistry, options?: ExecutionOptions);
    get metadata(): ContractMetadata;
    abstract doExecute(...paths: string[]): unknown;
    tryEncode(param: ContractMessageArg, value: any): Uint8Array;
    tryDecode(meta: ContractMessage, raw: any): unknown;
}
