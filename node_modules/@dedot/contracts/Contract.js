import { AccountId32 } from '@dedot/codecs';
import { TypinkRegistry } from './TypinkRegistry.js';
import { EventExecutor, QueryExecutor, TxExecutor } from './executor/index.js';
import { ensureSupportContractsPallet, newProxyChain, parseRawMetadata } from './utils.js';
export class Contract {
    client;
    #registry;
    #address;
    #metadata;
    #options;
    constructor(client, metadata, address, options) {
        this.client = client;
        ensureSupportContractsPallet(client);
        this.#address = new AccountId32(address);
        this.#metadata = typeof metadata === 'string' ? parseRawMetadata(metadata) : metadata;
        this.#registry = new TypinkRegistry(this.#metadata);
        this.#options = options;
    }
    decodeEvent(eventRecord) {
        return this.#registry.decodeEvent(eventRecord, this.address);
    }
    decodeEvents(eventRecords) {
        return this.#registry.decodeEvents(eventRecords, this.address);
    }
    get metadata() {
        return this.#metadata;
    }
    get address() {
        return this.#address;
    }
    get registry() {
        return this.#registry;
    }
    get query() {
        return newProxyChain(new QueryExecutor(this.client, this.#registry, this.#address, this.#options));
    }
    get tx() {
        return newProxyChain(new TxExecutor(this.client, this.#registry, this.#address, this.#options));
    }
    get events() {
        return newProxyChain(new EventExecutor(this.client, this.#registry, this.#address, this.#options));
    }
    get options() {
        return this.#options;
    }
}
