"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionKeys = void 0;
const codecs_1 = require("@dedot/codecs");
const $ = __importStar(require("@dedot/shape"));
/**
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/43415ef58c143b985e09015cd000dbd65f6d3997/substrate/primitives/session/src/runtime_api.rs#L21-L31
 */
exports.SessionKeys = [
    {
        methods: {
            generateSessionKeys: {
                docs: [
                    'Generate a set of session keys with optionally using the given seed.',
                    'The keys should be stored within the keystore exposed via runtime',
                    'externalities.',
                    '\n',
                    'The seed needs to be a valid `utf8` string.',
                    '\n',
                    'Returns the concatenated SCALE encoded public keys.',
                ],
                params: [
                    {
                        name: 'seed',
                        type: 'Option<Bytes>',
                        codec: $.Option(codecs_1.$Bytes),
                    },
                ],
                type: 'Bytes',
                codec: codecs_1.$Bytes,
            },
            decodeSessionKeys: {
                docs: ['Decode the given public session key', '\n', 'Returns the list of public raw public keys + key typ'],
                params: [
                    {
                        name: 'encoded',
                        type: 'Bytes',
                        codec: codecs_1.$Bytes,
                    },
                ],
                type: 'Option<Array<[Bytes, KeyTypeId]>>',
                codec: $.Option($.Array($.Tuple(codecs_1.$Bytes, codecs_1.$KeyTypeId))),
            },
        },
        version: 1,
    },
];
