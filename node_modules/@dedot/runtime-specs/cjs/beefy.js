"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeefyMmrApi = exports.BeefyApi = void 0;
const codecs_1 = require("@dedot/codecs");
const $ = __importStar(require("@dedot/shape"));
/**
 * Reference:
 * - BeefyApi: https://github.com/paritytech/polkadot-sdk/blob/b371c3574190ace0d8dd89b7970a388ad3fa8a6a/substrate/primitives/consensus/beefy/src/lib.rs#L391-L412
 * - BeefyMmrApi: https://github.com/paritytech/polkadot-sdk/blob/21f1811c6600d8a7fe043592ff34dcb79284d583/substrate/frame/beefy-mmr/src/lib.rs#L226-L238
 */
exports.BeefyApi = [
    {
        methods: {
            beefyGenesis: {
                docs: 'Return the block number where BEEFY consensus is enabled/started',
                params: [],
                type: 'Option<BlockNumber>',
                codec: $.Option(codecs_1.$BlockNumber),
            },
            validatorSet: {
                docs: 'Return the current active BEEFY validator set',
                params: [],
                type: 'Option<ValidatorSet>',
                codec: $.Option(codecs_1.$ValidatorSet),
            },
            submitReportEquivocationUnsignedExtrinsic: {
                docs: 'Submits an unsigned extrinsic to report an equivocation.',
                params: [
                    {
                        name: 'equivocationProof',
                        type: 'BeefyEquivocationProof',
                        codec: codecs_1.$BeefyEquivocationProof,
                    },
                    {
                        name: 'keyOwnerProof',
                        type: 'OpaqueKeyOwnershipProof',
                        codec: codecs_1.$OpaqueKeyOwnershipProof,
                    },
                ],
                type: 'Option<[]>',
                codec: $.Option($.Tuple()),
            },
            generateKeyOwnershipProof: {
                docs: 'Generates a proof of key ownership for the given authority in the given set.',
                params: [
                    {
                        name: 'setId',
                        type: 'ValidatorSetId',
                        codec: codecs_1.$ValidatorSetId,
                    },
                    {
                        name: 'authorityId',
                        type: 'AccountId32',
                        codec: codecs_1.$AccountId32,
                    },
                ],
                type: 'Option<OpaqueKeyOwnershipProof>',
                codec: $.Option(codecs_1.$OpaqueKeyOwnershipProof),
            },
        },
        version: 3,
    },
];
exports.BeefyMmrApi = [
    {
        methods: {
            authoritySetProof: {
                docs: 'Return the currently active BEEFY authority set proof.',
                params: [],
                type: 'BeefyAuthoritySet',
                codec: codecs_1.$BeefyAuthoritySet,
            },
            nextAuthoritySetProof: {
                docs: 'Return the next/queued BEEFY authority set proof.',
                params: [],
                type: 'BeefyNextAuthoritySet',
                codec: codecs_1.$BeefyNextAuthoritySet,
            },
        },
        version: 1,
    },
];
