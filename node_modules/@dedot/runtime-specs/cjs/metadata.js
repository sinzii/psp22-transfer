"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const codecs_1 = require("@dedot/codecs");
const $ = __importStar(require("@dedot/shape"));
const V1_V2_SHARED = {
    metadata: {
        docs: 'Returns the metadata of a runtime.',
        params: [],
        type: 'OpaqueMetadata',
        codec: codecs_1.$OpaqueMetadata,
    },
};
/**
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/eaf1bc5633ebbacce97e4f167ebe1d0d268c4b24/substrate/primitives/api/src/lib.rs#L811-L827
 */
exports.Metadata = [
    {
        methods: {
            metadataAtVersion: {
                docs: 'Returns the metadata at a given version.',
                params: [
                    {
                        name: 'version',
                        type: 'u32',
                        codec: $.u32,
                    },
                ],
                type: 'Option<OpaqueMetadata>',
                codec: $.Option(codecs_1.$OpaqueMetadata),
            },
            metadataVersions: {
                docs: 'Returns the supported metadata versions.',
                params: [],
                type: 'Array<u32>',
                codec: $.Array($.u32),
            },
            ...V1_V2_SHARED,
        },
        version: 2,
    },
    {
        methods: {
            ...V1_V2_SHARED,
        },
        version: 1,
    },
];
