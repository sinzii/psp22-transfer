"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntimeApiMethodSpecs = exports.getRuntimeApiSpecs = exports.getRuntimeApiNames = exports.toRuntimeApiSpecs = exports.toRuntimeApiMethods = exports.RuntimeApis = void 0;
const babe_js_1 = require("./babe.js");
const beefy_js_1 = require("./beefy.js");
const block_builder_js_1 = require("./block-builder.js");
const core_js_1 = require("./core.js");
const discovery_js_1 = require("./discovery.js");
const genesis_builder_js_1 = require("./genesis-builder.js");
const grandpa_js_1 = require("./grandpa.js");
const metadata_js_1 = require("./metadata.js");
const mmr_js_1 = require("./mmr.js");
const nomination_pools_js_1 = require("./nomination-pools.js");
const offchain_js_1 = require("./offchain.js");
const parachains_js_1 = require("./parachains.js");
const payment_js_1 = require("./payment.js");
const session_js_1 = require("./session.js");
const staking_js_1 = require("./staking.js");
const system_js_1 = require("./system.js");
const transaction_pool_js_1 = require("./transaction-pool.js");
exports.RuntimeApis = {
    AuthorityDiscoveryApi: discovery_js_1.AuthorityDiscoveryApi,
    BabeApi: babe_js_1.BabeApi,
    Metadata: metadata_js_1.Metadata,
    Core: core_js_1.Core,
    AccountNonceApi: system_js_1.AccountNonceApi,
    TransactionPaymentApi: payment_js_1.TransactionPaymentApi,
    TransactionPaymentCallApi: payment_js_1.TransactionPaymentCallApi,
    BlockBuilder: block_builder_js_1.BlockBuilder,
    GrandpaApi: grandpa_js_1.GrandpaApi,
    MmrApi: mmr_js_1.MmrApi,
    NominationPoolsApi: nomination_pools_js_1.NominationPoolsApi,
    OffchainWorkerApi: offchain_js_1.OffchainWorkerApi,
    SessionKeys: session_js_1.SessionKeys,
    ParachainHost: parachains_js_1.ParachainHost,
    BeefyApi: beefy_js_1.BeefyApi,
    BeefyMmrApi: beefy_js_1.BeefyMmrApi,
    StakingApi: staking_js_1.StakingApi,
    TaggedTransactionQueue: transaction_pool_js_1.TaggedTransactionQueue,
    GenesisBuilder: genesis_builder_js_1.GenesisBuilder,
};
const toRuntimeApiMethods = (runtimeApiSpec) => {
    const { runtimeApiName, version, methods } = runtimeApiSpec;
    return Object.keys(methods).map((methodName) => ({
        ...methods[methodName],
        methodName,
        runtimeApiName,
        version,
    }));
};
exports.toRuntimeApiMethods = toRuntimeApiMethods;
const toRuntimeApiSpecs = (specs) => {
    return Object.keys(specs)
        .map((runtimeApiName) => specs[runtimeApiName].map((spec) => ({ ...spec, runtimeApiName })))
        .flat();
};
exports.toRuntimeApiSpecs = toRuntimeApiSpecs;
const getRuntimeApiNames = () => Object.keys(exports.RuntimeApis);
exports.getRuntimeApiNames = getRuntimeApiNames;
const getRuntimeApiSpecs = () => (0, exports.toRuntimeApiSpecs)(exports.RuntimeApis);
exports.getRuntimeApiSpecs = getRuntimeApiSpecs;
const getRuntimeApiMethodSpecs = () => (0, exports.getRuntimeApiSpecs)().map(exports.toRuntimeApiMethods).flat();
exports.getRuntimeApiMethodSpecs = getRuntimeApiMethodSpecs;
