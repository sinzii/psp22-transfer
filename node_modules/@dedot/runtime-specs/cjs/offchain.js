"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OffchainWorkerApi = void 0;
const codecs_1 = require("@dedot/codecs");
const $ = __importStar(require("@dedot/shape"));
/**
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/bc53b9a03a742f8b658806a01a7bf853cb9a86cd/substrate/primitives/offchain/src/lib.rs#L25-L37
 */
exports.OffchainWorkerApi = [
    {
        methods: {
            offchainWorker: {
                docs: 'Starts the off-chain task for given block header.',
                params: [
                    {
                        name: 'header',
                        type: 'Header',
                        codec: codecs_1.$Header,
                    },
                ],
                type: '[]',
                codec: $.Tuple(),
            },
        },
        version: 2,
    },
    {
        methods: {
            offchainWorker: {
                docs: 'Starts the off-chain task for given block number.',
                params: [
                    {
                        name: 'number',
                        type: 'BlockNumber',
                        codec: codecs_1.$BlockNumber,
                    },
                ],
                type: '[]',
                codec: $.Tuple(),
            },
        },
        version: 1,
    },
];
