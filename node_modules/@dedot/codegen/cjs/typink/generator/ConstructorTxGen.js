"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorTxGen = void 0;
const utils_js_1 = require("../../utils.js");
const QueryGen_js_1 = require("./QueryGen.js");
class ConstructorTxGen extends QueryGen_js_1.QueryGen {
    generate(useSubPaths = false) {
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericSubstrateApi');
        this.typesGen.typeImports.addContractType('GenericConstructorTx', 'GenericConstructorTxCall', 'ConstructorTxOptions', 'GenericInstantiateSubmittableExtrinsic');
        const { constructors } = this.contractMetadata.spec;
        const constructorsOut = this.doGenerate(constructors, 'ConstructorTxOptions');
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('typink/templates/constructor-tx.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, constructorsOut }));
    }
    generateMethodDef(def, optionsParamName = 'options') {
        const paramsOut = this.generateParamsOut(def.args);
        return `GenericConstructorTxCall<ChainApi, (${paramsOut && `${paramsOut},`} ${optionsParamName}: ConstructorTxOptions) => GenericInstantiateSubmittableExtrinsic<ChainApi>>`;
    }
}
exports.ConstructorTxGen = ConstructorTxGen;
