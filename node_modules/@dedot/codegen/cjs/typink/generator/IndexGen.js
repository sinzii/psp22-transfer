"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexGen = void 0;
const index_js_1 = require("../../shared/index.js");
const utils_js_1 = require("../../utils.js");
class IndexGen {
    interfaceName;
    contractMetadata;
    typesGen;
    constructor(interfaceName, contractMetadata, typesGen) {
        this.interfaceName = interfaceName;
        this.contractMetadata = contractMetadata;
        this.typesGen = typesGen;
    }
    generate(useSubPaths = false) {
        const interfaceName = this.interfaceName;
        const langErrorId = this.contractMetadata.spec.lang_error.type;
        const langErrorName = this.typesGen.cleanPath(this.contractMetadata.types[langErrorId].type.path);
        const typeImports = new index_js_1.TypeImports();
        typeImports.addKnownType('VersionedGenericSubstrateApi', 'RpcVersion', 'RpcV2');
        typeImports.addContractType('GenericContractApi');
        typeImports.addChainType('SubstrateApi');
        typeImports.addPortableType(langErrorName);
        const { contract: { name = '', version = '', authors = [] }, source: { language = '' }, } = this.contractMetadata;
        const interfaceDocs = (0, utils_js_1.commentBlock)([
            `@name: ${interfaceName}`, // prettier-end-here
            `@contractName: ${name}`,
            `@contractVersion: ${version}`,
            `@authors: ${authors.join(', ')}`,
            `@language: ${language}`,
        ]);
        const importTypes = typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('typink/templates/index.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ interfaceName, interfaceDocs, langErrorName, importTypes }));
    }
}
exports.IndexGen = IndexGen;
