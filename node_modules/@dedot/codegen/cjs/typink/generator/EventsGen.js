"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsGen = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("../../utils.js");
const QueryGen_js_1 = require("./QueryGen.js");
class EventsGen extends QueryGen_js_1.QueryGen {
    generate(useSubPaths = false) {
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericSubstrateApi');
        this.typesGen.typeImports.addContractType('GenericContractEvents', 'GenericContractEvent');
        const { events } = this.contractMetadata.spec;
        let eventsOut = '';
        const isV5 = this.contractMetadata.version === 5;
        events.forEach((event) => {
            const { docs, label } = event;
            eventsOut += `${(0, utils_js_1.commentBlock)(docs, '\n', isV5 ? ('signature_topic' in event ? `@signature_topic: ${event.signature_topic}` : '- Anonymous event') : '')}`;
            eventsOut += `${(0, utils_1.stringPascalCase)(label)}: ${this.#generateEventDef(event)};\n\n`;
        });
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('typink/templates/events.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, eventsOut }));
    }
    #generateEventDef(event) {
        const { args, label } = event;
        const paramsOut = this.generateParamsOut(args);
        return `GenericContractEvent<'${(0, utils_1.stringPascalCase)(label)}', {${paramsOut}}>`;
    }
    generateParamsOut(args) {
        return args
            .map(({ type: { type }, label, docs, indexed }) => `${(0, utils_js_1.commentBlock)(docs, '\n', `@indexed: ${indexed}`)}${(0, utils_1.stringCamelCase)(label)}: ${this.typesGen.generateType(type, 1, true)}`)
            .join(', ');
    }
}
exports.EventsGen = EventsGen;
