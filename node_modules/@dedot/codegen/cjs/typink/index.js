"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateContractTypes = void 0;
const contracts_1 = require("@dedot/contracts");
const utils_1 = require("@dedot/utils");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const index_js_1 = require("./generator/index.js");
async function generateContractTypes(metadata, contract, outDir = '.', extension = 'd.ts', useSubPaths = false) {
    let contractMetadata = typeof metadata === 'string' ? (0, contracts_1.parseRawMetadata)(metadata) : metadata;
    const contractName = contract || contractMetadata.contract.name;
    const dirPath = path_1.default.resolve(outDir, (0, utils_1.stringDashCase)(contractName));
    const typesFileName = path_1.default.join(dirPath, `types.${extension}`);
    const queryTypesFileName = path_1.default.join(dirPath, `query.${extension}`);
    const txTypesFileName = path_1.default.join(dirPath, `tx.${extension}`);
    const constructorTxTypesFileName = path_1.default.join(dirPath, `constructor-tx.${extension}`);
    const constructorQueryTypesFileName = path_1.default.join(dirPath, `constructor-query.${extension}`);
    const eventsTypesFile = path_1.default.join(dirPath, `events.${extension}`);
    const indexTypesFileName = path_1.default.join(dirPath, `index.${extension}`);
    if (!fs_1.default.existsSync(dirPath)) {
        fs_1.default.mkdirSync(dirPath, { recursive: true });
    }
    const interfaceName = `${(0, utils_1.stringPascalCase)(`${contractName}`)}ContractApi`;
    const typesGen = new index_js_1.TypesGen(contractMetadata);
    const queryGen = new index_js_1.QueryGen(contractMetadata, typesGen);
    const txGen = new index_js_1.TxGen(contractMetadata, typesGen);
    const constructorTxGen = new index_js_1.ConstructorTxGen(contractMetadata, typesGen);
    const constructorQueryGen = new index_js_1.ConstructorQueryGen(contractMetadata, typesGen);
    const eventsGen = new index_js_1.EventsGen(contractMetadata, typesGen);
    const indexGen = new index_js_1.IndexGen(interfaceName, contractMetadata, typesGen);
    fs_1.default.writeFileSync(typesFileName, await typesGen.generate(useSubPaths));
    fs_1.default.writeFileSync(queryTypesFileName, await queryGen.generate(useSubPaths));
    fs_1.default.writeFileSync(txTypesFileName, await txGen.generate(useSubPaths));
    fs_1.default.writeFileSync(constructorQueryTypesFileName, await constructorQueryGen.generate(useSubPaths));
    fs_1.default.writeFileSync(constructorTxTypesFileName, await constructorTxGen.generate(useSubPaths));
    fs_1.default.writeFileSync(eventsTypesFile, await eventsGen.generate(useSubPaths));
    fs_1.default.writeFileSync(indexTypesFileName, await indexGen.generate(useSubPaths));
    return { interfaceName, outputFolder: dirPath };
}
exports.generateContractTypes = generateContractTypes;
