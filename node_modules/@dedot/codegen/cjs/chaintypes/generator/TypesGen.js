"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypesGen = void 0;
const codecs_1 = require("@dedot/codecs");
const index_js_1 = require("../../shared/index.js");
const utils_js_1 = require("../../utils.js");
// Skip generate types for these
// as we do have native types for them
const SKIP_TYPES = [
    'BoundedBTreeMap',
    'BoundedBTreeSet',
    'BoundedVec',
    'Box',
    'BTreeMap',
    'BTreeSet',
    'Cow',
    'Option',
    'Range',
    'RangeInclusive',
    'Result',
    'WeakBoundedVec',
    'WrapperKeepOpaque',
    'WrapperOpaque',
];
class TypesGen extends index_js_1.BaseTypesGen {
    metadata;
    registry;
    constructor(metadata) {
        super(metadata.types, SKIP_TYPES);
        this.metadata = metadata;
        this.registry = new codecs_1.PortableRegistry(this.metadata);
        this.includedTypes = this.calculateIncludedTypes();
    }
    generate(useSubPaths = false) {
        this.clearCache();
        let defTypeOut = '';
        Object.values(this.includedTypes)
            .filter(({ skip, knownType }) => !(skip || knownType))
            .forEach(({ name, nameOut, id, docs }) => {
            defTypeOut += `${(0, utils_js_1.commentBlock)(docs)}export type ${nameOut} = ${this.generateType(id, 0, true)};\n\n`;
            if (this.shouldGenerateTypeIn(id)) {
                defTypeOut += `export type ${name} = ${this.generateType(id)};\n\n`;
            }
        });
        const importTypes = this.typeImports.toImports({ excludeModules: ['./types'], useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('chaintypes/templates/types.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, defTypeOut }));
    }
    shouldGenerateTypeIn(id) {
        const { callTypeId } = this.metadata.extrinsic;
        const palletCallTypeIds = this.registry.getFieldTypeIdsFromEnum(callTypeId);
        return callTypeId === id || palletCallTypeIds.includes(id);
    }
    getEnumOptions(typeId) {
        return this.registry.getEnumOptions(typeId);
    }
}
exports.TypesGen = TypesGen;
