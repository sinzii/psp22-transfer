"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryGen = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("../../utils.js");
const ApiGen_js_1 = require("./ApiGen.js");
class QueryGen extends ApiGen_js_1.ApiGen {
    generate(useSubPaths = false) {
        const { pallets } = this.metadata;
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericChainStorage', 'GenericStorageQuery', 'Callback', 'RpcVersion');
        let defTypeOut = '';
        for (let pallet of pallets) {
            const storage = pallet.storage;
            if (!storage)
                continue;
            const queries = storage.entries.map((one) => this.#generateEntry(one));
            const queryDefs = queries.map(({ name, valueType, keyType, docs, keyTypeOut }) => {
                if (keyTypeOut) {
                    return `${(0, utils_js_1.commentBlock)(docs)}${name}: GenericStorageQuery<Rv, (${keyType}) => ${valueType}, ${keyTypeOut}>`;
                }
                else {
                    return `${(0, utils_js_1.commentBlock)(docs)}${name}: GenericStorageQuery<Rv, (${keyType}) => ${valueType}>`;
                }
            });
            defTypeOut += (0, utils_js_1.commentBlock)(`Pallet \`${pallet.name}\`'s storage queries`);
            defTypeOut += `${(0, utils_1.stringCamelCase)(pallet.name)}: {
        ${queryDefs.join(',\n')}
        
        ${(0, utils_js_1.commentBlock)('Generic pallet storage query')}[storage: string]: GenericStorageQuery<Rv>;
      },`;
        }
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('chaintypes/templates/query.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, defTypeOut }));
    }
    #generateEntry(entry) {
        const { name, storageType, docs, modifier } = entry;
        let valueType, keyTypeOut, keyTypeIn;
        if (storageType.type === 'Plain') {
            valueType = this.typesGen.generateType(storageType.value.valueTypeId, 1, true);
        }
        else if (storageType.type === 'Map') {
            valueType = this.typesGen.generateType(storageType.value.valueTypeId, 1, true);
            keyTypeOut = this.typesGen.generateType(storageType.value.keyTypeId, 1, true);
            keyTypeIn = this.typesGen.generateType(storageType.value.keyTypeId, 1);
        }
        else {
            throw Error('Invalid entry type!');
        }
        const isOptional = modifier === 'Optional';
        valueType = `${valueType}${isOptional ? ' | undefined' : ''}`;
        docs.push('\n');
        if (keyTypeIn) {
            docs.push(`@param {${keyTypeIn}} arg`);
        }
        docs.push(`@param {Callback<${valueType}> =} callback`);
        return {
            name: (0, utils_1.normalizeName)(name),
            valueType,
            keyType: keyTypeIn ? `arg: ${keyTypeIn}` : '',
            keyTypeOut,
            docs,
        };
    }
}
exports.QueryGen = QueryGen;
