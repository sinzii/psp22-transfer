"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstsGen = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("../../utils.js");
const ApiGen_js_1 = require("./ApiGen.js");
class ConstsGen extends ApiGen_js_1.ApiGen {
    generate(useSubPaths = false) {
        const { pallets } = this.metadata;
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericChainConsts', 'RpcVersion');
        let defTypeOut = '';
        for (let pallet of pallets) {
            const typedConstants = pallet.constants.map((one) => ({
                name: (0, utils_1.normalizeName)(one.name),
                type: this.typesGen.generateType(one.typeId, 1, true),
                docs: one.docs,
            }));
            defTypeOut += (0, utils_js_1.commentBlock)(`Pallet \`${pallet.name}\`'s constants`);
            defTypeOut += `${(0, utils_1.stringCamelCase)(pallet.name)}: {
        ${typedConstants.map(({ name, type, docs }) => `${(0, utils_js_1.commentBlock)(docs)}${name}: ${type}`).join(',\n')}
          
        ${(0, utils_js_1.commentBlock)('Generic pallet constant')}[name: string]: any,
      },`;
        }
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('chaintypes/templates/consts.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, defTypeOut }));
    }
}
exports.ConstsGen = ConstsGen;
