"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorsGen = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("../../utils.js");
const ApiGen_js_1 = require("./ApiGen.js");
class ErrorsGen extends ApiGen_js_1.ApiGen {
    generate(useSubPaths = false) {
        const { pallets } = this.metadata;
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericChainErrors', 'GenericPalletError', 'RpcVersion');
        let defTypeOut = '';
        for (let pallet of pallets) {
            const errorTypeId = pallet.error;
            if (!errorTypeId) {
                continue;
            }
            const errorDefs = this.#getErrorDefs(errorTypeId);
            defTypeOut += (0, utils_js_1.commentBlock)(`Pallet \`${pallet.name}\`'s errors`);
            defTypeOut += `${(0, utils_1.stringCamelCase)(pallet.name)}: {
        ${errorDefs
                .map(({ name, docs }) => `${(0, utils_js_1.commentBlock)(docs)}${(0, utils_1.stringPascalCase)(name)}: GenericPalletError<Rv>`)
                .join(',\n')}
          
        ${(0, utils_js_1.commentBlock)('Generic pallet error')}[error: string]: GenericPalletError<Rv>,
      },`;
        }
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('chaintypes/templates/errors.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, defTypeOut }));
    }
    #getErrorDefs(errorTypeId) {
        const def = this.metadata.types[errorTypeId];
        (0, utils_1.assert)(def, `Error def not found for id ${errorTypeId}`);
        const { type, value } = def.typeDef;
        (0, utils_1.assert)(type === 'Enum', 'Invalid pallet error type!');
        return value.members;
    }
}
exports.ErrorsGen = ErrorsGen;
