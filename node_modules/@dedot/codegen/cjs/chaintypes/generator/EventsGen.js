"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsGen = void 0;
const utils_1 = require("@dedot/utils");
const utils_js_1 = require("../../utils.js");
const ApiGen_js_1 = require("./ApiGen.js");
class EventsGen extends ApiGen_js_1.ApiGen {
    generate(useSubPaths = false) {
        const { pallets } = this.metadata;
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericChainEvents', 'GenericPalletEvent', 'RpcVersion');
        let defTypeOut = '';
        for (let pallet of pallets) {
            const eventTypeId = pallet.event;
            if (!eventTypeId) {
                continue;
            }
            const eventDefs = this.#getEventDefs(eventTypeId);
            const flatMembers = eventDefs.every((d) => d.fields.length === 0);
            defTypeOut += (0, utils_js_1.commentBlock)(`Pallet \`${pallet.name}\`'s events`);
            defTypeOut += `${(0, utils_1.stringCamelCase)(pallet.name)}: {
        ${eventDefs
                .map((def) => {
                const genericParts = [`'${pallet.name}'`, `'${def.name}'`];
                const eventDataPart = this.#generateMemberDefType(def.fields);
                if (eventDataPart) {
                    genericParts.push(eventDataPart);
                }
                else {
                    genericParts.push(flatMembers ? 'undefined' : 'null');
                }
                return { ...def, genericParts };
            })
                .map(({ name, docs, fields, genericParts }) => `${(0, utils_js_1.commentBlock)(docs)}${(0, utils_1.stringPascalCase)(name)}: GenericPalletEvent<Rv, ${genericParts.join(', ')}>`)
                .join(',\n')}
          
        ${(0, utils_js_1.commentBlock)('Generic pallet event')}[prop: string]: GenericPalletEvent<Rv>,
      },`;
        }
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = (0, utils_js_1.compileTemplate)('chaintypes/templates/events.hbs');
        return (0, utils_js_1.beautifySourceCode)(template({ importTypes, defTypeOut }));
    }
    #getEventDefs(typeId) {
        const def = this.metadata.types[typeId];
        (0, utils_1.assert)(def, `Event def not found for id ${typeId}`);
        const { type, value } = def.typeDef;
        (0, utils_1.assert)(type === 'Enum', 'Invalid pallet event type!');
        return value.members;
    }
    #generateMemberDefType(fields) {
        if (fields.length === 0) {
            return null;
        }
        else if (fields[0].name === undefined) {
            return fields.length === 1
                ? this.typesGen.generateType(fields[0].typeId, 1, true)
                : `[${fields
                    .map(({ typeId, docs }) => `${(0, utils_js_1.commentBlock)(docs)}${this.typesGen.generateType(typeId, 1, true)}`)
                    .join(', ')}]`;
        }
        else {
            return this.typesGen.generateObjectType(fields, 1, true);
        }
    }
}
exports.EventsGen = EventsGen;
