"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkKnownCodecType = exports.findKnownWrapperCodec = exports.findKnownCodec = exports.findKnownCodecType = exports.looseTypeCodecs = exports.normalizeCodecName = void 0;
const Codecs = __importStar(require("@dedot/codecs"));
const codecs_1 = require("@dedot/codecs");
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
const normalizeCodecName = (name) => {
    return name.startsWith('$') ? name : `$${name}`;
};
exports.normalizeCodecName = normalizeCodecName;
// Known paths for codecs (primitives) that are shared between
// different substrate-based blockchains
const KNOWN_PATHS = [
    'sp_core::crypto::AccountId32',
    'sp_runtime::generic::era::Era',
    'sp_runtime::multiaddress::MultiAddress',
    /^sp_runtime::DispatchError$/,
    'sp_runtime::ModuleError',
    'sp_runtime::TokenError',
    'sp_arithmetic::ArithmeticError',
    'sp_runtime::TransactionalError',
    'frame_support::dispatch::DispatchInfo',
    'frame_system::Phase',
    'sp_version::RuntimeVersion',
    'fp_account::AccountId20',
    'account::AccountId20',
    'polkadot_runtime_common::claims::EthereumAddress',
    'pallet_identity::types::Data',
    'sp_runtime::generic::digest::Digest',
    'sp_runtime::generic::digest::DigestItem',
    'sp_runtime::generic::header::Header',
    'sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic',
    /^primitive_types::\w+$/,
    /^sp_arithmetic::per_things::\w+$/,
    /^sp_arithmetic::fixed_point::\w+$/,
    'ink_primitives::types::Hash',
    { path: 'ink_primitives::types::AccountId', codec: 'AccountId32' },
];
const WRAPPER_TYPE_REGEX = /^(\w+)<(.*)>$/;
const TUPLE_TYPE_REGEX = /^\[(.*)]$/;
const KNOWN_WRAPPER_TYPES = ['Option', 'Vec', 'Result', 'Array'];
/**
 * Collection of codec types with loose input types
 *
 * Loose codecs are codecs with different typeIn & typeOut,
 * E.g: Codec `$AccountId32`, we have its typeIn is `AccountId32Like` & typeOut is `AccountId32`
 *
 * This registry keep track the list of codecs which follow this convention
 */
exports.looseTypeCodecs = {
    $AccountId20: codecs_1.$AccountId20,
    $EthereumAddress: codecs_1.$EthereumAddress,
    $AccountId32: codecs_1.$AccountId32,
    $ConsensusEngineId: codecs_1.$ConsensusEngineId,
    $StorageKey: codecs_1.$StorageKey,
    $StorageData: codecs_1.$StorageData,
    $PrefixedStorageKey: codecs_1.$PrefixedStorageKey,
    $Bytes: codecs_1.$Bytes,
    $RawBytes: codecs_1.$RawBytes,
    $MultiAddress: codecs_1.$MultiAddress,
    $OpaqueExtrinsic: codecs_1.$OpaqueExtrinsic,
    $UncheckedExtrinsic: codecs_1.$UncheckedExtrinsic,
    $Era: codecs_1.$Era,
};
function findKnownCodecType(name) {
    const normalizedName = (0, exports.normalizeCodecName)(name);
    const $knownCodec = exports.looseTypeCodecs[normalizedName];
    if ($knownCodec) {
        return {
            name: normalizedName,
            $codec: $knownCodec,
            typeIn: `${name}Like`,
            typeOut: name,
        };
    }
    const $codec = findKnownCodec(name);
    if ($codec.nativeType && $[name]) {
        return {
            name: normalizedName,
            $codec,
            typeIn: $codec.nativeType,
            typeOut: $codec.nativeType,
        };
    }
    return {
        name: normalizedName,
        $codec,
        typeIn: name,
        typeOut: name,
    };
}
exports.findKnownCodecType = findKnownCodecType;
function findKnownCodec(typeName) {
    // @ts-ignore
    const $codec = findKnownWrapperCodec(typeName) || Codecs[(0, exports.normalizeCodecName)(typeName)] || $[typeName];
    (0, utils_1.assert)($codec, `Known codec not found - ${typeName}`);
    return $codec;
}
exports.findKnownCodec = findKnownCodec;
function findKnownWrapperCodec(typeName) {
    const matchNames = typeName.match(WRAPPER_TYPE_REGEX);
    if (matchNames) {
        const [_, wrapper, inner] = matchNames;
        if (KNOWN_WRAPPER_TYPES.includes(wrapper)) {
            // @ts-ignore
            const $Wrapper = $[wrapper];
            if (inner.match(TUPLE_TYPE_REGEX) || inner.match(WRAPPER_TYPE_REGEX)) {
                return $Wrapper(findKnownWrapperCodec(inner));
            }
            const $inners = inner.split(',').map((one) => findKnownCodec(one.trim()));
            return $Wrapper(...$inners);
        }
        throw new Error(`Unknown wrapper type ${wrapper} from ${typeName}`);
    }
    else if (typeName.match(TUPLE_TYPE_REGEX)) {
        const $inner = typeName
            .slice(1, -1)
            .split(',')
            .filter((x) => x)
            .map((one) => findKnownCodec(one.trim()));
        return $.Tuple(...$inner);
    }
}
exports.findKnownWrapperCodec = findKnownWrapperCodec;
function checkKnownCodecType(path) {
    const joinedPath = Array.isArray(path) ? path.join('::') : path;
    const knownPath = KNOWN_PATHS.find((one) => {
        if (typeof one === 'string') {
            return one === joinedPath;
        }
        else if (one instanceof RegExp) {
            return one.test(joinedPath);
        }
        else {
            return one.path === joinedPath;
        }
    });
    if (!knownPath) {
        return [false, ''];
    }
    if (typeof knownPath === 'string' || knownPath instanceof RegExp) {
        return [true, joinedPath.split('::').at(-1)];
    }
    return [true, knownPath.codec];
}
exports.checkKnownCodecType = checkKnownCodecType;
