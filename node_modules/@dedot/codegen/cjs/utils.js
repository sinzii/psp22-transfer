"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeType = exports.isReservedWord = exports.compileTemplate = exports.beautifySourceCode = exports.commentBlock = exports.TUPLE_TYPE_REGEX = exports.WRAPPER_TYPE_REGEX = void 0;
const fs = __importStar(require("fs"));
const handlebars_1 = __importDefault(require("handlebars"));
const path = __importStar(require("path"));
const prettier = __importStar(require("prettier"));
const dirname_js_1 = require("./dirname.js");
exports.WRAPPER_TYPE_REGEX = /^(\w+)<(.*)>$/;
exports.TUPLE_TYPE_REGEX = /^\[(.*)]$/;
const commentBlock = (...docs) => {
    const flatLines = docs.flat();
    if (flatLines.length === 0 || !flatLines.some((o) => !!o)) {
        return '';
    }
    else {
        return `
/**
${flatLines.map((line) => `* ${line.replaceAll(/\s+/g, ' ').trim()}`).join('\n')}
 **/
      `;
    }
};
exports.commentBlock = commentBlock;
const beautifySourceCode = async (source) => {
    const prettierOptions = await prettier.resolveConfig(path.resolve((0, dirname_js_1.currentDirname)(), '../../../.prettierrc.cjs'));
    return prettier.format(source, { parser: 'babel-ts', ...prettierOptions });
};
exports.beautifySourceCode = beautifySourceCode;
const compileTemplate = (templateFile) => {
    const templateFilePath = path.resolve((0, dirname_js_1.currentDirname)(), templateFile);
    return handlebars_1.default.compile(fs.readFileSync(templateFilePath, 'utf8'));
};
exports.compileTemplate = compileTemplate;
// TODO add more reserved words
const TS_RESERVED_WORDS = ['new', 'class'];
/**
 * Check if a word is TypeScript/JavaScript reserved
 * @param word
 */
const isReservedWord = (word) => TS_RESERVED_WORDS.includes(word);
exports.isReservedWord = isReservedWord;
const TS_PRIMITIVE_TYPES = [
    'void',
    'undefined',
    'null',
    'number',
    'boolean',
    'bigint',
    'Map',
    'Set',
    'string',
    'any',
    'Array',
    'Record',
];
/**
 * Check if a type is native JS/TS type
 * @param type
 */
const isNativeType = (type) => {
    return TS_PRIMITIVE_TYPES.some((one) => {
        if (typeof one === 'string') {
            return one === type;
        }
        else {
            return type.match(one);
        }
    });
};
exports.isNativeType = isNativeType;
