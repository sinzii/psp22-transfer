import { TypeImports } from '../../shared/index.js';
import { beautifySourceCode, commentBlock, compileTemplate } from '../../utils.js';
export class IndexGen {
    interfaceName;
    contractMetadata;
    typesGen;
    constructor(interfaceName, contractMetadata, typesGen) {
        this.interfaceName = interfaceName;
        this.contractMetadata = contractMetadata;
        this.typesGen = typesGen;
    }
    generate(useSubPaths = false) {
        const interfaceName = this.interfaceName;
        const langErrorId = this.contractMetadata.spec.lang_error.type;
        const langErrorName = this.typesGen.cleanPath(this.contractMetadata.types[langErrorId].type.path);
        const typeImports = new TypeImports();
        typeImports.addKnownType('VersionedGenericSubstrateApi', 'RpcVersion', 'RpcV2');
        typeImports.addContractType('GenericContractApi');
        typeImports.addChainType('SubstrateApi');
        typeImports.addPortableType(langErrorName);
        const { contract: { name = '', version = '', authors = [] }, source: { language = '' }, } = this.contractMetadata;
        const interfaceDocs = commentBlock([
            `@name: ${interfaceName}`, // prettier-end-here
            `@contractName: ${name}`,
            `@contractVersion: ${version}`,
            `@authors: ${authors.join(', ')}`,
            `@language: ${language}`,
        ]);
        const importTypes = typeImports.toImports({ useSubPaths });
        const template = compileTemplate('typink/templates/index.hbs');
        return beautifySourceCode(template({ interfaceName, interfaceDocs, langErrorName, importTypes }));
    }
}
