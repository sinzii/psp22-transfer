import { beautifySourceCode, compileTemplate } from '../../utils.js';
import { QueryGen } from './QueryGen.js';
export class TxGen extends QueryGen {
    generate(useSubPaths = false) {
        this.typesGen.clearCache();
        this.typesGen.typeImports.addKnownType('GenericSubstrateApi');
        this.typesGen.typeImports.addContractType('GenericContractTx', 'GenericContractTxCall', 'ContractTxOptions', 'ContractSubmittableExtrinsic');
        const { messages } = this.contractMetadata.spec;
        const txMessages = messages.filter((one) => one.mutates);
        const txCallsOut = this.doGenerate(txMessages, 'ContractTxOptions');
        const importTypes = this.typesGen.typeImports.toImports({ useSubPaths });
        const template = compileTemplate('typink/templates/tx.hbs');
        return beautifySourceCode(template({ importTypes, txCallsOut }));
    }
    generateMethodDef(def, optionsParamName = 'options') {
        const paramsOut = this.generateParamsOut(def.args);
        return `GenericContractTxCall<ChainApi, (${paramsOut && `${paramsOut},`} ${optionsParamName}: ContractTxOptions) => ContractSubmittableExtrinsic<ChainApi>>`;
    }
}
