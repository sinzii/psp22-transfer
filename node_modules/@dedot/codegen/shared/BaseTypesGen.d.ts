import { Field, PortableType, TypeId } from '@dedot/codecs';
import { EnumOptions } from '@dedot/shape';
import { TypeImports } from './TypeImports.js';
export interface NamedType extends PortableType {
    name: string;
    nameOut: string;
    skip?: boolean;
    knownType?: boolean;
    suffix?: string;
}
export declare const BASIC_KNOWN_TYPES: string[];
export declare abstract class BaseTypesGen {
    #private;
    types: PortableType[];
    includedTypes: Record<TypeId, NamedType>;
    typeImports: TypeImports;
    skipTypes: string[];
    knownTypes: Record<TypeId, string>;
    protected constructor(types: PortableType[], skipTypes?: string[]);
    shouldGenerateTypeIn(_id: TypeId): boolean;
    typeCache: Record<string, string>;
    clearCache(): void;
    protected calculateKnownTypes(): Record<TypeId, string>;
    protected calculateIncludedTypes(): Record<TypeId, NamedType>;
    generateType(typeId: TypeId, nestedLevel?: number, typeOut?: boolean): string;
    generateObjectType(fields: Field[], nestedLevel?: number, typeOut?: boolean): string;
    cleanPath(path: string[]): string;
    eqlCache: Map<string, boolean>;
    typeEql(idA: number, idB: number, level?: number): boolean;
    extractDupTypeSuffix(dupTypeId: TypeId, originalTypeId: TypeId, dupCount: number): string;
    addTypeImport(typeName: string | string[]): void;
    getEnumOptions(_typeId: TypeId): EnumOptions;
}
