import * as $ from '@dedot/shape';
import { AnyShape } from '@dedot/shape';
export type CodecName = `$${string}`;
export interface CodecType {
    name: CodecName;
    $codec: AnyShape;
    typeIn: string;
    typeOut: string;
}
export declare const normalizeCodecName: (name: string | CodecName) => CodecName;
/**
 * Collection of codec types with loose input types
 *
 * Loose codecs are codecs with different typeIn & typeOut,
 * E.g: Codec `$AccountId32`, we have its typeIn is `AccountId32Like` & typeOut is `AccountId32`
 *
 * This registry keep track the list of codecs which follow this convention
 */
export declare const looseTypeCodecs: Record<string, AnyShape>;
export declare function findKnownCodecType(name: string): CodecType;
export declare function findKnownCodec<I = unknown, O = I>(typeName: string): $.Shape<I, O>;
export declare function findKnownWrapperCodec(typeName: string): $.AnyShape | undefined;
export declare function checkKnownCodecType(path: string | string[]): [boolean, string];
