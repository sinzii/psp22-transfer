import { BlockHash, Option, StorageData, StorageKey } from '@dedot/codecs';
import type { AsyncMethod, Callback, GenericStorageQuery, GenericSubstrateApi, Unsub } from '@dedot/types';
import { QueryableStorage } from '../storage/QueryableStorage.js';
import { Executor } from './Executor.js';
/**
 * @name StorageQueryExecutor
 * @description Execute a query to on-chain storage
 */
export declare class StorageQueryExecutor<ChainApi extends GenericSubstrateApi = GenericSubstrateApi> extends Executor<ChainApi> {
    doExecute(pallet: string, storage: string): GenericStorageQuery;
    protected exposeStorageMapMethods(entry: QueryableStorage): Record<string, AsyncMethod>;
    protected queryStorage(keys: StorageKey[], hash?: BlockHash): Promise<Record<StorageKey, Option<StorageData>>>;
    protected subscribeStorage(keys: StorageKey[], callback: Callback<Array<StorageData | undefined>>): Promise<Unsub>;
}
