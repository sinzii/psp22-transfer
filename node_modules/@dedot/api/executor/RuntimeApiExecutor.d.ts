import { BlockHash } from '@dedot/codecs';
import type { GenericRuntimeApiMethod, GenericSubstrateApi, RuntimeApiMethodParamSpec, RuntimeApiMethodSpec, RuntimeApiSpec } from '@dedot/types';
import { HexString } from '@dedot/utils';
import { Executor } from './Executor.js';
export declare const FallbackRuntimeApis: Record<string, number>;
export declare const FallbackRuntimeApiSpecs: {
    Metadata: RuntimeApiSpec[];
};
export interface StateCallParams {
    func: string;
    params: HexString;
    at?: BlockHash;
}
/**
 * @name RuntimeApiExecutor
 * @description Execute a runtime api call,
 * runtime api definitions/specs are either from Metadata V15
 * or defined externally when initializing `Dedot` instance
 * via `ApiOptions.runtimeApis` option.
 */
export declare class RuntimeApiExecutor<ChainApi extends GenericSubstrateApi = GenericSubstrateApi> extends Executor<ChainApi> {
    #private;
    doExecute(runtimeApi: string, method: string): GenericRuntimeApiMethod;
    protected stateCall(callParams: StateCallParams): Promise<HexString>;
    tryDecode(callSpec: RuntimeApiMethodSpec, raw: any): unknown;
    tryEncode(paramSpec: RuntimeApiMethodParamSpec, value: any): Uint8Array;
}
