import { BlockHash, Option, StorageData, StorageKey } from '@dedot/codecs';
import type { AsyncMethod, Callback, GenericSubstrateApi } from '@dedot/types';
import { HexString } from '@dedot/utils';
import { ChainHead } from '../../json-rpc/index.js';
import { QueryableStorage } from '../../storage/QueryableStorage.js';
import { ISubstrateClientAt } from '../../types.js';
import { StorageQueryExecutor } from '../StorageQueryExecutor.js';
/**
 * @name StorageQueryExecutorV2
 */
export declare class StorageQueryExecutorV2<ChainApi extends GenericSubstrateApi = GenericSubstrateApi> extends StorageQueryExecutor<ChainApi> {
    chainHead: ChainHead;
    constructor(client: ISubstrateClientAt<ChainApi>, chainHead: ChainHead, atBlockHash?: BlockHash);
    protected exposeStorageMapMethods(entry: QueryableStorage): Record<string, AsyncMethod>;
    protected queryStorage(keys: StorageKey[], at?: BlockHash): Promise<Record<StorageKey, Option<StorageData>>>;
    protected subscribeStorage(keys: HexString[], callback: Callback<Array<StorageData | undefined>>): Promise<() => Promise<void>>;
}
