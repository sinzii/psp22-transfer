import type { BlockHash, PalletDefLatest } from '@dedot/codecs';
import type { GenericSubstrateApi } from '@dedot/types';
import { ISubstrateClientAt } from '../types.js';
/**
 * @name Executor
 * @description Execution abstraction for a specific action
 */
export declare abstract class Executor<ChainApi extends GenericSubstrateApi = GenericSubstrateApi> {
    #private;
    readonly client: ISubstrateClientAt<ChainApi>;
    constructor(client: ISubstrateClientAt<ChainApi>, atBlockHash?: BlockHash);
    get atBlockHash(): `0x${string}` | undefined;
    get registry(): import("@dedot/codecs").PortableRegistry;
    get metadata(): {
        types: {
            id: number;
            path: string[];
            params: {
                name: string;
                typeId: number | undefined;
            }[];
            typeDef: {
                type: "Struct";
                value: {
                    fields: import("@dedot/codecs").Field[];
                };
            } | {
                type: "Enum";
                value: {
                    members: {
                        name: string;
                        fields: import("@dedot/codecs").Field[];
                        index: number;
                        docs: string[];
                    }[];
                };
            } | {
                type: "Sequence";
                value: {
                    typeParam: number;
                };
            } | {
                type: "SizedVec";
                value: {
                    len: number;
                    typeParam: number;
                };
            } | {
                type: "Tuple";
                value: {
                    fields: number[];
                };
            } | {
                type: "Primitive";
                value: {
                    kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
                };
            } | {
                type: "Compact";
                value: {
                    typeParam: number;
                };
            } | {
                type: "BitSequence";
                value: {
                    bitOrderType: number;
                    bitStoreType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                entries: {
                    name: string;
                    modifier: string;
                    storageType: {
                        type: "Plain";
                        value: {
                            valueTypeId: number;
                        };
                    } | {
                        type: "Map";
                        value: {
                            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                            keyTypeId: number;
                            valueTypeId: number;
                        };
                    };
                    default: `0x${string}`;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            event: number | undefined;
            constants: {
                name: string;
                typeId: number;
                value: `0x${string}`;
                docs: string[];
            }[];
            error: number | undefined;
            index: number;
            docs: string[];
        }[];
        extrinsic: {
            version: number;
            addressTypeId: number;
            callTypeId: number;
            signatureTypeId: number;
            extraTypeId: number;
            signedExtensions: {
                ident: string;
                typeId: number;
                additionalSigned: number;
            }[];
        };
        runtimeType: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    typeId: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            callEnumTypeId: number;
            eventEnumTypeId: number;
            errorEnumTypeId: number;
        };
        custom: {
            map: ReadonlyMap<string, {
                typeId: number;
                value: `0x${string}`;
            }>;
        };
    };
    getPallet(name: string): PalletDefLatest;
    execute(...paths: string[]): unknown;
    abstract doExecute(...paths: string[]): unknown;
}
