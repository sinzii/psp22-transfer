import { assert, stringCamelCase, UnknownApiError } from '@dedot/utils';
/**
 * @name Executor
 * @description Execution abstraction for a specific action
 */
export class Executor {
    client;
    #atBlockHash;
    constructor(client, atBlockHash) {
        this.client = client;
        this.#atBlockHash = atBlockHash;
    }
    get atBlockHash() {
        return this.#atBlockHash || this.client.atBlockHash;
    }
    get registry() {
        return this.client.registry;
    }
    get metadata() {
        return this.registry.metadata;
    }
    getPallet(name) {
        const targetPallet = this.metadata.pallets.find((p) => stringCamelCase(p.name) === name);
        assert(targetPallet, new UnknownApiError(`Pallet not found: ${name}`));
        return targetPallet;
    }
    execute(...paths) {
        try {
            return this.doExecute(...paths);
        }
        catch (e) {
            if (!this.client.options?.throwOnUnknownApi && e instanceof UnknownApiError) {
                return undefined;
            }
            throw e;
        }
    }
}
