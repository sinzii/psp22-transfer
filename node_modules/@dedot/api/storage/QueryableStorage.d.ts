import { PortableRegistry, PalletDefLatest, StorageDataLike, StorageEntryLatest, StorageKey, PrefixedStorageKey } from '@dedot/codecs';
/**
 * @name QueryableStorage
 * @description A helper to encode key & decode value for a storage entry
 */
export declare class QueryableStorage {
    #private;
    readonly registry: PortableRegistry;
    readonly palletName: string;
    readonly storageItem: string;
    readonly pallet: PalletDefLatest;
    readonly storageEntry: StorageEntryLatest;
    constructor(registry: PortableRegistry, palletName: string, storageItem: string);
    get prefixKey(): PrefixedStorageKey;
    get prefixKeyAsU8a(): Uint8Array;
    /**
     * Encode plain key input to raw/bytes storage key
     *
     * @param keyInput
     */
    encodeKey(keyInput?: any): StorageKey;
    /**
     * Decode storage key to plain key input
     * Only storage keys that hashed by `twox64Concat`, `blake2_128Concat`, or `identity` can be decoded
     *
     * @param key
     */
    decodeKey(key: StorageKey): any;
    /**
     * Decode raw/bytes storage data to plain value
     *
     * @param raw
     */
    decodeValue(raw?: StorageDataLike | null): any;
}
