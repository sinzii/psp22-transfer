import { SignerPayloadJSON } from '@polkadot/types/types';
import { PortableRegistry, SignedExtensionDefLatest } from '@dedot/codecs';
import * as $ from '@dedot/shape';
import { PayloadOptions } from '@dedot/types';
import { ISubstrateClient } from '../../types.js';
export interface ISignedExtension {
    identifier: string;
    $Data: $.AnyShape;
    $AdditionalSigned: $.AnyShape;
    data: any;
    additionalSigned: any;
    init(): Promise<void>;
    registry: PortableRegistry;
    toPayload(...additional: any[]): Partial<SignerPayloadJSON>;
}
interface SignedExtensionOptions {
    def?: SignedExtensionDefLatest;
    signerAddress?: string;
    payloadOptions?: Partial<PayloadOptions>;
}
export declare abstract class SignedExtension<Data extends any = {}, AdditionalSigned extends any = []> implements ISignedExtension {
    readonly client: ISubstrateClient;
    readonly options?: SignedExtensionOptions | undefined;
    data: Data;
    additionalSigned: AdditionalSigned;
    constructor(client: ISubstrateClient, options?: SignedExtensionOptions | undefined);
    init(): Promise<void>;
    get identifier(): string;
    get $Data(): $.AnyShape;
    get $AdditionalSigned(): $.AnyShape;
    get registry(): PortableRegistry;
    get signedExtensionDef(): {
        ident: string;
        typeId: number;
        additionalSigned: number;
    };
    get payloadOptions(): Partial<PayloadOptions>;
    toPayload(...args: any[]): Partial<SignerPayloadJSON>;
}
export {};
