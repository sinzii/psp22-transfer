"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainHeadBlockPrunedError = exports.ChainHeadBlockNotPinnedError = exports.ChainHeadInvalidRuntimeError = exports.ChainHeadLimitReachedError = exports.ChainHeadOperationError = exports.ChainHeadStopError = exports.ChainHeadOperationInaccessibleError = exports.ChainHeadError = exports.RetryStrategy = void 0;
const utils_1 = require("@dedot/utils");
var RetryStrategy;
(function (RetryStrategy) {
    RetryStrategy["NOW"] = "NOW";
    RetryStrategy["QUEUED"] = "QUEUED";
})(RetryStrategy || (exports.RetryStrategy = RetryStrategy = {}));
class ChainHeadError extends utils_1.DedotError {
    name = 'ChainHeadError';
    retryStrategy;
}
exports.ChainHeadError = ChainHeadError;
/**
 * Operation Inaccessible Error
 *
 * Ref: https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_follow.html#operationinaccessible
 */
class ChainHeadOperationInaccessibleError extends ChainHeadError {
    name = 'ChainHeadOperationInaccessibleError';
    retryStrategy = RetryStrategy.NOW;
}
exports.ChainHeadOperationInaccessibleError = ChainHeadOperationInaccessibleError;
/**
 * Stop Error
 *
 * Ref: https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_follow.html#stop
 */
class ChainHeadStopError extends ChainHeadError {
    name = 'ChainHeadStopError';
    retryStrategy = RetryStrategy.QUEUED;
}
exports.ChainHeadStopError = ChainHeadStopError;
/**
 * Operation Error
 * Ref: https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_follow.html#operationerror
 */
class ChainHeadOperationError extends ChainHeadError {
    name = 'ChainHeadOperationError';
}
exports.ChainHeadOperationError = ChainHeadOperationError;
/**
 * Limit Reached Error
 * Ref: https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_storage.html#limitreached
 */
class ChainHeadLimitReachedError extends ChainHeadError {
    name = 'ChainHeadLimitReachedError';
    retryStrategy = RetryStrategy.QUEUED;
}
exports.ChainHeadLimitReachedError = ChainHeadLimitReachedError;
/**
 * Invalid Runtime Error
 * Ref: https://paritytech.github.io/json-rpc-interface-spec/api/chainHead_v1_storage.html#limitreached
 */
class ChainHeadInvalidRuntimeError extends ChainHeadError {
    name = 'ChainHeadInvalidRuntimeError';
}
exports.ChainHeadInvalidRuntimeError = ChainHeadInvalidRuntimeError;
class ChainHeadBlockNotPinnedError extends ChainHeadError {
    name = 'ChainHeadBlockNotPinnedError';
}
exports.ChainHeadBlockNotPinnedError = ChainHeadBlockNotPinnedError;
class ChainHeadBlockPrunedError extends ChainHeadError {
    name = 'ChainHeadBlockPrunedError';
}
exports.ChainHeadBlockPrunedError = ChainHeadBlockPrunedError;
