"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmittableExtrinsicV2 = void 0;
const utils_1 = require("@dedot/utils");
const BaseSubmittableExtrinsic_js_1 = require("./BaseSubmittableExtrinsic.js");
const SubmittableResult_js_1 = require("./SubmittableResult.js");
const errors_js_1 = require("./errors.js");
/**
 * @name SubmittableExtrinsicV2
 * @description Submittable extrinsic based on JSON-RPC v2
 */
class SubmittableExtrinsicV2 extends BaseSubmittableExtrinsic_js_1.BaseSubmittableExtrinsic {
    client;
    constructor(client, call) {
        super(client, call);
        this.client = client;
    }
    async #send(callback) {
        const api = this.client;
        const txHex = this.toHex();
        const txHash = this.hash;
        // validate the transaction
        // https://github.com/paritytech/json-rpc-interface-spec/issues/55#issuecomment-1609011150
        const finalizedHash = await this.client.chainHead.finalizedHash();
        const validateTx = async (hash) => {
            const apiAt = await api.at(hash);
            return apiAt.call.taggedTransactionQueue.validateTransaction('External', txHex, hash);
        };
        const validation = await validateTx(finalizedHash);
        if (validation.isOk) {
            callback(new SubmittableResult_js_1.SubmittableResult({ status: { type: 'Validated' }, txHash }));
        }
        else if (validation.isErr) {
            throw new errors_js_1.InvalidTxError(`Invalid Tx: ${validation.err.type} - ${validation.err.value.type}`, validation);
        }
        const checkTxIsOnChain = async (blockHash) => {
            if (blockHash === finalizedHash)
                return;
            const block = api.chainHead.findBlock(blockHash);
            const txs = await api.chainHead.body(blockHash);
            const txIndex = txs.indexOf(txHex);
            if (txIndex < 0) {
                return checkTxIsOnChain(block.parent);
            }
            const events = await this.getSystemEventsAt(blockHash);
            const txEvents = events.filter(({ phase }) => phase.type == 'ApplyExtrinsic' && phase.value === txIndex);
            return {
                blockHash,
                blockNumber: block.number,
                index: txIndex,
                events: txEvents,
            };
        };
        let txFound;
        let isSearching = false;
        let searchQueue = new utils_1.AsyncQueue();
        // TODO 1. move the searching logic into a different utility
        //      2. properly cancel the work by actually cancel the on-going operations
        const cancelPendingSearch = () => {
            searchQueue.clear();
        };
        const cancelBodySearch = () => {
            searchQueue.cancel();
        };
        const startSearching = (block) => {
            return searchQueue.enqueue(async () => {
                const found = await checkTxIsOnChain(block.hash);
                if (found) {
                    cancelPendingSearch();
                }
                return found;
            });
        };
        const checkBestBlockIncluded = async (block, bestChainChanged) => {
            if (bestChainChanged) {
                if (isSearching) {
                    // if the best chain is changing, we cancel the current search
                    // and start searching on the current best chain
                    cancelBodySearch();
                }
            }
            else {
                if (txFound)
                    return;
            }
            try {
                isSearching = true;
                const inBlock = await startSearching(block);
                if (!inBlock) {
                    if (txFound && bestChainChanged) {
                        txFound = undefined;
                        callback(new SubmittableResult_js_1.SubmittableResult({
                            status: { type: 'NoLongerInBestChain' },
                            txHash,
                        }));
                    }
                    return;
                }
                if (txFound && bestChainChanged) {
                    if (txFound.blockHash === inBlock.blockHash)
                        return;
                }
                txFound = inBlock;
                const { index: txIndex, events, blockHash, blockNumber } = inBlock;
                callback(new SubmittableResult_js_1.SubmittableResult({
                    status: { type: 'BestChainBlockIncluded', value: { blockHash, blockNumber, txIndex } },
                    txHash,
                    events,
                    txIndex,
                }));
            }
            catch {
                // ignore this!
            }
            finally {
                if (searchQueue.size === 0 && !searchQueue.isWorking) {
                    isSearching = false;
                }
            }
        };
        let txUnsub;
        // This whole thing is just to make sure
        // that we're not calling stopBroadcastFn twice
        let stopBroadcastFn;
        let stopped = false;
        const stopBroadcast = () => {
            if (stopped)
                return;
            if (stopBroadcastFn) {
                stopped = true;
                stopBroadcastFn().catch(utils_1.noop);
            }
        };
        const checkFinalizedBlockIncluded = async (block) => {
            const inBlock = await checkTxIsOnChain(block.hash);
            if (inBlock) {
                const { index: txIndex, events, blockHash, blockNumber } = inBlock;
                callback(new SubmittableResult_js_1.SubmittableResult({
                    status: { type: 'Finalized', value: { blockHash, blockNumber, txIndex } },
                    txHash,
                    events,
                    txIndex,
                }));
            }
            else {
                // Revalidate the tx, just in-case it becomes invalid along the way
                // Context: https://github.com/paritytech/json-rpc-interface-spec/pull/107#issuecomment-1906008814
                const validation = await validateTx(block.hash);
                if (validation.isOk)
                    return;
                callback(new SubmittableResult_js_1.SubmittableResult({
                    status: {
                        type: 'Invalid',
                        value: { error: `Invalid Tx: ${validation.err.type} - ${validation.err.value.type}` },
                    },
                    txHash,
                }));
            }
            txUnsub().catch(utils_1.noop);
        };
        stopBroadcastFn = await api.txBroadcaster.broadcastTx(txHex);
        callback(new SubmittableResult_js_1.SubmittableResult({
            status: { type: 'Broadcasting' },
            txHash,
        }));
        const stopBestBlockTrackingFn = api.chainHead.on('bestBlock', checkBestBlockIncluded);
        const stopFinalizedBlockTrackingFn = api.chainHead.on('finalizedBlock', checkFinalizedBlockIncluded);
        const stopTracking = () => {
            stopBestBlockTrackingFn();
            stopFinalizedBlockTrackingFn();
            cancelBodySearch();
        };
        txUnsub = async () => {
            stopTracking();
            stopBroadcast();
        };
        return txUnsub;
    }
    async send(callback) {
        const isSubscription = !!callback;
        if (isSubscription) {
            return this.#send(callback);
        }
        else {
            const defer = (0, utils_1.deferred)();
            try {
                // TODO handle timeout for this with the Drop status, just in-case we somehow can't find the tx in any block
                const unsub = await this.#send(({ status, txHash }) => {
                    if (status.type === 'BestChainBlockIncluded' || status.type === 'Finalized') {
                        defer.resolve(txHash);
                        unsub().catch(utils_1.noop);
                    }
                    else if (status.type === 'Invalid' || status.type === 'Drop') {
                        defer.reject(new Error(status.value.error));
                        unsub().catch(utils_1.noop);
                    }
                });
            }
            catch (e) {
                defer.reject(e);
            }
            return defer.promise;
        }
    }
}
exports.SubmittableExtrinsicV2 = SubmittableExtrinsicV2;
