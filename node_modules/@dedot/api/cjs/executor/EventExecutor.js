"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventExecutor = void 0;
const utils_1 = require("@dedot/utils");
const Executor_js_1 = require("./Executor.js");
const utils_js_1 = require("./utils.js");
/**
 * @name EventExecutor
 * @description Find pallet event information from metadata
 */
class EventExecutor extends Executor_js_1.Executor {
    doExecute(pallet, eventName) {
        const targetPallet = this.getPallet(pallet);
        const eventTypeId = targetPallet.event;
        (0, utils_1.assert)(eventTypeId, new utils_1.UnknownApiError(`Not found event with id ${eventTypeId} in pallet ${pallet}`));
        const eventDef = this.#getEventDef(eventTypeId, eventName);
        const is = (event) => {
            if ((0, utils_js_1.isEventRecord)(event)) {
                event = event.event;
            }
            const palletCheck = (0, utils_1.stringCamelCase)(event.pallet) === pallet;
            if (typeof event.palletEvent === 'string') {
                return palletCheck && (0, utils_1.stringPascalCase)(event.palletEvent) === eventName;
            }
            else if (typeof event.palletEvent === 'object') {
                return palletCheck && (0, utils_1.stringPascalCase)(event.palletEvent.name) === eventName;
            }
            return false;
        };
        const find = (events) => {
            if (!events || events.length === 0)
                return undefined;
            if ((0, utils_js_1.isEventRecord)(events[0])) {
                return events.map(({ event }) => event).find(is);
            }
            else {
                return events.find(is);
            }
        };
        const filter = (events) => {
            if ((0, utils_js_1.isEventRecord)(events[0])) {
                return events.map(({ event }) => event).filter(is);
            }
            else {
                return events.filter(is);
            }
        };
        const watch = (callback) => {
            return this.client.query.system.events((records) => {
                const events = filter(records);
                if (events.length === 0)
                    return;
                callback(filter(records));
            });
        };
        const meta = {
            ...eventDef,
            pallet: targetPallet.name,
            palletIndex: targetPallet.index,
        };
        return {
            is,
            find,
            filter,
            meta,
            watch,
        };
    }
    #getEventDef(eventTypeId, errorName) {
        const def = this.metadata.types[eventTypeId];
        (0, utils_1.assert)(def, new utils_1.UnknownApiError(`Event def not found for id ${eventTypeId}`));
        const { type, value } = def.typeDef;
        (0, utils_1.assert)(type === 'Enum', new utils_1.UnknownApiError(`Event type should be an enum, found: ${type}`));
        const eventDef = value.members.find(({ name }) => (0, utils_1.stringPascalCase)(name) === errorName);
        (0, utils_1.assert)(eventDef, new utils_1.UnknownApiError(`Event def not found for ${errorName}`));
        return {
            ...eventDef,
            fieldCodecs: eventDef.fields.map(({ typeId }) => this.registry.findCodec(typeId)),
        };
    }
}
exports.EventExecutor = EventExecutor;
