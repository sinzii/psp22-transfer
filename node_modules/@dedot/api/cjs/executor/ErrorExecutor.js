"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorExecutor = void 0;
const utils_1 = require("@dedot/utils");
const Executor_js_1 = require("./Executor.js");
/**
 * @name ErrorExecutor
 * @description Find pallet error information from metadata
 */
class ErrorExecutor extends Executor_js_1.Executor {
    doExecute(pallet, errorName) {
        const targetPallet = this.getPallet(pallet);
        const errorTypeId = targetPallet.error;
        (0, utils_1.assert)(errorTypeId, new utils_1.UnknownApiError(`Not found error with id ${errorTypeId} in pallet ${pallet}`));
        const errorDef = this.#getErrorDef(errorTypeId, errorName);
        return {
            meta: {
                ...errorDef,
                pallet: targetPallet.name,
                palletIndex: targetPallet.index,
            },
            is: (errorInfo) => {
                if ((0, utils_1.isObject)(errorInfo) && errorInfo.type === 'Module') {
                    errorInfo = errorInfo.value;
                }
                if ((0, utils_1.isObject)(errorInfo) && (0, utils_1.isNumber)(errorInfo.index) && (0, utils_1.isHex)(errorInfo.error)) {
                    return errorInfo.index === targetPallet.index && (0, utils_1.hexToU8a)(errorInfo.error)[0] === errorDef.index;
                }
                return false;
            },
        };
    }
    #getErrorDef(errorTypeId, errorName) {
        const def = this.metadata.types[errorTypeId];
        (0, utils_1.assert)(def, new utils_1.UnknownApiError(`Error def not found for id ${errorTypeId}`));
        const { type, value } = def.typeDef;
        (0, utils_1.assert)(type === 'Enum', new utils_1.UnknownApiError(`Error type should be an enum, found: ${type}`));
        const errorDef = value.members.find(({ name }) => (0, utils_1.stringPascalCase)(name) === errorName);
        (0, utils_1.assert)(errorDef, new utils_1.UnknownApiError(`Error def not found for ${errorName}`));
        return {
            ...errorDef,
            fieldCodecs: errorDef.fields.map(({ typeId }) => this.registry.findCodec(typeId)),
        };
    }
}
exports.ErrorExecutor = ErrorExecutor;
