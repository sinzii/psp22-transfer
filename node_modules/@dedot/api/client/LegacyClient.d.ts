import { BlockHash } from '@dedot/codecs';
import type { JsonRpcProvider } from '@dedot/providers';
import { GenericSubstrateApi, RpcLegacy, VersionedGenericSubstrateApi } from '@dedot/types';
import type { SubstrateApi } from '../chaintypes/index.js';
import type { ApiOptions, ISubstrateClientAt } from '../types.js';
import { BaseSubstrateClient } from './BaseSubstrateClient.js';
/**
 * @name LegacyClient
 * @description Promised-based API Client for Polkadot & Substrate
 *
 * Initialize API instance and interact with substrate-based network
 * ```typescript
 * import { Dedot } from 'dedot';
 * import type { PolkadotApi } from '@dedot/chaintypes/polkadot';
 *
 * const run = async () => {
 *   const api = await LegacyClient.new<PolkadotApi>('wss://rpc.polkadot.io');
 *
 *   // Call rpc `state_getMetadata` to fetch raw scale-encoded metadata and decode it.
 *   const metadata = await api.rpc.state.getMetadata();
 *   console.log('Metadata:', metadata);
 *
 *   // Query on-chain storage
 *   const address = '14...';
 *   const balance = await api.query.system.account(address);
 *   console.log('Balance:', balance);
 *
 *
 *   // Subscribe to on-chain storage changes
 *   const unsub = await api.query.system.number((blockNumber) => {
 *     console.log(`Current block number: ${blockNumber}`);
 *   });
 *
 *   // Get pallet constants
 *   const ss58Prefix = api.consts.system.ss58Prefix;
 *   console.log('Polkadot ss58Prefix:', ss58Prefix)
 *
 *   // await unsub();
 *   // await api.disconnect();
 * }
 *
 * run().catch(console.error);
 * ```
 */
export declare class LegacyClient<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>// prettier-end-here
 extends BaseSubstrateClient<RpcLegacy, ChainApi> {
    #private;
    /**
     * Use factory methods (`create`, `new`) to create `Dedot` instances.
     *
     * @param options
     */
    constructor(options: ApiOptions | JsonRpcProvider);
    /**
     * Factory method to create a new Dedot instance
     *
     * @param options
     */
    static create<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>(options: ApiOptions | JsonRpcProvider): Promise<LegacyClient<ChainApi>>;
    /**
     * Alias for __LegacyClient.create__
     *
     * @param options
     */
    static new<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>(options: ApiOptions | JsonRpcProvider): Promise<LegacyClient<ChainApi>>;
    protected onDisconnected: () => Promise<void>;
    protected beforeDisconnect(): Promise<void>;
    /**
     * Initialize APIs before usage
     */
    protected doInitialize(): Promise<void>;
    protected cleanUp(): void;
    /**
     * @description Entry-point for inspecting constants (parameter types) for all pallets (modules).
     *
     * ```typescript
     * const ss58Prefix = api.consts.system.ss58Prefix;
     * console.log('ss58Prefix:', ss58Prefix)
     * ```
     */
    get consts(): ChainApi[RpcLegacy]['consts'];
    /**
     * @description Entry-point for executing query to on-chain storage.
     *
     * ```typescript
     * const balance = await api.query.system.account(<address>);
     * console.log('Balance:', balance);
     * ```
     */
    get query(): ChainApi[RpcLegacy]['query'];
    /**
     * @description Entry-point for inspecting errors from metadata
     */
    get errors(): ChainApi[RpcLegacy]['errors'];
    /**
     * @description Entry-point for inspecting events from metadata
     */
    get events(): ChainApi[RpcLegacy]['events'];
    /**
     * @description Entry-point for executing runtime api
     *
     * ```typescript
     * // Get account nonce
     * const nonce = await api.call.accountNonceApi.accountNonce(<address>);
     *
     * // Query transaction payment info
     * const tx = api.tx.balances.transferKeepAlive(<address>, 2_000_000_000_000n);
     * const queryInfo = await api.call.transactionPaymentApi.queryInfo(tx.toU8a(), tx.length);
     * ```
     */
    get call(): ChainApi[RpcLegacy]['call'];
    protected callAt(hash?: BlockHash): ChainApi[RpcLegacy]['call'];
    /**
     * @description Entry-point for executing on-chain transactions
     *
     * ```typescript
     * // Make a transfer balance transaction
     * api.tx.balances.transferKeepAlive(<address>, <amount>)
     *    .signAndSend(<keyPair|address>, { signer }, ({ status }) => {
     *      console.log('Transaction status', status.type);
     *    });
     * ```
     */
    get tx(): ChainApi[RpcLegacy]['tx'];
    /**
     * Create a new API instance at a specific block hash
     * This is useful when we want to inspect the state of the chain at a specific block hash
     *
     * @param hash
     */
    at<ChainApiAt extends GenericSubstrateApi = ChainApi[RpcLegacy]>(hash: BlockHash): Promise<ISubstrateClientAt<ChainApiAt>>;
}
