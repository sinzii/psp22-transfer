import { BlockHash } from '@dedot/codecs';
import type { JsonRpcProvider } from '@dedot/providers';
import { GenericSubstrateApi, RpcV2, VersionedGenericSubstrateApi } from '@dedot/types';
import type { SubstrateApi } from '../chaintypes/index.js';
import { ChainHead, ChainSpec, PinnedBlock } from '../json-rpc/index.js';
import type { ApiOptions, ISubstrateClientAt, TxBroadcaster } from '../types.js';
import { BaseSubstrateClient } from './BaseSubstrateClient.js';
/**
 * @name DedotClient
 * @description New promised-based API Client for Polkadot & Substrate based on JSON-RPC V2
 *
 * __Unstable, use with caution.__
 */
export declare class DedotClient<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>// prettier-end-here
 extends BaseSubstrateClient<RpcV2, ChainApi> {
    #private;
    protected _chainHead?: ChainHead;
    protected _chainSpec?: ChainSpec;
    protected _txBroadcaster?: TxBroadcaster;
    /**
     * Use factory methods (`create`, `new`) to create `DedotClient` instances.
     *
     * @param options
     */
    constructor(options: ApiOptions | JsonRpcProvider);
    /**
     * Factory method to create a new DedotClient instance
     *
     * @param options
     */
    static create<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>(options: ApiOptions | JsonRpcProvider): Promise<DedotClient<ChainApi>>;
    /**
     * Alias for __DedotClient.create__
     *
     * @param options
     */
    static new<ChainApi extends VersionedGenericSubstrateApi = SubstrateApi>(options: ApiOptions | JsonRpcProvider): Promise<DedotClient<ChainApi>>;
    get chainSpec(): ChainSpec;
    get chainHead(): ChainHead;
    get txBroadcaster(): TxBroadcaster;
    /**
     * Initialize APIs before usage
     */
    protected doInitialize(): Promise<void>;
    protected subscribeRuntimeUpgrades(): void;
    protected onRuntimeUpgrade: (block: PinnedBlock) => Promise<void>;
    protected beforeDisconnect(): Promise<void>;
    protected onDisconnected: () => Promise<void>;
    protected cleanUp(): void;
    get query(): ChainApi[RpcV2]['query'];
    get call(): ChainApi[RpcV2]['call'];
    protected callAt(blockHash?: BlockHash): ChainApi[RpcV2]['call'];
    get tx(): ChainApi[RpcV2]['tx'];
    /**
     * Get a new API instance at a specific block hash
     * For now, this only supports pinned block hashes from the chain head
     *
     * @param hash
     */
    at<ChainApiAt extends GenericSubstrateApi = ChainApi[RpcV2]>(hash: BlockHash): Promise<ISubstrateClientAt<ChainApiAt>>;
}
