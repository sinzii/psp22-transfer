import { SubscriptionProvider } from '../base/index.js';
import { JsonRpcRequest } from '../types.js';
export interface WsProviderOptions {
    /**
     * The websocket endpoint to connect to
     * A valid endpoint should start with `wss://`, `ws://`
     *
     * @required
     */
    endpoint: string;
    /**
     * Delay in milliseconds before retrying to connect
     * If the value is <= 0, retry will be disabled
     *
     * @default 2500
     */
    retryDelayMs?: number;
    /**
     * Timeout in milliseconds for the request,
     * an error will be thrown if the request takes longer than this value
     *
     * @default 30000
     */
    timeout?: number;
}
/**
 * @name WsProvider
 * @description A JSON-RPC provider that connects to a WebSocket endpoint
 * @example
 * ```ts
 * const provider = new WsProvider('wss://rpc.polkadot.io');
 *
 * await provider.connect();
 *
 * // Fetch the genesis hash
 * const genesisHash = await provider.send('chain_getBlockHash', [0]);
 * console.log(genesisHash);
 *
 * // Subscribe to runtimeVersion changes
 * await provider.subscribe(
 *   {
 *     subname: 'chain_newHead',
 *     subscribe: 'chain_subscribeNewHeads',
 *     params: [],
 *     unsubscribe: 'chain_unsubscribeNewHeads',
 *   },
 *   (error, newHead, subscription) => {
 *     console.log('newHead', newHead);
 *   },
 * );
 *
 * await provider.disconnect();
 * ```
 */
export declare class WsProvider extends SubscriptionProvider {
    #private;
    constructor(options: WsProviderOptions | string);
    connect(): Promise<this>;
    protected _cleanUp(): void;
    disconnect(): Promise<void>;
    protected doSend(request: JsonRpcRequest): Promise<void>;
}
