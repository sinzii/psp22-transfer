import { Deferred, EventEmitter } from '@dedot/utils';
import { ConnectionStatus, JsonRpcProvider, JsonRpcRequest, JsonRpcRequestId, JsonRpcResponse, JsonRpcResponseNotification, ProviderEvent, JsonRpcSubscription, JsonRpcSubscriptionCallback, JsonRpcSubscriptionInput } from '../types.js';
interface RequestState<T = any> {
    defer: Deferred<T>;
    request: JsonRpcRequest;
    from: number;
}
interface SubscriptionState {
    input: JsonRpcSubscriptionInput;
    callback: JsonRpcSubscriptionCallback;
    subscription: JsonRpcSubscription;
}
/**
 * @name SubscriptionProvider
 * @description
 * A base class for providers that support subscriptions (e.g: Websocket, Smoldot)
 */
export declare abstract class SubscriptionProvider extends EventEmitter<ProviderEvent> implements JsonRpcProvider {
    #private;
    protected _status: ConnectionStatus;
    protected _handlers: Record<JsonRpcRequestId, RequestState>;
    protected _subscriptions: Record<string, SubscriptionState>;
    protected _pendingNotifications: Record<string, JsonRpcResponseNotification[]>;
    protected constructor();
    connect(): Promise<this>;
    disconnect(): Promise<void>;
    protected doSend(request: JsonRpcRequest): Promise<void>;
    protected _setStatus(status: ConnectionStatus): void;
    protected _cleanUp(): void;
    get status(): ConnectionStatus;
    protected _onReceiveResponse: (response: string) => void;
    protected _handleResponse(response: JsonRpcResponse): void;
    _handleNotification(response: JsonRpcResponseNotification): void;
    send<T = any>(method: string, params: any[]): Promise<T>;
    subscribe<T = any>(input: JsonRpcSubscriptionInput, callback: JsonRpcSubscriptionCallback<T>): Promise<JsonRpcSubscription>;
}
export {};
