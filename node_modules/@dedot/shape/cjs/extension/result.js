"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
const deshape_js_1 = require("../deshape.js");
function Result($ok, $err) {
    return (0, deshape_js_1.createShape)({
        metadata: (0, deshape_js_1.metadata)('$.Result', Result, $ok, $err),
        staticSize: 1 + Math.max($ok.staticSize, $err.staticSize),
        subEncode(buffer, value) {
            if (value.isOk !== undefined) {
                buffer.array[buffer.index++] = value.isOk ? 0 : 1;
            }
            else if (value.isErr !== undefined) {
                buffer.array[buffer.index++] = value.isErr ? 1 : 0;
            }
            else {
                throw new deshape_js_1.ShapeEncodeError(this, buffer, 'Invalid result discriminant');
            }
            if (value.isOk || !value.isErr) {
                $ok.subEncode(buffer, value.value);
            }
            else {
                $err.subEncode(buffer, value.err);
            }
        },
        subDecode(buffer) {
            switch (buffer.array[buffer.index++]) {
                case 0: {
                    return {
                        isOk: true,
                        isErr: false,
                        value: $ok.subDecode(buffer),
                    };
                }
                case 1: {
                    return {
                        isOk: false,
                        isErr: true,
                        err: $err.subDecode(buffer),
                    };
                }
                default: {
                    throw new deshape_js_1.ShapeDecodeError(this, buffer, 'Result discriminant neither 0 nor 1');
                }
            }
        },
        subAssert(assert) {
            const value = assert.value;
            if (value.isOk === true) {
                $ok.subAssert(value.value);
            }
            else if (value.isErr === true) {
                $err.subAssert(value.err);
            }
        },
    });
}
exports.Result = Result;
