"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@dedot/utils");
const vitest_1 = require("vitest");
const $ = __importStar(require("../../index.js"));
(0, vitest_1.describe)('Result', () => {
    let $x;
    (0, vitest_1.beforeEach)(() => {
        $x = $.Result($.u8, $.bool);
    });
    (0, vitest_1.it)('should encode ok', () => {
        (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isOk: true, value: 42 }))).toEqual('0x002a');
    });
    (0, vitest_1.it)('should decode ok', () => {
        (0, vitest_1.expect)($x.tryDecode('0x002a')).toEqual({ isOk: true, isErr: false, value: 42 });
    });
    (0, vitest_1.it)('should encode err', () => {
        (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isErr: true, err: false }))).toEqual('0x0100');
    });
    (0, vitest_1.it)('should decode err', () => {
        (0, vitest_1.expect)($x.tryDecode('0x0100')).toEqual({ isOk: false, isErr: true, err: false });
    });
    (0, vitest_1.describe)('nested result', () => {
        let $x;
        (0, vitest_1.beforeEach)(() => {
            $x = $.Result($.Result($.u8, $.bool), $.Struct({ index: $.u32 }));
        });
        (0, vitest_1.it)('should encode ok / ok', () => {
            (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isOk: true, value: { isOk: true, value: 42 } }))).toEqual('0x00002a');
            (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isOk: true, value: { isErr: false, value: 42 } }))).toEqual('0x00002a');
        });
        (0, vitest_1.it)('should decode ok / ok', () => {
            (0, vitest_1.expect)($x.tryDecode('0x00002a')).toEqual({
                isOk: true,
                isErr: false,
                value: { isOk: true, isErr: false, value: 42 },
            });
        });
        (0, vitest_1.it)('should encode ok / err', () => {
            (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isOk: true, value: { isErr: true, err: false } }))).toEqual('0x000100');
            (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isOk: true, value: { isOk: false, err: false } }))).toEqual('0x000100');
        });
        (0, vitest_1.it)('should decode ok / err', () => {
            (0, vitest_1.expect)($x.tryDecode('0x000100')).toEqual({
                isOk: true,
                isErr: false,
                value: { isOk: false, isErr: true, err: false },
            });
        });
        (0, vitest_1.it)('should encode err', () => {
            (0, vitest_1.expect)((0, utils_1.u8aToHex)($x.encode({ isErr: true, err: { index: 42 } }))).toEqual('0x012a000000');
        });
        (0, vitest_1.it)('should decode err', () => {
            (0, vitest_1.expect)($x.tryDecode('0x012a000000')).toEqual({
                isOk: false,
                isErr: true,
                err: { index: 42 },
            });
        });
    });
});
