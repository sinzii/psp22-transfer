"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@dedot/utils");
const deshape_1 = require("deshape");
deshape_1.Shape.prototype.tryDecode = function (input) {
    if (this.decoders && this.decoders.length > 0) {
        for (const one of this.decoders.reverse()) {
            const [predicate, decoder] = one;
            if (predicate(input)) {
                return decoder.call(this, this, input);
            }
        }
    }
    if ((0, utils_1.isHex)(input)) {
        input = (0, utils_1.hexToU8a)(input);
    }
    return this.decode(input);
};
deshape_1.Shape.prototype.registerDecoder = function (predicate, decoder) {
    this.decoders = this.decoders || [];
    this.decoders.push([predicate, decoder]);
};
deshape_1.Shape.prototype.tryEncode = function (input) {
    if (this.encoders && this.encoders.length > 0) {
        for (const one of this.encoders.reverse()) {
            const [predicate, encoder] = one;
            if (predicate(input)) {
                return encoder.call(this, this, input);
            }
        }
    }
    return this.encode(input);
};
deshape_1.Shape.prototype.registerEncoder = function (predicate, encoder) {
    this.encoders = this.encoders || [];
    this.encoders.push([predicate, encoder]);
};
deshape_1.ShapeMap.prototype.toJSON = function () {
    return Object.fromEntries(this);
};
deshape_1.ShapeSet.prototype.toJSON = function () {
    return Array.from(this);
};
// Register decoder from plain values, TODO support more!
const identity = (_, input) => input;
deshape_1.bool.registerDecoder(utils_1.isBoolean, identity);
deshape_1.i128.registerDecoder(utils_1.isNumber, identity);
deshape_1.i16.registerDecoder(utils_1.isNumber, identity);
deshape_1.i256.registerDecoder(utils_1.isNumber, identity);
deshape_1.i32.registerDecoder(utils_1.isNumber, identity);
deshape_1.i64.registerDecoder(utils_1.isNumber, identity);
deshape_1.i8.registerDecoder(utils_1.isNumber, identity);
deshape_1.u128.registerDecoder(utils_1.isNumber, identity);
deshape_1.u16.registerDecoder(utils_1.isNumber, identity);
deshape_1.u256.registerDecoder(utils_1.isNumber, identity);
deshape_1.u32.registerDecoder(utils_1.isNumber, identity);
deshape_1.u64.registerDecoder(utils_1.isNumber, identity);
deshape_1.u8.registerDecoder(utils_1.isNumber, identity);
deshape_1.str.registerDecoder((input) => (0, utils_1.isString)(input) && !(0, utils_1.isHex)(input), identity);
// Register native types for primitive codecs.
deshape_1.bool.nativeType = 'boolean';
deshape_1.i256.nativeType = 'bigint';
deshape_1.i128.nativeType = 'bigint';
deshape_1.i64.nativeType = 'bigint';
deshape_1.i32.nativeType = 'number';
deshape_1.i16.nativeType = 'number';
deshape_1.i8.nativeType = 'number';
deshape_1.u256.nativeType = 'bigint';
deshape_1.u128.nativeType = 'bigint';
deshape_1.u64.nativeType = 'bigint';
deshape_1.u32.nativeType = 'number';
deshape_1.u16.nativeType = 'number';
deshape_1.u8.nativeType = 'number';
deshape_1.str.nativeType = 'string';
__exportStar(require("deshape"), exports);
