import { AnyShape, Expand, Input, Output, Shape } from '../deshape.js';
export type IndexedEnumMember<V extends AnyShape> = {
    value?: V | null;
    index: number;
};
export type EnumMembers<V extends AnyShape> = {
    [prop: string]: V | null | IndexedEnumMember<V>;
};
export type InputEnumShape<V extends AnyShape, A extends EnumMembers<V>> = Expand<{
    [K in keyof A]: A[K] extends AnyShape ? {
        type: K;
        value: Input<A[K]>;
    } : A[K] extends IndexedEnumMember<V> ? A[K]['value'] extends AnyShape ? {
        type: K;
        value: Input<A[K]['value']>;
    } : {
        type: K;
    } : {
        type: K;
    };
}[keyof A]>;
export type OutputEnumShape<V extends AnyShape, A extends EnumMembers<V>> = Expand<{
    [K in keyof A]: A[K] extends AnyShape ? {
        type: K;
        value: Output<A[K]>;
    } : A[K] extends IndexedEnumMember<V> ? A[K]['value'] extends AnyShape ? {
        type: K;
        value: Output<A[K]['value']>;
    } : {
        type: K;
    } : {
        type: K;
    };
}[keyof A]>;
export interface EnumOptions {
    tagKey?: string;
    valueKey?: string;
}
export declare const Enum: <T extends AnyShape, A extends EnumMembers<T>>(members: A, options?: EnumOptions) => Shape<InputEnumShape<T, A>, OutputEnumShape<T, A>>;
