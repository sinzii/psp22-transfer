import { hexToU8a, u8aToHex } from '@dedot/utils';
import { metadata, sizedUint8Array, hex } from '../deshape.js';
import { compactU32 } from './compact.js';
import { createShape } from './createShape.js';
const HEX_PREFIX = '0x';
export function FixedHex(lengthInBytes) {
    const shaped = hex(sizedUint8Array(lengthInBytes));
    const originalSubDecode = shaped.subDecode.bind(shaped);
    shaped.subDecode = function (buffer) {
        const decoded = originalSubDecode(buffer);
        return decoded.startsWith(HEX_PREFIX) ? decoded : `${HEX_PREFIX}${decoded}`;
    };
    return shaped;
}
export const PrefixedHex = createShape({
    metadata: metadata('$.PrefixedHex'),
    staticSize: compactU32.staticSize,
    subEncode(buffer, value) {
        const u8a = hexToU8a(value);
        compactU32.subEncode(buffer, u8a.length);
        buffer.insertArray(u8a);
    },
    subDecode(buffer) {
        const length = compactU32.subDecode(buffer);
        const value = buffer.array.subarray(buffer.index, buffer.index + length);
        buffer.index += length;
        return u8aToHex(value);
    },
});
