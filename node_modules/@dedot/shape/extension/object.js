import { isHex, isObject, isString, isU8a } from '@dedot/utils';
import { object as originalObject, optionalField, } from '../deshape.js';
function shouldDecodeObject(input) {
    if (isHex(input) || isU8a(input) || isString(input) || !isObject(input)) {
        return false;
    }
    return true;
}
function decodeObject($shape, input) {
    const { args } = $shape.metadata[0];
    return args
        .map((one) => one.metadata[0])
        .reduce((o, { factory, args: [name, field] }) => {
        const fieldInput = input[name];
        const isOptional = factory === optionalField;
        if (isOptional && (fieldInput === null || fieldInput === undefined)) {
            o[name] = undefined;
        }
        else {
            o[name] = field.tryDecode(fieldInput);
        }
        return o;
    }, {});
}
export function object(...members) {
    const shaped = originalObject(...members);
    shaped.registerDecoder(shouldDecodeObject, decodeObject);
    return shaped;
}
