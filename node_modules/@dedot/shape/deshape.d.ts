import { AnyShape } from 'deshape';
declare module 'deshape' {
    interface Decoder<T extends AnyShape = Shape<any>, I = any, O = any> {
        (shape: T, input: I): O;
    }
    interface Encoder<T extends AnyShape = Shape<any>, I = any> {
        (shape: T, input: I): Uint8Array;
    }
    interface Predicate<I = any> {
        (input: I): boolean;
    }
    interface Shape<in I, out O = I> {
        encoders: [Predicate, Encoder][];
        decoders: [Predicate, Decoder][];
        registerEncoder: (predicate: Predicate, encoder: Encoder) => void;
        registerDecoder: (predicate: Predicate, decoder: Decoder) => void;
        tryEncode: (input: any) => Uint8Array;
        tryDecode: (input: any) => O;
        nativeType?: string;
    }
    interface ShapeMap<K, V> {
        toJSON(): Record<string, any>;
    }
    interface ShapeSet<T> {
        toJSON(): Record<string, any>;
    }
}
export * from 'deshape';
