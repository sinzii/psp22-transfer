import { u8aToHex } from '@dedot/utils';
export class ExtrinsicV4 {
    registry;
    #version;
    #call;
    #signature;
    constructor(registry, call, signature) {
        this.registry = registry;
        this.#version = 4;
        this.#call = call;
        this.#signature = signature;
    }
    get signed() {
        return !!this.#signature;
    }
    get version() {
        return this.#version;
    }
    get signature() {
        return this.#signature;
    }
    get call() {
        return this.#call;
    }
    get callU8a() {
        const { callTypeId } = this.registry.metadata.extrinsic;
        const $RuntimeCall = this.registry.findCodec(callTypeId);
        return $RuntimeCall.tryEncode(this.call);
    }
    get callHex() {
        return u8aToHex(this.callU8a);
    }
    get callLength() {
        return this.callU8a.length;
    }
    attachSignature(signature) {
        this.#signature = signature;
    }
    get $Codec() {
        return this.registry.$Extrinsic;
    }
    toU8a() {
        return this.$Codec.tryEncode(this);
    }
    toHex() {
        return u8aToHex(this.toU8a());
    }
    get length() {
        return this.toU8a().length;
    }
    get hash() {
        return this.registry.hashAsHex(this.toU8a());
    }
}
