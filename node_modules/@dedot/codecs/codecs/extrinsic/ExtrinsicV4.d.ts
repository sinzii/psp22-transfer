import { HexString } from '@dedot/utils';
import { PortableRegistry } from '../../registry/index.js';
import { Hash } from '../generic/index.js';
export interface ExtrinsicSignatureV4<Address = any, Signature = any, Extra = any> {
    address: Address;
    signature: Signature;
    extra: Extra;
}
export declare class ExtrinsicV4<Address = any, Call = any, Signature = any, Extra = any> {
    #private;
    registry: PortableRegistry;
    constructor(registry: PortableRegistry, call: Call, signature?: ExtrinsicSignatureV4<Address, Signature, Extra>);
    get signed(): boolean;
    get version(): number;
    get signature(): ExtrinsicSignatureV4<Address, Signature, Extra> | undefined;
    get call(): Call;
    get callU8a(): Uint8Array;
    get callHex(): HexString;
    get callLength(): number;
    attachSignature(signature: ExtrinsicSignatureV4<Address, Signature, Extra>): void;
    get $Codec(): import("deshape").Shape<import("./Extrinsic.js").Extrinsic<any, any, any, any>, import("./Extrinsic.js").Extrinsic<any, any, any, any>>;
    toU8a(): Uint8Array;
    toHex(): HexString;
    get length(): number;
    get hash(): Hash;
}
