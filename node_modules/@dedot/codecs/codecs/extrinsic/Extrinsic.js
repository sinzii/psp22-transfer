import * as $ from '@dedot/shape';
import { assert } from '@dedot/utils';
import { ExtrinsicV4 } from './ExtrinsicV4.js';
import { $ExtrinsicVersion } from './ExtrinsicVersion.js';
// TODO extrinsic versioning
export class Extrinsic extends ExtrinsicV4 {
}
export const $Extrinsic = (registry) => {
    assert(registry, 'PortableRegistry is required to compose $Extrinsic codec');
    const { callTypeId, addressTypeId, signatureTypeId, extraTypeId } = registry.metadata.extrinsic;
    const $Address = registry.findCodec(addressTypeId);
    const $Signature = registry.findCodec(signatureTypeId);
    const $Extra = registry.findCodec(extraTypeId);
    const $RuntimeCall = registry.findCodec(callTypeId);
    const $ExtrinsicSignature = $.Struct({
        address: $Address,
        signature: $Signature,
        extra: $Extra,
    });
    const staticSize = $ExtrinsicVersion.staticSize + $ExtrinsicSignature.staticSize + $RuntimeCall.staticSize;
    const $BaseEx = $.createShape({
        metadata: [],
        staticSize,
        subDecode(buffer) {
            const { signed } = $ExtrinsicVersion.subDecode(buffer);
            const signature = signed ? $ExtrinsicSignature.subDecode(buffer) : undefined;
            const call = $RuntimeCall.subDecode(buffer);
            return new Extrinsic(registry, call, signature);
        },
        subEncode(buffer, extrinsic) {
            const { version, signed, signature, call } = extrinsic;
            $ExtrinsicVersion.subEncode(buffer, { version, signed });
            if (signed) {
                assert(signature, 'Signature is required!');
                $ExtrinsicSignature.subEncode(buffer, signature);
            }
            $RuntimeCall.subEncode(buffer, call);
        },
    });
    return $.withMetadata($.metadata('$Extrinsic'), $.lenPrefixed($BaseEx));
};
