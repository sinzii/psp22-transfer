import * as $ from '@dedot/shape';
/**
 * An identifier for an inherent.
 */
export declare const $InherentIdentifier: $.Shape<`0x${string}`, `0x${string}`>;
export declare const $InherentData: $.Shape<{
    data: ReadonlyMap<`0x${string}`, `0x${string}`>;
}, {
    data: $.ShapeMap<`0x${string}`, `0x${string}`>;
}>;
export type InherentData = $.Input<typeof $InherentData>;
/**
 *
 * The result of checking inherents.
 *
 * It either returns okay for all checks, stores all occurred errors or just one fatal error.
 *
 * When a fatal error occurs, all other errors are removed and the implementation needs to
 * abort checking inherents.
 */
export declare const $CheckInherentsResult: $.Shape<{
    okay: boolean;
    fatalError: boolean;
    errors: {
        data: ReadonlyMap<`0x${string}`, `0x${string}`>;
    };
}, {
    okay: boolean;
    fatalError: boolean;
    errors: {
        data: $.ShapeMap<`0x${string}`, `0x${string}`>;
    };
}>;
export type CheckInherentsResult = $.Input<typeof $CheckInherentsResult>;
