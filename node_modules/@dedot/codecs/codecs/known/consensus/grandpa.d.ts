import * as $ from '@dedot/shape';
/**
 * The monotonic identifier of a GRANDPA set of authorities.
 */
export declare const $SetId: $.Shape<bigint, bigint>;
export type SetId = $.Input<typeof $SetId>;
/**
 * The weight of an authority.
 */
export declare const $AuthorityWeight: $.Shape<bigint, bigint>;
/**
 * A list of Grandpa authorities with associated weights.
 */
export declare const $AuthorityList: $.Shape<(readonly [import("../../generic/AccountId32.js").AccountId32Like, bigint])[], [import("../../generic/AccountId32.js").AccountId32, bigint][]>;
export type AuthorityList = $.Input<typeof $AuthorityList>;
/**
 * A prevote for a block and its ancestors.
 */
export declare const $Prevote: $.Shape<{
    targetHash: `0x${string}`;
    targetNumber: number;
}, {
    targetHash: `0x${string}`;
    targetNumber: number;
}>;
/**
 * A precommit for a block and its ancestors.
 */
export declare const $Precommit: $.Shape<{
    targetHash: `0x${string}`;
    targetNumber: number;
}, {
    targetHash: `0x${string}`;
    targetNumber: number;
}>;
/**
 * An equivocation (double-vote) in a given round.
 *
 * Ref: https://github.com/paritytech/finality-grandpa/blob/master/src/lib.rs#L210
 */
export declare const $GrandpaEquivocation: $.Shape<{
    roundNumber: bigint;
    identity: import("../../generic/AccountId32.js").AccountId32Like;
    first: readonly [{
        targetHash: `0x${string}`;
        targetNumber: number;
    }, `0x${string}`];
    second: readonly [{
        targetHash: `0x${string}`;
        targetNumber: number;
    }, `0x${string}`];
}, {
    roundNumber: bigint;
    identity: import("../../generic/AccountId32.js").AccountId32;
    first: [{
        targetHash: `0x${string}`;
        targetNumber: number;
    }, `0x${string}`];
    second: [{
        targetHash: `0x${string}`;
        targetNumber: number;
    }, `0x${string}`];
}>;
/**
 * Wrapper object for GRANDPA equivocation proofs, useful for unifying prevote
 * and precommit equivocations under a common type.
 */
export declare const $Equivocation: $.Shape<{
    type: "Prevote";
    value: {
        roundNumber: bigint;
        identity: import("../../generic/AccountId32.js").AccountId32Like;
        first: readonly [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
        second: readonly [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
    };
} | {
    type: "Precommit";
    value: {
        roundNumber: bigint;
        identity: import("../../generic/AccountId32.js").AccountId32Like;
        first: readonly [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
        second: readonly [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
    };
}, {
    type: "Prevote";
    value: {
        roundNumber: bigint;
        identity: import("../../generic/AccountId32.js").AccountId32;
        first: [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
        second: [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
    };
} | {
    type: "Precommit";
    value: {
        roundNumber: bigint;
        identity: import("../../generic/AccountId32.js").AccountId32;
        first: [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
        second: [{
            targetHash: `0x${string}`;
            targetNumber: number;
        }, `0x${string}`];
    };
}>;
/**
 * Proof of voter misbehavior on a given set id. Misbehavior/equivocation in
 * GRANDPA happens when a voter votes on the same round (either at prevote or
 * precommit stage) for different blocks. Proving is achieved by collecting the
 * signed messages of conflicting votes.
 */
export declare const $GrandpaEquivocationProof: $.Shape<{
    setId: bigint;
    equivocation: {
        type: "Prevote";
        value: {
            roundNumber: bigint;
            identity: import("../../generic/AccountId32.js").AccountId32Like;
            first: readonly [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
            second: readonly [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
        };
    } | {
        type: "Precommit";
        value: {
            roundNumber: bigint;
            identity: import("../../generic/AccountId32.js").AccountId32Like;
            first: readonly [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
            second: readonly [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
        };
    };
}, {
    setId: bigint;
    equivocation: {
        type: "Prevote";
        value: {
            roundNumber: bigint;
            identity: import("../../generic/AccountId32.js").AccountId32;
            first: [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
            second: [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
        };
    } | {
        type: "Precommit";
        value: {
            roundNumber: bigint;
            identity: import("../../generic/AccountId32.js").AccountId32;
            first: [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
            second: [{
                targetHash: `0x${string}`;
                targetNumber: number;
            }, `0x${string}`];
        };
    };
}>;
export type GrandpaEquivocationProof = $.Input<typeof $GrandpaEquivocationProof>;
