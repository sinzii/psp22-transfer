import * as $ from '@dedot/shape';
export declare const $BabeAuthorityWeight: $.Shape<bigint, bigint>;
export type BabeAuthorityWeight = $.Input<typeof $BabeAuthorityWeight>;
export declare const $Randomness: $.Shape<`0x${string}`, `0x${string}`>;
export type Randomness = $.Input<typeof $Randomness>;
export declare const $AllowedSlots: $.Shape<"PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots", "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots">;
export type AllowedSlots = $.Input<typeof $AllowedSlots>;
export declare const $BabeConfiguration: $.Shape<{
    slotDuration: bigint;
    epochLength: bigint;
    c: readonly [bigint, bigint];
    authorities: (readonly [import("../../generic/AccountId32.js").AccountId32Like, bigint])[];
    randomness: `0x${string}`;
    allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
}, {
    slotDuration: bigint;
    epochLength: bigint;
    c: [bigint, bigint];
    authorities: [import("../../generic/AccountId32.js").AccountId32, bigint][];
    randomness: `0x${string}`;
    allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
}>;
export type BabeConfiguration = $.Input<typeof $BabeConfiguration>;
export declare const $BabeConfigurationV1: $.Shape<{
    slotDuration: bigint;
    epochLength: bigint;
    c: readonly [bigint, bigint];
    authorities: (readonly [import("../../generic/AccountId32.js").AccountId32Like, bigint])[];
    randomness: `0x${string}`;
    secondarySlots: boolean;
}, {
    slotDuration: bigint;
    epochLength: bigint;
    c: [bigint, bigint];
    authorities: [import("../../generic/AccountId32.js").AccountId32, bigint][];
    randomness: `0x${string}`;
    secondarySlots: boolean;
}>;
export type BabeConfigurationV1 = $.Input<typeof $BabeConfigurationV1>;
export declare const $Slot: $.Shape<bigint, bigint>;
export type Slot = $.Input<typeof $Slot>;
export declare const $BabeEpochConfiguration: $.Shape<{
    c: readonly [bigint, bigint];
    allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
}, {
    c: [bigint, bigint];
    allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
}>;
export type BabeEpochConfiguration = $.Input<typeof $BabeEpochConfiguration>;
export declare const $BabeEpoch: $.Shape<{
    epochIndex: bigint;
    startSlot: bigint;
    duration: bigint;
    authorities: (readonly [import("../../generic/AccountId32.js").AccountId32Like, bigint])[];
    randomness: `0x${string}`;
    config: {
        c: readonly [bigint, bigint];
        allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
    };
}, {
    epochIndex: bigint;
    startSlot: bigint;
    duration: bigint;
    authorities: [import("../../generic/AccountId32.js").AccountId32, bigint][];
    randomness: `0x${string}`;
    config: {
        c: [bigint, bigint];
        allowedSlots: "PrimarySlots" | "PrimaryAndSecondaryPlainSlots" | "PrimaryAndSecondaryVRFSlots";
    };
}>;
export type BabeEpoch = $.Input<typeof $BabeEpoch>;
export declare const $BabeEquivocationProof: $.Shape<{
    offender: import("../../generic/AccountId32.js").AccountId32Like;
    slot: bigint;
    firstHeader: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "Seal";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
    secondHeader: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "Seal";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: readonly [import("../../generic/Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
}, {
    offender: import("../../generic/AccountId32.js").AccountId32;
    slot: bigint;
    firstHeader: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "Seal";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
    secondHeader: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "Seal";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: [import("../../generic/Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
}>;
export type BabeEquivocationProof = $.Input<typeof $BabeEquivocationProof>;
