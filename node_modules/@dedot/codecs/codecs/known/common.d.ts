import * as $ from '@dedot/shape';
import { HexString } from '@dedot/utils';
export declare const $Text: $.Shape<string, string>;
export type Text = string;
export declare const $StorageKey: $.Shape<`0x${string}`, `0x${string}`>;
export type StorageKeyLike = $.Input<typeof $StorageKey>;
export type StorageKey = $.Output<typeof $StorageKey>;
export declare const $PrefixedStorageKey: $.Shape<`0x${string}`, `0x${string}`>;
export type PrefixedStorageKeyLike = $.Input<typeof $PrefixedStorageKey>;
export type PrefixedStorageKey = $.Output<typeof $PrefixedStorageKey>;
export declare const $StorageData: $.Shape<`0x${string}`, `0x${string}`>;
export type StorageDataLike = $.Input<typeof $StorageData>;
export type StorageData = $.Output<typeof $StorageData>;
export type RawBytesLike = HexString | Uint8Array;
export type RawBytes = HexString;
export declare const $RawBytes: $.Shape<RawBytesLike, RawBytes>;
export type BytesLike = HexString | string | Uint8Array;
export type Bytes = HexString;
export declare const $Bytes: $.Shape<BytesLike, Bytes>;
export type FixedBytes<Bytes extends number> = HexString;
export type BitSequence = $.BitSequence;
export type FixedArray<T, N extends number> = N extends 0 ? never[] : {
    0: T;
    length: N;
} & ReadonlyArray<T>;
export type Option<T> = T | undefined;
export type Result<Ok, Err> = $.Result<Ok, Err>;
export type u8 = number;
export type u16 = number;
export type u32 = number;
export type u64 = bigint;
export type u128 = bigint;
export type u256 = bigint;
export type i8 = number;
export type i16 = number;
export type i32 = number;
export type i64 = bigint;
export type i128 = bigint;
export type i256 = bigint;
export type str = string;
export type bool = boolean;
export type Null = null;
