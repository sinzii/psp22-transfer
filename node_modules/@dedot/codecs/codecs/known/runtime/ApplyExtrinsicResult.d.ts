import * as $ from '@dedot/shape';
export declare const $DispatchOutcome: $.Shape<$.Result<readonly [], {
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}>, $.Result<[], {
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}>>;
export type DispatchOutcome = $.Input<typeof $DispatchOutcome>;
/**
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/bdf186870dc4a7d74d59cad338baf8478d0715b4/substrate/primitives/runtime/src/lib.rs#L800-L819
 */
export declare const $ApplyExtrinsicResult: $.Shape<$.Result<$.Result<readonly [], {
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}>, {
    type: "Invalid";
    value: {
        type: "Call";
    } | {
        type: "Payment";
    } | {
        type: "Future";
    } | {
        type: "Stale";
    } | {
        type: "BadProof";
    } | {
        type: "AncientBirthBlock";
    } | {
        type: "ExhaustsResources";
    } | {
        type: "Custom";
        value: number;
    } | {
        type: "BadMandatory";
    } | {
        type: "MandatoryValidation";
    } | {
        type: "BadSigner";
    };
} | {
    type: "Unknown";
    value: {
        type: "Custom";
        value: number;
    } | {
        type: "CannotLookup";
    } | {
        type: "NoUnsignedValidator";
    };
}>, $.Result<$.Result<[], {
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}>, {
    type: "Invalid";
    value: {
        type: "Call";
    } | {
        type: "Payment";
    } | {
        type: "Future";
    } | {
        type: "Stale";
    } | {
        type: "BadProof";
    } | {
        type: "AncientBirthBlock";
    } | {
        type: "ExhaustsResources";
    } | {
        type: "Custom";
        value: number;
    } | {
        type: "BadMandatory";
    } | {
        type: "MandatoryValidation";
    } | {
        type: "BadSigner";
    };
} | {
    type: "Unknown";
    value: {
        type: "Custom";
        value: number;
    } | {
        type: "CannotLookup";
    } | {
        type: "NoUnsignedValidator";
    };
}>>;
export type ApplyExtrinsicResult = $.Input<typeof $ApplyExtrinsicResult>;
