import * as $ from '@dedot/shape';
/**
 * DispatchError
 */
export declare const $TokenError: $.Shape<"FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked", "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked">;
export type TokenError = $.Input<typeof $TokenError>;
export declare const $ModuleError: $.Shape<{
    index: number;
    error: `0x${string}`;
}, {
    index: number;
    error: `0x${string}`;
}>;
export type ModuleError = $.Input<typeof $ModuleError>;
export declare const $TransactionalError: $.Shape<"LimitReached" | "NoLayer", "LimitReached" | "NoLayer">;
export type TransactionalError = $.Input<typeof $TransactionalError>;
export declare const $ArithmeticError: $.Shape<"Underflow" | "Overflow" | "DivisionByZero", "Underflow" | "Overflow" | "DivisionByZero">;
export type ArithmeticError = $.Input<typeof $ArithmeticError>;
export declare const $DispatchError: $.Shape<{
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}, {
    type: "CannotLookup";
} | {
    type: "Other";
} | {
    type: "BadOrigin";
} | {
    type: "Module";
    value: {
        index: number;
        error: `0x${string}`;
    };
} | {
    type: "ConsumerRemaining";
} | {
    type: "NoProviders";
} | {
    type: "TooManyConsumers";
} | {
    type: "Token";
    value: "FundsUnavailable" | "OnlyProvider" | "BelowMinimum" | "CannotCreate" | "UnknownAsset" | "Frozen" | "Unsupported" | "CannotCreateHold" | "NotExpendable" | "Blocked";
} | {
    type: "Arithmetic";
    value: "Underflow" | "Overflow" | "DivisionByZero";
} | {
    type: "Transactional";
    value: "LimitReached" | "NoLayer";
} | {
    type: "Exhausted";
} | {
    type: "Corruption";
} | {
    type: "Unavailable";
} | {
    type: "RootNotAllowed";
}>;
export type DispatchError = $.Input<typeof $DispatchError>;
