import * as $ from '@dedot/shape';
/**
 * Priority for a transaction. Additive. Higher is better.
 */
export declare const $TransactionPriority: $.Shape<bigint, bigint>;
export type TransactionPriority = $.Input<typeof $TransactionPriority>;
/**
 * Minimum number of blocks a transaction will remain valid for.
 */
export declare const $TransactionLongevity: $.Shape<bigint, bigint>;
export type TransactionLongevity = $.Input<typeof $TransactionLongevity>;
/**
 * Tag for a transaction. No two transactions with the same tag should be placed on-chain.
 */
export declare const $TransactionTag: $.Shape<`0x${string}`, `0x${string}`>;
export type TransactionTag = $.Input<typeof $TransactionTag>;
/**
 * Information concerning a valid transaction.
 */
export declare const $ValidTransaction: $.Shape<{
    priority: bigint;
    requires: `0x${string}`[];
    provides: `0x${string}`[];
    longevity: bigint;
    propagate: boolean;
}, {
    priority: bigint;
    requires: `0x${string}`[];
    provides: `0x${string}`[];
    longevity: bigint;
    propagate: boolean;
}>;
export type ValidTransaction = $.Input<typeof $ValidTransaction>;
/**
 * Information on a transaction's validity and, if valid, on how it relates to other transactions.
 */
export declare const $TransactionValidity: $.Shape<$.Result<{
    priority: bigint;
    requires: `0x${string}`[];
    provides: `0x${string}`[];
    longevity: bigint;
    propagate: boolean;
}, {
    type: "Invalid";
    value: {
        type: "Call";
    } | {
        type: "Payment";
    } | {
        type: "Future";
    } | {
        type: "Stale";
    } | {
        type: "BadProof";
    } | {
        type: "AncientBirthBlock";
    } | {
        type: "ExhaustsResources";
    } | {
        type: "Custom";
        value: number;
    } | {
        type: "BadMandatory";
    } | {
        type: "MandatoryValidation";
    } | {
        type: "BadSigner";
    };
} | {
    type: "Unknown";
    value: {
        type: "Custom";
        value: number;
    } | {
        type: "CannotLookup";
    } | {
        type: "NoUnsignedValidator";
    };
}>, $.Result<{
    priority: bigint;
    requires: `0x${string}`[];
    provides: `0x${string}`[];
    longevity: bigint;
    propagate: boolean;
}, {
    type: "Invalid";
    value: {
        type: "Call";
    } | {
        type: "Payment";
    } | {
        type: "Future";
    } | {
        type: "Stale";
    } | {
        type: "BadProof";
    } | {
        type: "AncientBirthBlock";
    } | {
        type: "ExhaustsResources";
    } | {
        type: "Custom";
        value: number;
    } | {
        type: "BadMandatory";
    } | {
        type: "MandatoryValidation";
    } | {
        type: "BadSigner";
    };
} | {
    type: "Unknown";
    value: {
        type: "Custom";
        value: number;
    } | {
        type: "CannotLookup";
    } | {
        type: "NoUnsignedValidator";
    };
}>>;
export type TransactionValidity = $.Input<typeof $TransactionValidity>;
