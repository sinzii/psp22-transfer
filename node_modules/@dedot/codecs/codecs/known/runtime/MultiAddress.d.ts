import * as $ from '@dedot/shape';
import { AccountId32 } from '../../generic/index.js';
/**
 * A multi-format address wrapper for on-chain accounts.
 */
export declare const $MultiAddressBase: $.Shape<{
    type: "Id";
    value: import("../../generic/AccountId32.js").AccountId32Like;
} | {
    type: "Index";
    value: number;
} | {
    type: "Raw";
    value: `0x${string}`;
} | {
    type: "Address32";
    value: `0x${string}`;
} | {
    type: "Address20";
    value: `0x${string}`;
}, {
    type: "Id";
    value: AccountId32;
} | {
    type: "Index";
    value: number;
} | {
    type: "Raw";
    value: `0x${string}`;
} | {
    type: "Address32";
    value: `0x${string}`;
} | {
    type: "Address20";
    value: `0x${string}`;
}>;
export declare const $MultiAddress: $.Shape<MultiAddressLike, MultiAddress>;
export type MultiAddressLike = $.Input<typeof $MultiAddressBase> | string | AccountId32;
export type MultiAddress = $.Output<typeof $MultiAddressBase>;
