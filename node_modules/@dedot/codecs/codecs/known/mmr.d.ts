import * as $ from '@dedot/shape';
/**
 * A type to describe node position in the MMR (node index).
 */
export declare const $NodeIndex: $.Shape<bigint, bigint>;
export type NodeIndex = $.Input<typeof $NodeIndex>;
/**
 * A type to describe leaf position in the MMR.
 *
 * Note this is different from [`NodeIndex`], which can be applied to
 * both leafs and inner nodes. Leafs will always have consecutive `LeafIndex`,
 * but might be actually at different positions in the MMR `NodeIndex`.
 */
export declare const $LeafIndex: $.Shape<bigint, bigint>;
export type LeafIndex = $.Input<typeof $LeafIndex>;
/**
 * Merkle Mountain Range operation error.
 */
export declare const $MmrError: $.Shape<"InvalidNumericOp," | "Push," | "GetRoot," | "Commit," | "GenerateProof," | "Verify" | "LeafNotFound," | "PalletNotIncluded," | "InvalidLeafIndex," | "InvalidBestKnownBlock,", "InvalidNumericOp," | "Push," | "GetRoot," | "Commit," | "GenerateProof," | "Verify" | "LeafNotFound," | "PalletNotIncluded," | "InvalidLeafIndex," | "InvalidBestKnownBlock,">;
export type MmrError = $.Input<typeof $MmrError>;
/**
 * An MMR proof data for a group of leaves.
 */
export declare const $MmrBatchProof: $.Shape<{
    leafIndices: bigint[];
    leafCount: bigint;
    items: `0x${string}`[];
}, {
    leafIndices: bigint[];
    leafCount: bigint;
    items: `0x${string}`[];
}>;
export type MmrBatchProof = $.Input<typeof $MmrBatchProof>;
/**
 *
 * A type-safe wrapper for the concrete leaf type.
 *
 * This structure serves merely to avoid passing raw `Vec<u8>` around.
 * It must be `Vec<u8>`-encoding compatible.
 *
 * It is different from [`OpaqueLeaf`], because it does implement `Codec`
 * and the encoding has to match raw `Vec<u8>` encoding.
 */
export declare const $MmrEncodableOpaqueLeaf: $.Shape<`0x${string}`, `0x${string}`>;
export type MmrEncodableOpaqueLeaf = $.Input<typeof $MmrEncodableOpaqueLeaf>;
export declare const $GeneratedMmrProofResult: $.Shape<readonly [`0x${string}`[], {
    leafIndices: bigint[];
    leafCount: bigint;
    items: `0x${string}`[];
}], [`0x${string}`[], {
    leafIndices: bigint[];
    leafCount: bigint;
    items: `0x${string}`[];
}]>;
export type GeneratedMmrProofResult = $.Input<typeof $GeneratedMmrProofResult>;
