import * as $ from '@dedot/shape';
import { MetadataV15, PalletDefV15, SignedExtensionDefV15, RuntimeApiMethodDefV15, StorageEntryV15 } from './v15.js';
export declare const notSupportedCodec: (msg?: string) => $.Shape<never>;
export declare const $NotSupported: $.Shape<never, never>;
export declare const $MetadataVersioned: $.Shape<{
    type: "V1";
    value: never;
} | {
    type: "V0";
    value: never;
} | {
    type: "V2";
    value: never;
} | {
    type: "V3";
    value: never;
} | {
    type: "V4";
    value: never;
} | {
    type: "V5";
    value: never;
} | {
    type: "V6";
    value: never;
} | {
    type: "V7";
    value: never;
} | {
    type: "V8";
    value: never;
} | {
    type: "V9";
    value: never;
} | {
    type: "V10";
    value: never;
} | {
    type: "V11";
    value: never;
} | {
    type: "V12";
    value: never;
} | {
    type: "V13";
    value: never;
} | {
    type: "V14";
    value: {
        types: {
            id: number;
            path: string[];
            params: {
                name: string;
                typeId: number | undefined;
            }[];
            typeDef: {
                type: "Struct";
                value: {
                    fields: import("./scale_info.js").Field[];
                };
            } | {
                type: "Enum";
                value: {
                    members: {
                        name: string;
                        fields: import("./scale_info.js").Field[];
                        index: number;
                        docs: string[];
                    }[];
                };
            } | {
                type: "Sequence";
                value: {
                    typeParam: number;
                };
            } | {
                type: "SizedVec";
                value: {
                    len: number;
                    typeParam: number;
                };
            } | {
                type: "Tuple";
                value: {
                    fields: number[];
                };
            } | {
                type: "Primitive";
                value: {
                    kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
                };
            } | {
                type: "Compact";
                value: {
                    typeParam: number;
                };
            } | {
                type: "BitSequence";
                value: {
                    bitOrderType: number;
                    bitStoreType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                entries: {
                    name: string;
                    modifier: string;
                    storageType: {
                        type: "Plain";
                        value: {
                            valueTypeId: number;
                        };
                    } | {
                        type: "Map";
                        value: {
                            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                            keyTypeId: number;
                            valueTypeId: number;
                        };
                    };
                    default: `0x${string}`;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            event: number | undefined;
            constants: {
                name: string;
                typeId: number;
                value: `0x${string}`;
                docs: string[];
            }[];
            error: number | undefined;
            index: number;
        }[];
        extrinsic: {
            typeId: number;
            version: number;
            signedExtensions: {
                ident: string;
                typeId: number;
                additionalSigned: number;
            }[];
        };
        runtimeType: number;
    };
} | {
    type: "V15";
    value: {
        types: {
            id: number;
            path: string[];
            params: {
                name: string;
                typeId: number | undefined;
            }[];
            typeDef: {
                type: "Struct";
                value: {
                    fields: import("./scale_info.js").Field[];
                };
            } | {
                type: "Enum";
                value: {
                    members: {
                        name: string;
                        fields: import("./scale_info.js").Field[];
                        index: number;
                        docs: string[];
                    }[];
                };
            } | {
                type: "Sequence";
                value: {
                    typeParam: number;
                };
            } | {
                type: "SizedVec";
                value: {
                    len: number;
                    typeParam: number;
                };
            } | {
                type: "Tuple";
                value: {
                    fields: number[];
                };
            } | {
                type: "Primitive";
                value: {
                    kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
                };
            } | {
                type: "Compact";
                value: {
                    typeParam: number;
                };
            } | {
                type: "BitSequence";
                value: {
                    bitOrderType: number;
                    bitStoreType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                entries: {
                    name: string;
                    modifier: string;
                    storageType: {
                        type: "Plain";
                        value: {
                            valueTypeId: number;
                        };
                    } | {
                        type: "Map";
                        value: {
                            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                            keyTypeId: number;
                            valueTypeId: number;
                        };
                    };
                    default: `0x${string}`;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            event: number | undefined;
            constants: {
                name: string;
                typeId: number;
                value: `0x${string}`;
                docs: string[];
            }[];
            error: number | undefined;
            index: number;
            docs: string[];
        }[];
        extrinsic: {
            version: number;
            addressTypeId: number;
            callTypeId: number;
            signatureTypeId: number;
            extraTypeId: number;
            signedExtensions: {
                ident: string;
                typeId: number;
                additionalSigned: number;
            }[];
        };
        runtimeType: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    typeId: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            callEnumTypeId: number;
            eventEnumTypeId: number;
            errorEnumTypeId: number;
        };
        custom: {
            map: ReadonlyMap<string, {
                typeId: number;
                value: `0x${string}`;
            }>;
        };
    };
}, {
    type: "V1";
    value: never;
} | {
    type: "V0";
    value: never;
} | {
    type: "V2";
    value: never;
} | {
    type: "V3";
    value: never;
} | {
    type: "V4";
    value: never;
} | {
    type: "V5";
    value: never;
} | {
    type: "V6";
    value: never;
} | {
    type: "V7";
    value: never;
} | {
    type: "V8";
    value: never;
} | {
    type: "V9";
    value: never;
} | {
    type: "V10";
    value: never;
} | {
    type: "V11";
    value: never;
} | {
    type: "V12";
    value: never;
} | {
    type: "V13";
    value: never;
} | {
    type: "V14";
    value: {
        types: {
            id: number;
            path: string[];
            params: {
                name: string;
                typeId: number | undefined;
            }[];
            typeDef: {
                type: "Struct";
                value: {
                    fields: import("./scale_info.js").Field[];
                };
            } | {
                type: "Enum";
                value: {
                    members: {
                        name: string;
                        fields: import("./scale_info.js").Field[];
                        index: number;
                        docs: string[];
                    }[];
                };
            } | {
                type: "Sequence";
                value: {
                    typeParam: number;
                };
            } | {
                type: "SizedVec";
                value: {
                    len: number;
                    typeParam: number;
                };
            } | {
                type: "Tuple";
                value: {
                    fields: number[];
                };
            } | {
                type: "Primitive";
                value: {
                    kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
                };
            } | {
                type: "Compact";
                value: {
                    typeParam: number;
                };
            } | {
                type: "BitSequence";
                value: {
                    bitOrderType: number;
                    bitStoreType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                entries: {
                    name: string;
                    modifier: string;
                    storageType: {
                        type: "Plain";
                        value: {
                            valueTypeId: number;
                        };
                    } | {
                        type: "Map";
                        value: {
                            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                            keyTypeId: number;
                            valueTypeId: number;
                        };
                    };
                    default: `0x${string}`;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            event: number | undefined;
            constants: {
                name: string;
                typeId: number;
                value: `0x${string}`;
                docs: string[];
            }[];
            error: number | undefined;
            index: number;
        }[];
        extrinsic: {
            typeId: number;
            version: number;
            signedExtensions: {
                ident: string;
                typeId: number;
                additionalSigned: number;
            }[];
        };
        runtimeType: number;
    };
} | {
    type: "V15";
    value: {
        types: {
            id: number;
            path: string[];
            params: {
                name: string;
                typeId: number | undefined;
            }[];
            typeDef: {
                type: "Struct";
                value: {
                    fields: import("./scale_info.js").Field[];
                };
            } | {
                type: "Enum";
                value: {
                    members: {
                        name: string;
                        fields: import("./scale_info.js").Field[];
                        index: number;
                        docs: string[];
                    }[];
                };
            } | {
                type: "Sequence";
                value: {
                    typeParam: number;
                };
            } | {
                type: "SizedVec";
                value: {
                    len: number;
                    typeParam: number;
                };
            } | {
                type: "Tuple";
                value: {
                    fields: number[];
                };
            } | {
                type: "Primitive";
                value: {
                    kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
                };
            } | {
                type: "Compact";
                value: {
                    typeParam: number;
                };
            } | {
                type: "BitSequence";
                value: {
                    bitOrderType: number;
                    bitStoreType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                entries: {
                    name: string;
                    modifier: string;
                    storageType: {
                        type: "Plain";
                        value: {
                            valueTypeId: number;
                        };
                    } | {
                        type: "Map";
                        value: {
                            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                            keyTypeId: number;
                            valueTypeId: number;
                        };
                    };
                    default: `0x${string}`;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            event: number | undefined;
            constants: {
                name: string;
                typeId: number;
                value: `0x${string}`;
                docs: string[];
            }[];
            error: number | undefined;
            index: number;
            docs: string[];
        }[];
        extrinsic: {
            version: number;
            addressTypeId: number;
            callTypeId: number;
            signatureTypeId: number;
            extraTypeId: number;
            signedExtensions: {
                ident: string;
                typeId: number;
                additionalSigned: number;
            }[];
        };
        runtimeType: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    typeId: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            callEnumTypeId: number;
            eventEnumTypeId: number;
            errorEnumTypeId: number;
        };
        custom: {
            map: $.ShapeMap<string, {
                typeId: number;
                value: `0x${string}`;
            }>;
        };
    };
}>;
export type MetadataVersioned = $.Input<typeof $MetadataVersioned>;
export declare const MAGIC_NUMBER = 1635018093;
export declare const $MetadataLatest: $.Shape<{
    types: {
        id: number;
        path: string[];
        params: {
            name: string;
            typeId: number | undefined;
        }[];
        typeDef: {
            type: "Struct";
            value: {
                fields: import("./scale_info.js").Field[];
            };
        } | {
            type: "Enum";
            value: {
                members: {
                    name: string;
                    fields: import("./scale_info.js").Field[];
                    index: number;
                    docs: string[];
                }[];
            };
        } | {
            type: "Sequence";
            value: {
                typeParam: number;
            };
        } | {
            type: "SizedVec";
            value: {
                len: number;
                typeParam: number;
            };
        } | {
            type: "Tuple";
            value: {
                fields: number[];
            };
        } | {
            type: "Primitive";
            value: {
                kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
            };
        } | {
            type: "Compact";
            value: {
                typeParam: number;
            };
        } | {
            type: "BitSequence";
            value: {
                bitOrderType: number;
                bitStoreType: number;
            };
        };
        docs: string[];
    }[];
    pallets: {
        name: string;
        storage: {
            prefix: string;
            entries: {
                name: string;
                modifier: string;
                storageType: {
                    type: "Plain";
                    value: {
                        valueTypeId: number;
                    };
                } | {
                    type: "Map";
                    value: {
                        hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                        keyTypeId: number;
                        valueTypeId: number;
                    };
                };
                default: `0x${string}`;
                docs: string[];
            }[];
        } | undefined;
        calls: number | undefined;
        event: number | undefined;
        constants: {
            name: string;
            typeId: number;
            value: `0x${string}`;
            docs: string[];
        }[];
        error: number | undefined;
        index: number;
        docs: string[];
    }[];
    extrinsic: {
        version: number;
        addressTypeId: number;
        callTypeId: number;
        signatureTypeId: number;
        extraTypeId: number;
        signedExtensions: {
            ident: string;
            typeId: number;
            additionalSigned: number;
        }[];
    };
    runtimeType: number;
    apis: {
        name: string;
        methods: {
            name: string;
            inputs: {
                name: string;
                typeId: number;
            }[];
            output: number;
            docs: string[];
        }[];
        docs: string[];
    }[];
    outerEnums: {
        callEnumTypeId: number;
        eventEnumTypeId: number;
        errorEnumTypeId: number;
    };
    custom: {
        map: ReadonlyMap<string, {
            typeId: number;
            value: `0x${string}`;
        }>;
    };
}, {
    types: {
        id: number;
        path: string[];
        params: {
            name: string;
            typeId: number | undefined;
        }[];
        typeDef: {
            type: "Struct";
            value: {
                fields: import("./scale_info.js").Field[];
            };
        } | {
            type: "Enum";
            value: {
                members: {
                    name: string;
                    fields: import("./scale_info.js").Field[];
                    index: number;
                    docs: string[];
                }[];
            };
        } | {
            type: "Sequence";
            value: {
                typeParam: number;
            };
        } | {
            type: "SizedVec";
            value: {
                len: number;
                typeParam: number;
            };
        } | {
            type: "Tuple";
            value: {
                fields: number[];
            };
        } | {
            type: "Primitive";
            value: {
                kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
            };
        } | {
            type: "Compact";
            value: {
                typeParam: number;
            };
        } | {
            type: "BitSequence";
            value: {
                bitOrderType: number;
                bitStoreType: number;
            };
        };
        docs: string[];
    }[];
    pallets: {
        name: string;
        storage: {
            prefix: string;
            entries: {
                name: string;
                modifier: string;
                storageType: {
                    type: "Plain";
                    value: {
                        valueTypeId: number;
                    };
                } | {
                    type: "Map";
                    value: {
                        hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                        keyTypeId: number;
                        valueTypeId: number;
                    };
                };
                default: `0x${string}`;
                docs: string[];
            }[];
        } | undefined;
        calls: number | undefined;
        event: number | undefined;
        constants: {
            name: string;
            typeId: number;
            value: `0x${string}`;
            docs: string[];
        }[];
        error: number | undefined;
        index: number;
        docs: string[];
    }[];
    extrinsic: {
        version: number;
        addressTypeId: number;
        callTypeId: number;
        signatureTypeId: number;
        extraTypeId: number;
        signedExtensions: {
            ident: string;
            typeId: number;
            additionalSigned: number;
        }[];
    };
    runtimeType: number;
    apis: {
        name: string;
        methods: {
            name: string;
            inputs: {
                name: string;
                typeId: number;
            }[];
            output: number;
            docs: string[];
        }[];
        docs: string[];
    }[];
    outerEnums: {
        callEnumTypeId: number;
        eventEnumTypeId: number;
        errorEnumTypeId: number;
    };
    custom: {
        map: $.ShapeMap<string, {
            typeId: number;
            value: `0x${string}`;
        }>;
    };
}>;
export type MetadataLatest = MetadataV15;
export declare const $PalletDefLatest: $.Shape<{
    name: string;
    storage: {
        prefix: string;
        entries: {
            name: string;
            modifier: string;
            storageType: {
                type: "Plain";
                value: {
                    valueTypeId: number;
                };
            } | {
                type: "Map";
                value: {
                    hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                    keyTypeId: number;
                    valueTypeId: number;
                };
            };
            default: `0x${string}`;
            docs: string[];
        }[];
    } | undefined;
    calls: number | undefined;
    event: number | undefined;
    constants: {
        name: string;
        typeId: number;
        value: `0x${string}`;
        docs: string[];
    }[];
    error: number | undefined;
    index: number;
    docs: string[];
}, {
    name: string;
    storage: {
        prefix: string;
        entries: {
            name: string;
            modifier: string;
            storageType: {
                type: "Plain";
                value: {
                    valueTypeId: number;
                };
            } | {
                type: "Map";
                value: {
                    hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                    keyTypeId: number;
                    valueTypeId: number;
                };
            };
            default: `0x${string}`;
            docs: string[];
        }[];
    } | undefined;
    calls: number | undefined;
    event: number | undefined;
    constants: {
        name: string;
        typeId: number;
        value: `0x${string}`;
        docs: string[];
    }[];
    error: number | undefined;
    index: number;
    docs: string[];
}>;
export type PalletDefLatest = PalletDefV15;
export declare const $StorageEntryLatest: $.Shape<{
    name: string;
    modifier: string;
    storageType: {
        type: "Plain";
        value: {
            valueTypeId: number;
        };
    } | {
        type: "Map";
        value: {
            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
            keyTypeId: number;
            valueTypeId: number;
        };
    };
    default: `0x${string}`;
    docs: string[];
}, {
    name: string;
    modifier: string;
    storageType: {
        type: "Plain";
        value: {
            valueTypeId: number;
        };
    } | {
        type: "Map";
        value: {
            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
            keyTypeId: number;
            valueTypeId: number;
        };
    };
    default: `0x${string}`;
    docs: string[];
}>;
export type StorageEntryLatest = StorageEntryV15;
export declare const $SignedExtensionDefLatest: $.Shape<{
    ident: string;
    typeId: number;
    additionalSigned: number;
}, {
    ident: string;
    typeId: number;
    additionalSigned: number;
}>;
export type SignedExtensionDefLatest = SignedExtensionDefV15;
export declare const $RuntimeApiMethodDefLatest: $.Shape<{
    name: string;
    inputs: {
        name: string;
        typeId: number;
    }[];
    output: number;
    docs: string[];
}, {
    name: string;
    inputs: {
        name: string;
        typeId: number;
    }[];
    output: number;
    docs: string[];
}>;
export type RuntimeApiMethodDefLatest = RuntimeApiMethodDefV15;
export declare class Metadata {
    magicNumber: number;
    metadataVersioned: MetadataVersioned;
    constructor(magicNumber: number, metadata: MetadataVersioned);
    get versionNumber(): number;
    get version(): "V1" | "V0" | "V2" | "V3" | "V4" | "V5" | "V6" | "V7" | "V8" | "V9" | "V10" | "V11" | "V12" | "V13" | "V14" | "V15";
    get latest(): MetadataLatest;
}
export declare const $Metadata: $.Shape<Metadata>;
