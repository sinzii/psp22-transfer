import * as $ from '@dedot/shape';
export type TypeId = number;
export declare const $TypeId: $.Shape<TypeId>;
export type Field = {
    name: string | undefined;
    typeId: TypeId;
    typeName: string | undefined;
    docs: string[];
};
export declare const $Field: $.Shape<Field>;
export declare const $PrimitiveKind: $.Shape<"bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256", "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256">;
export type PrimitiveKind = $.Input<typeof $PrimitiveKind>;
export declare const $EnumTypeDef: $.Shape<{
    members: {
        name: string;
        fields: Field[];
        index: number;
        docs: string[];
    }[];
}, {
    members: {
        name: string;
        fields: Field[];
        index: number;
        docs: string[];
    }[];
}>;
export type EnumTypeDef = $.Input<typeof $EnumTypeDef>;
export declare const $TypeDef: $.Shape<{
    type: "Struct";
    value: {
        fields: Field[];
    };
} | {
    type: "Enum";
    value: {
        members: {
            name: string;
            fields: Field[];
            index: number;
            docs: string[];
        }[];
    };
} | {
    type: "Sequence";
    value: {
        typeParam: number;
    };
} | {
    type: "SizedVec";
    value: {
        len: number;
        typeParam: number;
    };
} | {
    type: "Tuple";
    value: {
        fields: number[];
    };
} | {
    type: "Primitive";
    value: {
        kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
    };
} | {
    type: "Compact";
    value: {
        typeParam: number;
    };
} | {
    type: "BitSequence";
    value: {
        bitOrderType: number;
        bitStoreType: number;
    };
}, {
    type: "Struct";
    value: {
        fields: Field[];
    };
} | {
    type: "Enum";
    value: {
        members: {
            name: string;
            fields: Field[];
            index: number;
            docs: string[];
        }[];
    };
} | {
    type: "Sequence";
    value: {
        typeParam: number;
    };
} | {
    type: "SizedVec";
    value: {
        len: number;
        typeParam: number;
    };
} | {
    type: "Tuple";
    value: {
        fields: number[];
    };
} | {
    type: "Primitive";
    value: {
        kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
    };
} | {
    type: "Compact";
    value: {
        typeParam: number;
    };
} | {
    type: "BitSequence";
    value: {
        bitOrderType: number;
        bitStoreType: number;
    };
}>;
export type TypeDef = $.Input<typeof $TypeDef>;
export declare const $TypeParam: $.Shape<{
    name: string;
    typeId: number | undefined;
}, {
    name: string;
    typeId: number | undefined;
}>;
export type TypeParam = $.Input<typeof $TypeParam>;
export declare const $PortableType: $.Shape<{
    id: number;
    path: string[];
    params: {
        name: string;
        typeId: number | undefined;
    }[];
    typeDef: {
        type: "Struct";
        value: {
            fields: Field[];
        };
    } | {
        type: "Enum";
        value: {
            members: {
                name: string;
                fields: Field[];
                index: number;
                docs: string[];
            }[];
        };
    } | {
        type: "Sequence";
        value: {
            typeParam: number;
        };
    } | {
        type: "SizedVec";
        value: {
            len: number;
            typeParam: number;
        };
    } | {
        type: "Tuple";
        value: {
            fields: number[];
        };
    } | {
        type: "Primitive";
        value: {
            kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
        };
    } | {
        type: "Compact";
        value: {
            typeParam: number;
        };
    } | {
        type: "BitSequence";
        value: {
            bitOrderType: number;
            bitStoreType: number;
        };
    };
    docs: string[];
}, {
    id: number;
    path: string[];
    params: {
        name: string;
        typeId: number | undefined;
    }[];
    typeDef: {
        type: "Struct";
        value: {
            fields: Field[];
        };
    } | {
        type: "Enum";
        value: {
            members: {
                name: string;
                fields: Field[];
                index: number;
                docs: string[];
            }[];
        };
    } | {
        type: "Sequence";
        value: {
            typeParam: number;
        };
    } | {
        type: "SizedVec";
        value: {
            len: number;
            typeParam: number;
        };
    } | {
        type: "Tuple";
        value: {
            fields: number[];
        };
    } | {
        type: "Primitive";
        value: {
            kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
        };
    } | {
        type: "Compact";
        value: {
            typeParam: number;
        };
    } | {
        type: "BitSequence";
        value: {
            bitOrderType: number;
            bitStoreType: number;
        };
    };
    docs: string[];
}>;
export type PortableType = $.Input<typeof $PortableType>;
export type TypeParams = PortableType['params'];
