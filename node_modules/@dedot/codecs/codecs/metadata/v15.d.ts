import * as $ from '@dedot/shape';
export declare const $ConstantDefV15: $.Shape<{
    name: string;
    typeId: number;
    value: `0x${string}`;
    docs: string[];
}, {
    name: string;
    typeId: number;
    value: `0x${string}`;
    docs: string[];
}>;
export type ConstantDefV15 = $.Input<typeof $ConstantDefV15>;
export declare const $StorageEntryV15: $.Shape<{
    name: string;
    modifier: string;
    storageType: {
        type: "Plain";
        value: {
            valueTypeId: number;
        };
    } | {
        type: "Map";
        value: {
            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
            keyTypeId: number;
            valueTypeId: number;
        };
    };
    default: `0x${string}`;
    docs: string[];
}, {
    name: string;
    modifier: string;
    storageType: {
        type: "Plain";
        value: {
            valueTypeId: number;
        };
    } | {
        type: "Map";
        value: {
            hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
            keyTypeId: number;
            valueTypeId: number;
        };
    };
    default: `0x${string}`;
    docs: string[];
}>;
export type StorageEntryV15 = $.Input<typeof $StorageEntryV15>;
export declare const $PalletDefV15: $.Shape<{
    name: string;
    storage: {
        prefix: string;
        entries: {
            name: string;
            modifier: string;
            storageType: {
                type: "Plain";
                value: {
                    valueTypeId: number;
                };
            } | {
                type: "Map";
                value: {
                    hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                    keyTypeId: number;
                    valueTypeId: number;
                };
            };
            default: `0x${string}`;
            docs: string[];
        }[];
    } | undefined;
    calls: number | undefined;
    event: number | undefined;
    constants: {
        name: string;
        typeId: number;
        value: `0x${string}`;
        docs: string[];
    }[];
    error: number | undefined;
    index: number;
    docs: string[];
}, {
    name: string;
    storage: {
        prefix: string;
        entries: {
            name: string;
            modifier: string;
            storageType: {
                type: "Plain";
                value: {
                    valueTypeId: number;
                };
            } | {
                type: "Map";
                value: {
                    hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                    keyTypeId: number;
                    valueTypeId: number;
                };
            };
            default: `0x${string}`;
            docs: string[];
        }[];
    } | undefined;
    calls: number | undefined;
    event: number | undefined;
    constants: {
        name: string;
        typeId: number;
        value: `0x${string}`;
        docs: string[];
    }[];
    error: number | undefined;
    index: number;
    docs: string[];
}>;
export type PalletDefV15 = $.Input<typeof $PalletDefV15>;
export declare const $SignedExtensionDefV15: $.Shape<{
    ident: string;
    typeId: number;
    additionalSigned: number;
}, {
    ident: string;
    typeId: number;
    additionalSigned: number;
}>;
export type SignedExtensionDefV15 = $.Input<typeof $SignedExtensionDefV15>;
export declare const $ExtrinsicDefV15: $.Shape<{
    version: number;
    addressTypeId: number;
    callTypeId: number;
    signatureTypeId: number;
    extraTypeId: number;
    signedExtensions: {
        ident: string;
        typeId: number;
        additionalSigned: number;
    }[];
}, {
    version: number;
    addressTypeId: number;
    callTypeId: number;
    signatureTypeId: number;
    extraTypeId: number;
    signedExtensions: {
        ident: string;
        typeId: number;
        additionalSigned: number;
    }[];
}>;
export type ExtrinsicDefV15 = $.Input<typeof $ExtrinsicDefV15>;
export declare const $RuntimeApiMethodParamDefV15: $.Shape<{
    name: string;
    typeId: number;
}, {
    name: string;
    typeId: number;
}>;
export type RuntimeApiMethodParamDefV15 = $.Input<typeof $RuntimeApiMethodParamDefV15>;
export declare const $RuntimeApiMethodDefV15: $.Shape<{
    name: string;
    inputs: {
        name: string;
        typeId: number;
    }[];
    output: number;
    docs: string[];
}, {
    name: string;
    inputs: {
        name: string;
        typeId: number;
    }[];
    output: number;
    docs: string[];
}>;
export type RuntimeApiMethodDefV15 = $.Input<typeof $RuntimeApiMethodDefV15>;
export declare const $RuntimeApiDefV15: $.Shape<{
    name: string;
    methods: {
        name: string;
        inputs: {
            name: string;
            typeId: number;
        }[];
        output: number;
        docs: string[];
    }[];
    docs: string[];
}, {
    name: string;
    methods: {
        name: string;
        inputs: {
            name: string;
            typeId: number;
        }[];
        output: number;
        docs: string[];
    }[];
    docs: string[];
}>;
export type RuntimeApiDefV15 = $.Input<typeof $RuntimeApiDefV15>;
/**
 * Ref: https://github.com/paritytech/frame-metadata/blob/a07b2451b82809501fd797691046c1164f7e8840/frame-metadata/src/v15.rs#L48-L63
 */
export declare const $MetadataV15: $.Shape<{
    types: {
        id: number;
        path: string[];
        params: {
            name: string;
            typeId: number | undefined;
        }[];
        typeDef: {
            type: "Struct";
            value: {
                fields: import("./scale_info.js").Field[];
            };
        } | {
            type: "Enum";
            value: {
                members: {
                    name: string;
                    fields: import("./scale_info.js").Field[];
                    index: number;
                    docs: string[];
                }[];
            };
        } | {
            type: "Sequence";
            value: {
                typeParam: number;
            };
        } | {
            type: "SizedVec";
            value: {
                len: number;
                typeParam: number;
            };
        } | {
            type: "Tuple";
            value: {
                fields: number[];
            };
        } | {
            type: "Primitive";
            value: {
                kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
            };
        } | {
            type: "Compact";
            value: {
                typeParam: number;
            };
        } | {
            type: "BitSequence";
            value: {
                bitOrderType: number;
                bitStoreType: number;
            };
        };
        docs: string[];
    }[];
    pallets: {
        name: string;
        storage: {
            prefix: string;
            entries: {
                name: string;
                modifier: string;
                storageType: {
                    type: "Plain";
                    value: {
                        valueTypeId: number;
                    };
                } | {
                    type: "Map";
                    value: {
                        hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                        keyTypeId: number;
                        valueTypeId: number;
                    };
                };
                default: `0x${string}`;
                docs: string[];
            }[];
        } | undefined;
        calls: number | undefined;
        event: number | undefined;
        constants: {
            name: string;
            typeId: number;
            value: `0x${string}`;
            docs: string[];
        }[];
        error: number | undefined;
        index: number;
        docs: string[];
    }[];
    extrinsic: {
        version: number;
        addressTypeId: number;
        callTypeId: number;
        signatureTypeId: number;
        extraTypeId: number;
        signedExtensions: {
            ident: string;
            typeId: number;
            additionalSigned: number;
        }[];
    };
    runtimeType: number;
    apis: {
        name: string;
        methods: {
            name: string;
            inputs: {
                name: string;
                typeId: number;
            }[];
            output: number;
            docs: string[];
        }[];
        docs: string[];
    }[];
    outerEnums: {
        callEnumTypeId: number;
        eventEnumTypeId: number;
        errorEnumTypeId: number;
    };
    custom: {
        map: ReadonlyMap<string, {
            typeId: number;
            value: `0x${string}`;
        }>;
    };
}, {
    types: {
        id: number;
        path: string[];
        params: {
            name: string;
            typeId: number | undefined;
        }[];
        typeDef: {
            type: "Struct";
            value: {
                fields: import("./scale_info.js").Field[];
            };
        } | {
            type: "Enum";
            value: {
                members: {
                    name: string;
                    fields: import("./scale_info.js").Field[];
                    index: number;
                    docs: string[];
                }[];
            };
        } | {
            type: "Sequence";
            value: {
                typeParam: number;
            };
        } | {
            type: "SizedVec";
            value: {
                len: number;
                typeParam: number;
            };
        } | {
            type: "Tuple";
            value: {
                fields: number[];
            };
        } | {
            type: "Primitive";
            value: {
                kind: "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
            };
        } | {
            type: "Compact";
            value: {
                typeParam: number;
            };
        } | {
            type: "BitSequence";
            value: {
                bitOrderType: number;
                bitStoreType: number;
            };
        };
        docs: string[];
    }[];
    pallets: {
        name: string;
        storage: {
            prefix: string;
            entries: {
                name: string;
                modifier: string;
                storageType: {
                    type: "Plain";
                    value: {
                        valueTypeId: number;
                    };
                } | {
                    type: "Map";
                    value: {
                        hashers: ("identity" | "blake2_128" | "blake2_256" | "blake2_128Concat" | "twox128" | "twox256" | "twox64Concat")[];
                        keyTypeId: number;
                        valueTypeId: number;
                    };
                };
                default: `0x${string}`;
                docs: string[];
            }[];
        } | undefined;
        calls: number | undefined;
        event: number | undefined;
        constants: {
            name: string;
            typeId: number;
            value: `0x${string}`;
            docs: string[];
        }[];
        error: number | undefined;
        index: number;
        docs: string[];
    }[];
    extrinsic: {
        version: number;
        addressTypeId: number;
        callTypeId: number;
        signatureTypeId: number;
        extraTypeId: number;
        signedExtensions: {
            ident: string;
            typeId: number;
            additionalSigned: number;
        }[];
    };
    runtimeType: number;
    apis: {
        name: string;
        methods: {
            name: string;
            inputs: {
                name: string;
                typeId: number;
            }[];
            output: number;
            docs: string[];
        }[];
        docs: string[];
    }[];
    outerEnums: {
        callEnumTypeId: number;
        eventEnumTypeId: number;
        errorEnumTypeId: number;
    };
    custom: {
        map: $.ShapeMap<string, {
            typeId: number;
            value: `0x${string}`;
        }>;
    };
}>;
export type MetadataV15 = $.Input<typeof $MetadataV15>;
