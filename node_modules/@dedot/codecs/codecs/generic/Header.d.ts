import * as $ from '@dedot/shape';
import { HexString } from '@dedot/utils';
export declare const $BlockNumber: $.Shape<number, number>;
export type BlockNumber = number;
export declare const $HeaderBlockNumber: $.Shape<number, number>;
export declare class ConsensusEngineId {
    id: HexString;
    constructor(id: HexString);
    get name(): string;
    toString(): string;
    toJSON(): string;
}
export type ConsensusEngineIdLike = ConsensusEngineId | HexString;
export declare const $ConsensusEngineId: $.Shape<ConsensusEngineIdLike, ConsensusEngineId>;
/**
 * Digest item that is able to encode/decode 'system' digest items and
 * provide opaque access to other items.
 *
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/0e49ed72aa365475e30069a5c30e251a009fdacf/substrate/primitives/runtime/src/generic/digest.rs#L72-L109
 */
export declare const $DigestItem: $.Shape<{
    type: "Other";
    value: `0x${string}`;
} | {
    type: "Consensus";
    value: readonly [ConsensusEngineIdLike, `0x${string}`];
} | {
    type: "Seal";
    value: readonly [ConsensusEngineIdLike, `0x${string}`];
} | {
    type: "PreRuntime";
    value: readonly [ConsensusEngineIdLike, `0x${string}`];
} | {
    type: "RuntimeEnvironmentUpdated";
}, {
    type: "Other";
    value: `0x${string}`;
} | {
    type: "Consensus";
    value: [ConsensusEngineId, `0x${string}`];
} | {
    type: "Seal";
    value: [ConsensusEngineId, `0x${string}`];
} | {
    type: "PreRuntime";
    value: [ConsensusEngineId, `0x${string}`];
} | {
    type: "RuntimeEnvironmentUpdated";
}>;
export type DigestItem = $.Input<typeof $DigestItem>;
export declare const $Digest: $.Shape<{
    logs: ({
        type: "Other";
        value: `0x${string}`;
    } | {
        type: "Consensus";
        value: readonly [ConsensusEngineIdLike, `0x${string}`];
    } | {
        type: "Seal";
        value: readonly [ConsensusEngineIdLike, `0x${string}`];
    } | {
        type: "PreRuntime";
        value: readonly [ConsensusEngineIdLike, `0x${string}`];
    } | {
        type: "RuntimeEnvironmentUpdated";
    })[];
}, {
    logs: ({
        type: "Other";
        value: `0x${string}`;
    } | {
        type: "Consensus";
        value: [ConsensusEngineId, `0x${string}`];
    } | {
        type: "Seal";
        value: [ConsensusEngineId, `0x${string}`];
    } | {
        type: "PreRuntime";
        value: [ConsensusEngineId, `0x${string}`];
    } | {
        type: "RuntimeEnvironmentUpdated";
    })[];
}>;
export type Digest = $.Input<typeof $Digest>;
export declare const $Header: $.Shape<{
    parentHash: `0x${string}`;
    number: number;
    stateRoot: `0x${string}`;
    extrinsicsRoot: `0x${string}`;
    digest: {
        logs: ({
            type: "Other";
            value: `0x${string}`;
        } | {
            type: "Consensus";
            value: readonly [ConsensusEngineIdLike, `0x${string}`];
        } | {
            type: "Seal";
            value: readonly [ConsensusEngineIdLike, `0x${string}`];
        } | {
            type: "PreRuntime";
            value: readonly [ConsensusEngineIdLike, `0x${string}`];
        } | {
            type: "RuntimeEnvironmentUpdated";
        })[];
    };
}, {
    parentHash: `0x${string}`;
    number: number;
    stateRoot: `0x${string}`;
    extrinsicsRoot: `0x${string}`;
    digest: {
        logs: ({
            type: "Other";
            value: `0x${string}`;
        } | {
            type: "Consensus";
            value: [ConsensusEngineId, `0x${string}`];
        } | {
            type: "Seal";
            value: [ConsensusEngineId, `0x${string}`];
        } | {
            type: "PreRuntime";
            value: [ConsensusEngineId, `0x${string}`];
        } | {
            type: "RuntimeEnvironmentUpdated";
        })[];
    };
}>;
export type Header = $.Input<typeof $Header>;
