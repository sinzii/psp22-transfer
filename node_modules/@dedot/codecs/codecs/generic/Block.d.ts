import * as $ from '@dedot/shape';
export declare const $Block: $.Shape<{
    header: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "Seal";
                value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
    extrinsics: import("../known/runtime/OpaqueExtrinsic.js").OpaqueExtrinsicLike[];
}, {
    header: {
        parentHash: `0x${string}`;
        number: number;
        stateRoot: `0x${string}`;
        extrinsicsRoot: `0x${string}`;
        digest: {
            logs: ({
                type: "Other";
                value: `0x${string}`;
            } | {
                type: "Consensus";
                value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "Seal";
                value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "PreRuntime";
                value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
            } | {
                type: "RuntimeEnvironmentUpdated";
            })[];
        };
    };
    extrinsics: `0x${string}`[];
}>;
export type Block = $.Input<typeof $Block>;
export declare const $Justification: $.Shape<readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`], [import("./Header.js").ConsensusEngineId, `0x${string}`]>;
export type Justification = $.Input<typeof $Justification>;
export declare const $Justifications: $.Shape<(readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`])[], [import("./Header.js").ConsensusEngineId, `0x${string}`][]>;
export type Justifications = $.Input<typeof $Justifications>;
export declare const $SignedBlock: $.Shape<{
    block: {
        header: {
            parentHash: `0x${string}`;
            number: number;
            stateRoot: `0x${string}`;
            extrinsicsRoot: `0x${string}`;
            digest: {
                logs: ({
                    type: "Other";
                    value: `0x${string}`;
                } | {
                    type: "Consensus";
                    value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
                } | {
                    type: "Seal";
                    value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
                } | {
                    type: "PreRuntime";
                    value: readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`];
                } | {
                    type: "RuntimeEnvironmentUpdated";
                })[];
            };
        };
        extrinsics: import("../known/runtime/OpaqueExtrinsic.js").OpaqueExtrinsicLike[];
    };
    justifications: (readonly [import("./Header.js").ConsensusEngineIdLike, `0x${string}`])[] | undefined;
}, {
    block: {
        header: {
            parentHash: `0x${string}`;
            number: number;
            stateRoot: `0x${string}`;
            extrinsicsRoot: `0x${string}`;
            digest: {
                logs: ({
                    type: "Other";
                    value: `0x${string}`;
                } | {
                    type: "Consensus";
                    value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
                } | {
                    type: "Seal";
                    value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
                } | {
                    type: "PreRuntime";
                    value: [import("./Header.js").ConsensusEngineId, `0x${string}`];
                } | {
                    type: "RuntimeEnvironmentUpdated";
                })[];
            };
        };
        extrinsics: `0x${string}`[];
    };
    justifications: [import("./Header.js").ConsensusEngineId, `0x${string}`][] | undefined;
}>;
export type SignedBlock = $.Input<typeof $SignedBlock>;
