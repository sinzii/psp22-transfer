import * as $ from '@dedot/shape';
import { decodeAddress, encodeAddress, isHex, isString, isU8a, u8aToHex, } from '@dedot/utils';
export const accountId32ToHex = (input) => {
    if (input instanceof AccountId32) {
        return input.raw;
    }
    else if (isU8a(input)) {
        return u8aToHex(input);
    }
    else if (isString(input)) {
        return u8aToHex(decodeAddress(input));
    }
    else if (isHex(input)) {
        return input;
    }
    throw Error(`Invalid input for AccountId32: ${input}`);
};
export class AccountId32 {
    raw;
    constructor(input) {
        this.raw = accountId32ToHex(input);
    }
    address(ss58Format) {
        return encodeAddress(this.raw, ss58Format);
    }
    toJSON() {
        return this.address();
    }
    eq(other) {
        return this.raw === new AccountId32(other).raw;
    }
}
export const $AccountId32 = $.instance(AccountId32, $.Tuple($.FixedHex(32)), (input) => [accountId32ToHex(input)]);
