import { EnumOptions } from '@dedot/shape';
import { HashFn, HexString } from '@dedot/utils';
import { DispatchError, MetadataLatest, ModuleError, PalletErrorMetadataLatest, PortableType, TypeId } from '../codecs/index.js';
import { TypeRegistry } from './TypeRegistry.js';
/**
 * Codec registry for portable types from metadata
 */
export declare class PortableRegistry extends TypeRegistry {
    #private;
    constructor(metadata: MetadataLatest, hasher?: HashFn);
    get $Extrinsic(): import("@dedot/shape").Shape<import("../codecs/index.js").Extrinsic<any, any, any, any>, import("../codecs/index.js").Extrinsic<any, any, any, any>>;
    get metadata(): MetadataLatest;
    hash(input: Uint8Array): Uint8Array;
    hashAsHex(input: Uint8Array | HexString): HexString;
    setHasher(hasher: HashFn): void;
    findErrorMeta(errorInfo: ModuleError | DispatchError): PalletErrorMetadataLatest | undefined;
    findType(typeId: TypeId): PortableType;
    /**
     * Custom enum labels for different types
     *
     * @param typeId
     */
    getEnumOptions(typeId: TypeId): EnumOptions;
    getFieldTypeIdsFromEnum(typeId: TypeId): number[];
}
