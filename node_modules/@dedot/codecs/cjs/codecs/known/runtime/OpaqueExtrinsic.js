"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$UncheckedExtrinsic = exports.$OpaqueExtrinsic = void 0;
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
exports.$OpaqueExtrinsic = $.createShape({
    metadata: $.metadata('$OpaqueExtrinsic'),
    staticSize: $.compactU32.staticSize,
    subEncode(buffer, value) {
        const u8a = (0, utils_1.toU8a)(value);
        // make sure the value if len-prefixed
        const buf = new $.EncodeBuffer($.compactU32.staticSize);
        $.compactU32.subEncode(buf, u8a.length);
        buffer.insertArray(u8a);
    },
    subDecode(buffer) {
        const length = $.compactU32.subDecode(buffer);
        const lengthSize = $.compactU32.encode(length).length;
        const value = buffer.array.subarray(buffer.index - lengthSize, buffer.index + length);
        buffer.index += length;
        return (0, utils_1.u8aToHex)(value);
    },
});
exports.$UncheckedExtrinsic = exports.$OpaqueExtrinsic;
