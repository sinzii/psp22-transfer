"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$TransactionValidity = exports.$ValidTransaction = exports.$TransactionTag = exports.$TransactionLongevity = exports.$TransactionPriority = void 0;
const $ = __importStar(require("@dedot/shape"));
const TransactionValidityError_js_1 = require("./TransactionValidityError.js");
/**
 * Priority for a transaction. Additive. Higher is better.
 */
exports.$TransactionPriority = $.u64;
/**
 * Minimum number of blocks a transaction will remain valid for.
 */
exports.$TransactionLongevity = $.u64;
/**
 * Tag for a transaction. No two transactions with the same tag should be placed on-chain.
 */
exports.$TransactionTag = $.PrefixedHex;
/**
 * Information concerning a valid transaction.
 */
exports.$ValidTransaction = $.Struct({
    /// Priority of the transaction.
    ///
    /// Priority determines the ordering of two transactions that have all
    /// their dependencies (required tags) satisfied.
    priority: exports.$TransactionPriority,
    /// Transaction dependencies
    ///
    /// A non-empty list signifies that some other transactions which provide
    /// given tags are required to be included before that one.
    requires: $.Vec(exports.$TransactionTag),
    /// Provided tags
    ///
    /// A list of tags this transaction provides. Successfully importing the transaction
    /// will enable other transactions that depend on (require) those tags to be included as well.
    /// Provided and required tags allow Substrate to build a dependency graph of transactions
    /// and import them in the right (linear) order.
    provides: $.Vec(exports.$TransactionTag),
    /// Transaction longevity
    ///
    /// Longevity describes minimum number of blocks the validity is correct.
    /// After this period transaction should be removed from the pool or revalidated.
    longevity: exports.$TransactionLongevity,
    /// A flag indicating if the transaction should be propagated to other peers.
    ///
    /// By setting `false` here the transaction will still be considered for
    /// including in blocks that are authored on the current node, but will
    /// never be sent to other peers.
    propagate: $.bool,
});
/**
 * Information on a transaction's validity and, if valid, on how it relates to other transactions.
 */
exports.$TransactionValidity = $.Result(exports.$ValidTransaction, TransactionValidityError_js_1.$TransactionValidityError);
