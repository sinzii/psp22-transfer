"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$MultiAddress = exports.$MultiAddressBase = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("../../generic/index.js");
/**
 * A multi-format address wrapper for on-chain accounts.
 */
exports.$MultiAddressBase = $.Enum({
    /// It's an account ID (pubkey).
    Id: index_js_1.$AccountId32, // TODO generalize AccountId
    /// It's an account index.
    Index: $.compactU32,
    /// It's some arbitrary raw bytes.
    Raw: $.PrefixedHex,
    /// It's a 32 byte representation.
    Address32: $.FixedHex(32),
    /// Its a 20 byte representation.
    Address20: $.FixedHex(20),
});
exports.$MultiAddress = $.transform({
    $base: exports.$MultiAddressBase,
    encode: (value) => {
        if (typeof value === 'string' || value instanceof index_js_1.AccountId32) {
            return { type: 'Id', value };
        }
        return value;
    },
    decode: (value) => value,
});
