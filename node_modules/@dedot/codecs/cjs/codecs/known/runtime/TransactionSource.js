"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$TransactionSource = void 0;
const $ = __importStar(require("@dedot/shape"));
/**
 * The source of the transaction.
 *
 * Depending on the source we might apply different validation schemes.
 * For instance we can disallow specific kinds of transactions if they were not produced
 * by our local node (for instance off-chain workers).
 */
exports.$TransactionSource = $.FlatEnum([
    // Transaction is already included in block.
    //
    // This means that we can't really tell where the transaction is coming from,
    // since it's already in the received block. Note that the custom validation logic
    // using either `Local` or `External` should most likely just allow `InBlock`
    // transactions as well.
    'InBlock',
    // Transaction is coming from a local source.
    //
    // This means that the transaction was produced internally by the node
    // (for instance an Off-Chain Worker, or an Off-Chain Call), as opposed
    // to being received over the network.
    'Local',
    // Transaction has been received externally.
    //
    // This means the transaction has been received from (usually) "untrusted" source,
    // for instance received over the network or RPC.
    'External',
]);
