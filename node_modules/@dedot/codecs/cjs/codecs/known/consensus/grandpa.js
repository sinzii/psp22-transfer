"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$GrandpaEquivocationProof = exports.$Equivocation = exports.$GrandpaEquivocation = exports.$Precommit = exports.$Prevote = exports.$AuthorityList = exports.$AuthorityWeight = exports.$SetId = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("../../generic/index.js");
const primitives_js_1 = require("../primitives.js");
/**
 * The monotonic identifier of a GRANDPA set of authorities.
 */
exports.$SetId = $.u64;
/**
 * The weight of an authority.
 */
exports.$AuthorityWeight = $.u64;
/**
 * A list of Grandpa authorities with associated weights.
 */
exports.$AuthorityList = $.Vec($.Tuple(index_js_1.$AccountId32, exports.$AuthorityWeight));
/**
 * A prevote for a block and its ancestors.
 */
exports.$Prevote = $.Struct({
    /// The target block's hash.
    targetHash: index_js_1.$BlockHash,
    /// The target block's number.
    targetNumber: index_js_1.$BlockNumber,
});
/**
 * A precommit for a block and its ancestors.
 */
exports.$Precommit = $.Struct({
    /// The target block's hash.
    targetHash: index_js_1.$BlockHash,
    /// The target block's number
    targetNumber: index_js_1.$BlockNumber,
});
/**
 * An equivocation (double-vote) in a given round.
 *
 * Ref: https://github.com/paritytech/finality-grandpa/blob/master/src/lib.rs#L210
 */
exports.$GrandpaEquivocation = $.Struct({
    /// The round number equivocated in.
    roundNumber: $.u64,
    /// The identity of the equivocator.
    identity: index_js_1.$AccountId32,
    /// The first vote in the equivocation.
    first: $.Tuple(exports.$Prevote, primitives_js_1.$H512),
    /// The second vote in the equivocation.
    second: $.Tuple(exports.$Prevote, primitives_js_1.$H512),
});
/**
 * Wrapper object for GRANDPA equivocation proofs, useful for unifying prevote
 * and precommit equivocations under a common type.
 */
exports.$Equivocation = $.Enum({
    Prevote: exports.$GrandpaEquivocation,
    Precommit: exports.$GrandpaEquivocation,
});
/**
 * Proof of voter misbehavior on a given set id. Misbehavior/equivocation in
 * GRANDPA happens when a voter votes on the same round (either at prevote or
 * precommit stage) for different blocks. Proving is achieved by collecting the
 * signed messages of conflicting votes.
 */
exports.$GrandpaEquivocationProof = $.Struct({
    setId: exports.$SetId,
    equivocation: exports.$Equivocation,
});
