"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$OpaqueKeyOwnershipProof = void 0;
const $ = __importStar(require("@dedot/shape"));
__exportStar(require("./babe.js"), exports);
__exportStar(require("./beefy.js"), exports);
__exportStar(require("./grandpa.js"), exports);
/*
 * An opaque type used to represent the key ownership proof at the runtime API
 * boundary. The inner value is an encoded representation of the actual key
 * ownership proof which will be parameterized when defining the runtime. At
 * the runtime API boundary this type is unknown and as such we keep this
 * opaque representation, implementors of the runtime API will have to make
 * sure that all usages of `OpaqueKeyOwnershipProof` refer to the same type.
 */
exports.$OpaqueKeyOwnershipProof = $.PrefixedHex;
