"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$BabeEquivocationProof = exports.$BabeEpoch = exports.$BabeEpochConfiguration = exports.$Slot = exports.$BabeConfigurationV1 = exports.$BabeConfiguration = exports.$AllowedSlots = exports.$Randomness = exports.$BabeAuthorityWeight = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("../../generic/index.js");
/*
 * The weight of an authority.
 */
exports.$BabeAuthorityWeight = $.u64;
/*
 * Randomness type required by BABE operations.
 */
exports.$Randomness = $.FixedHex(32);
/*
 * Types of allowed slots.
 */
exports.$AllowedSlots = $.FlatEnum([
    // Only allow primary slots.
    'PrimarySlots',
    // Allow primary and secondary plain slots.
    'PrimaryAndSecondaryPlainSlots',
    // Allow primary and secondary VRF slots.
    'PrimaryAndSecondaryVRFSlots',
]);
/*
 * Configuration data used by the BABE consensus engine.
 */
exports.$BabeConfiguration = $.Struct({
    // The slot duration in milliseconds for BABE. Currently, only
    // the value provided by this type at genesis will be used.
    //
    // Dynamic slot duration may be supported in the future.
    slotDuration: $.u64,
    // The duration of epochs in slots.
    epochLength: $.u64,
    // A constant value that is used in the threshold calculation formula.
    // Expressed as a rational where the first member of the tuple is the
    // numerator and the second is the denominator. The rational should
    // represent a value between 0 and 1.
    // In the threshold formula calculation, `1 - c` represents the probability
    // of a slot being empty.
    c: $.Tuple($.u64, $.u64),
    // The authorities
    authorities: $.Vec($.Tuple(index_js_1.$AccountId32, exports.$BabeAuthorityWeight)),
    // The randomness
    randomness: exports.$Randomness,
    // Type of allowed slots.
    allowedSlots: exports.$AllowedSlots,
});
/*
 * Configuration data used by the BABE consensus engine.
 */
exports.$BabeConfigurationV1 = $.Struct({
    // The slot duration in milliseconds for BABE. Currently, only
    // the value provided by this type at genesis will be used.
    ///
    // Dynamic slot duration may be supported in the future.
    slotDuration: $.u64,
    // The duration of epochs in slots.
    epochLength: $.u64,
    // A constant value that is used in the threshold calculation formula.
    // Expressed as a rational where the first member of the tuple is the
    // numerator and the second is the denominator. The rational should
    // represent a value between 0 and 1.
    // In the threshold formula calculation, `1 - c` represents the probability
    // of a slot being empty.
    c: $.Tuple($.u64, $.u64),
    // The authorities for the genesis epoch.
    authorities: $.Vec($.Tuple(index_js_1.$AccountId32, exports.$BabeAuthorityWeight)),
    // The randomness for the genesis epoch.
    randomness: exports.$Randomness,
    // Whether this chain should run with secondary slots, which are assigned
    // in round-robin manner.
    secondarySlots: $.bool,
});
/*
 * Unit type wrapper that represents a slot.
 */
exports.$Slot = $.u64;
/*
 * Configuration data used by the BABE consensus engine that may change with epochs.
 */
exports.$BabeEpochConfiguration = $.Struct({
    // A constant value that is used in the threshold calculation formula.
    // Expressed as a rational where the first member of the tuple is the
    // numerator and the second is the denominator. The rational should
    // represent a value between 0 and 1.
    // In the threshold formula calculation, `1 - c` represents the probability
    // of a slot being empty.
    c: $.Tuple($.u64, $.u64),
    // Whether this chain should run with secondary slots, which are assigned
    // in round-robin manner.
    allowedSlots: exports.$AllowedSlots,
});
/*
 * BABE epoch information
 */
exports.$BabeEpoch = $.Struct({
    // The epoch index
    epochIndex: $.u64,
    // The starting slot of the epoch.
    startSlot: exports.$Slot,
    // The duration of this epoch.
    duration: $.u64,
    // The authorities and their weights.
    authorities: $.Vec($.Tuple(index_js_1.$AccountId32, exports.$BabeAuthorityWeight)),
    // Randomness for this epoch.
    randomness: exports.$Randomness,
    // Configuration of the epoch.
    config: exports.$BabeEpochConfiguration,
});
/*
 * An equivocation proof for multiple block authorships on the same slot (i.e. double vote).
 */
exports.$BabeEquivocationProof = $.Struct({
    // Returns the authority id of the equivocator.
    offender: index_js_1.$AccountId32,
    // The slot at which the equivocation happened.
    slot: exports.$Slot,
    // The first header involved in the equivocation.
    firstHeader: index_js_1.$Header,
    // The second header involved in the equivocation.
    secondHeader: index_js_1.$Header,
});
