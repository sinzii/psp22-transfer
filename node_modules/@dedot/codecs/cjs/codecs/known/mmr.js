"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$GeneratedMmrProofResult = exports.$MmrEncodableOpaqueLeaf = exports.$MmrBatchProof = exports.$MmrError = exports.$LeafIndex = exports.$NodeIndex = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("../generic/index.js");
/**
 * A type to describe node position in the MMR (node index).
 */
exports.$NodeIndex = $.u64;
/**
 * A type to describe leaf position in the MMR.
 *
 * Note this is different from [`NodeIndex`], which can be applied to
 * both leafs and inner nodes. Leafs will always have consecutive `LeafIndex`,
 * but might be actually at different positions in the MMR `NodeIndex`.
 */
exports.$LeafIndex = $.u64;
/**
 * Merkle Mountain Range operation error.
 */
exports.$MmrError = $.FlatEnum([
    // Error during translation of a block number into a leaf index.
    'InvalidNumericOp,',
    // Error while pushing new node.
    'Push,',
    // Error getting the new root.
    'GetRoot,',
    // Error committing changes.
    'Commit,',
    // Error during proof generation.
    'GenerateProof,',
    // Proof verification error.
    'Verify',
    // Leaf not found in the storage.
    'LeafNotFound,',
    // Mmr Pallet not included in runtime
    'PalletNotIncluded,',
    // Cannot find the requested leaf index
    'InvalidLeafIndex,',
    // The provided best know block number is invalid.
    'InvalidBestKnownBlock,',
]);
/**
 * An MMR proof data for a group of leaves.
 */
exports.$MmrBatchProof = $.Struct({
    leafIndices: $.Vec(exports.$LeafIndex),
    // Number of leaves in MMR, when the proof was generated.
    leafCount: exports.$NodeIndex,
    // Proof elements (hashes of siblings of inner nodes on the path to the leaf).
    items: $.Vec(index_js_1.$Hash),
});
/**
 *
 * A type-safe wrapper for the concrete leaf type.
 *
 * This structure serves merely to avoid passing raw `Vec<u8>` around.
 * It must be `Vec<u8>`-encoding compatible.
 *
 * It is different from [`OpaqueLeaf`], because it does implement `Codec`
 * and the encoding has to match raw `Vec<u8>` encoding.
 */
exports.$MmrEncodableOpaqueLeaf = $.PrefixedHex;
//TODO: Handle nested tuple or wrapper types
exports.$GeneratedMmrProofResult = $.Tuple($.Vec(exports.$MmrEncodableOpaqueLeaf), exports.$MmrBatchProof);
