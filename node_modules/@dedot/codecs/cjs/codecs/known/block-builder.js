"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$CheckInherentsResult = exports.$InherentData = exports.$InherentIdentifier = void 0;
const $ = __importStar(require("@dedot/shape"));
/**
 * An identifier for an inherent.
 */
exports.$InherentIdentifier = $.FixedHex(8);
exports.$InherentData = $.Struct({
    data: $.map(exports.$InherentIdentifier, $.PrefixedHex),
});
/**
 *
 * The result of checking inherents.
 *
 * It either returns okay for all checks, stores all occurred errors or just one fatal error.
 *
 * When a fatal error occurs, all other errors are removed and the implementation needs to
 * abort checking inherents.
 */
exports.$CheckInherentsResult = $.Struct({
    // Did the check succeed?
    okay: $.bool,
    // Did we encounter a fatal error?
    fatalError: $.bool,
    // We use the `InherentData` to store our errors.
    errors: exports.$InherentData,
});
