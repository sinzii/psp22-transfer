"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Data = exports.$DataRaw = void 0;
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
exports.$DataRaw = $.Enum({
    None: null,
    Raw0: $.FixedStr(0),
    Raw1: $.FixedStr(1),
    Raw2: $.FixedStr(2),
    Raw3: $.FixedStr(3),
    Raw4: $.FixedStr(4),
    Raw5: $.FixedStr(5),
    Raw6: $.FixedStr(6),
    Raw7: $.FixedStr(7),
    Raw8: $.FixedStr(8),
    Raw9: $.FixedStr(9),
    Raw10: $.FixedStr(10),
    Raw11: $.FixedStr(11),
    Raw12: $.FixedStr(12),
    Raw13: $.FixedStr(13),
    Raw14: $.FixedStr(14),
    Raw15: $.FixedStr(15),
    Raw16: $.FixedStr(16),
    Raw17: $.FixedStr(17),
    Raw18: $.FixedStr(18),
    Raw19: $.FixedStr(19),
    Raw20: $.FixedStr(20),
    Raw21: $.FixedStr(21),
    Raw22: $.FixedStr(22),
    Raw23: $.FixedStr(23),
    Raw24: $.FixedStr(24),
    Raw25: $.FixedStr(25),
    Raw26: $.FixedStr(26),
    Raw27: $.FixedStr(27),
    Raw28: $.FixedStr(28),
    Raw29: $.FixedStr(29),
    Raw30: $.FixedStr(30),
    Raw31: $.FixedStr(31),
    Raw32: $.FixedStr(32),
    BlakeTwo256: $.FixedHex(32),
    Sha256: $.FixedHex(32),
    Keccak256: $.FixedHex(32),
    ShaThree256: $.FixedHex(32),
});
exports.$Data = $.transform({
    $base: exports.$DataRaw,
    encode: (input) => {
        if (input.type === 'Raw') {
            const bytes = (0, utils_1.stringToU8a)(input.value);
            return {
                type: `Raw${bytes.length}`,
                value: input.value,
            };
        }
        return input;
    },
    decode: (input) => {
        if (input.type.startsWith('Raw')) {
            return {
                type: 'Raw',
                // @ts-ignore
                value: input.value,
            };
        }
        return input;
    },
});
