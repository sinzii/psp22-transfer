"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$TransactionStatus = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("../generic/index.js");
/**
 * Possible transaction status events.
 *
 * Ref: https://github.com/paritytech/polkadot-sdk/blob/ab3a3bc2786673bfda47646a20f871b8a2e4d59d/substrate/client/transaction-pool/api/src/lib.rs#L58-L132
 */
exports.$TransactionStatus = $.Enum({
    // Transaction is part of the future queue.
    Future: null,
    // Transaction is part of the ready queue.
    Ready: null,
    // The transaction has been broadcast to the given peers.
    Broadcast: $.Vec($.str),
    // Transaction has been included in block with given hash
    // at the given position.
    InBlock: index_js_1.$BlockHash,
    // The block this transaction was included in has been retracted.
    Retracted: index_js_1.$BlockHash,
    // Maximum number of finality watchers has been reached,
    // old watchers are being removed.
    FinalityTimeout: index_js_1.$BlockHash,
    // Transaction has been finalized by a finality-gadget, e.g GRANDPA.
    Finalized: index_js_1.$BlockHash,
    // Transaction has been replaced in the pool, by another transaction
    // that provides the same tags. (e.g. same (sender, nonce)).
    Usurped: index_js_1.$Hash,
    // Transaction has been dropped from the pool because of the limit.
    Dropped: null,
    // Transaction is no longer valid in the current state.
    Invalid: null,
});
