"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$EthereumAddress = exports.EthereumAddress = exports.$AccountId20 = exports.AccountId20 = exports.accountId20ToHex = void 0;
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
const accountId20ToHex = (input) => {
    if (input instanceof AccountId20) {
        return input.raw;
    }
    else if ((0, utils_1.isU8a)(input)) {
        return (0, utils_1.u8aToHex)(input);
    }
    else if ((0, utils_1.isHex)(input) && (0, utils_1.isEvmAddress)(input)) {
        return input;
    }
    throw Error(`Invalid input for AccountId20: ${input}`);
};
exports.accountId20ToHex = accountId20ToHex;
class AccountId20 {
    raw;
    constructor(input) {
        this.raw = (0, exports.accountId20ToHex)(input);
    }
    address() {
        return this.raw;
    }
    toJSON() {
        return this.address();
    }
}
exports.AccountId20 = AccountId20;
exports.$AccountId20 = $.instance(AccountId20, $.Tuple($.FixedHex(20)), (input) => [(0, exports.accountId20ToHex)(input)]);
class EthereumAddress extends AccountId20 {
}
exports.EthereumAddress = EthereumAddress;
exports.$EthereumAddress = exports.$AccountId20;
