"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Era = exports.nextPowerOfTwo = exports.numOfTrailingZeroes = void 0;
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
/**
 * Returns the number of trailing zeros in the binary representation of `n`.
 */
function numOfTrailingZeroes(n) {
    let i = 0n;
    while (!(n & 1n)) {
        i++;
        n >>= 1n; // /2n
    }
    return i;
}
exports.numOfTrailingZeroes = numOfTrailingZeroes;
/**
 * Returns the smallest power of two greater than or equal to n.
 */
function nextPowerOfTwo(n) {
    let p = 1n;
    while (n > p)
        p <<= 1n; // p *= 2n
    return p;
}
exports.nextPowerOfTwo = nextPowerOfTwo;
/**
 * @description An era codec to describe the longevity of a transaction.
 */
exports.$Era = $.createShape({
    metadata: $.metadata('$Era'),
    staticSize: 2,
    subEncode(buffer, input) {
        if (input.hasOwnProperty('period') && input.hasOwnProperty('current')) {
            input = input;
            // Ref: https://github.com/paritytech/polkadot-sdk/blob/0e49ed72aa365475e30069a5c30e251a009fdacf/substrate/primitives/runtime/src/generic/era.rs#L65-L72
            const adjustedPeriod = (0, utils_1.bnMin)((0, utils_1.bnMax)(nextPowerOfTwo(input.period), 4n), 1n << 16n);
            const phase = input.current % adjustedPeriod;
            const quantizeFactor = (0, utils_1.bnMax)(adjustedPeriod >> 12n, 1n);
            const quantizedPhase = (phase / quantizeFactor) * quantizeFactor;
            input = { type: 'Mortal', value: { period: adjustedPeriod, phase: quantizedPhase } };
        }
        if (input.hasOwnProperty('type')) {
            input = input;
            // Ref: https://github.com/paritytech/polkadot-sdk/blob/0e49ed72aa365475e30069a5c30e251a009fdacf/substrate/primitives/runtime/src/generic/era.rs#L104-L112
            if (input.type === 'Immortal') {
                buffer.array[buffer.index++] = 0;
            }
            else if (input.type === 'Mortal') {
                const quantizeFactor = (0, utils_1.bnMax)(input.value.period >> 12n, 1n);
                const encoded = (0, utils_1.bnMin)((0, utils_1.bnMax)(numOfTrailingZeroes(input.value.period) - 1n, 1n), 15n) |
                    ((input.value.phase / quantizeFactor) << 4n);
                $.u16.subEncode(buffer, Number(encoded));
            }
        }
    },
    subDecode(buffer) {
        // Ref: https://github.com/paritytech/polkadot-sdk/blob/0e49ed72aa365475e30069a5c30e251a009fdacf/substrate/primitives/runtime/src/generic/era.rs#L119-L134
        if (buffer.array[buffer.index] === 0) {
            buffer.index++;
            return { type: 'Immortal' };
        }
        else {
            const encoded = BigInt(buffer.array[buffer.index] + (buffer.array[buffer.index + 1] << 8));
            buffer.index += 2;
            const period = 2n << encoded % (1n << 4n);
            const quantizeFactor = (0, utils_1.bnMax)(period >> 12n, 1n);
            const phase = (encoded >> 4n) * quantizeFactor;
            if (period >= 4n && phase < period) {
                return { type: 'Mortal', value: { period, phase } };
            }
            else {
                throw new Error('Invalid period and phase');
            }
        }
    },
});
