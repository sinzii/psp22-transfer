"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Extrinsic = exports.Extrinsic = void 0;
const $ = __importStar(require("@dedot/shape"));
const utils_1 = require("@dedot/utils");
const ExtrinsicV4_js_1 = require("./ExtrinsicV4.js");
const ExtrinsicVersion_js_1 = require("./ExtrinsicVersion.js");
// TODO extrinsic versioning
class Extrinsic extends ExtrinsicV4_js_1.ExtrinsicV4 {
}
exports.Extrinsic = Extrinsic;
const $Extrinsic = (registry) => {
    (0, utils_1.assert)(registry, 'PortableRegistry is required to compose $Extrinsic codec');
    const { callTypeId, addressTypeId, signatureTypeId, extraTypeId } = registry.metadata.extrinsic;
    const $Address = registry.findCodec(addressTypeId);
    const $Signature = registry.findCodec(signatureTypeId);
    const $Extra = registry.findCodec(extraTypeId);
    const $RuntimeCall = registry.findCodec(callTypeId);
    const $ExtrinsicSignature = $.Struct({
        address: $Address,
        signature: $Signature,
        extra: $Extra,
    });
    const staticSize = ExtrinsicVersion_js_1.$ExtrinsicVersion.staticSize + $ExtrinsicSignature.staticSize + $RuntimeCall.staticSize;
    const $BaseEx = $.createShape({
        metadata: [],
        staticSize,
        subDecode(buffer) {
            const { signed } = ExtrinsicVersion_js_1.$ExtrinsicVersion.subDecode(buffer);
            const signature = signed ? $ExtrinsicSignature.subDecode(buffer) : undefined;
            const call = $RuntimeCall.subDecode(buffer);
            return new Extrinsic(registry, call, signature);
        },
        subEncode(buffer, extrinsic) {
            const { version, signed, signature, call } = extrinsic;
            ExtrinsicVersion_js_1.$ExtrinsicVersion.subEncode(buffer, { version, signed });
            if (signed) {
                (0, utils_1.assert)(signature, 'Signature is required!');
                $ExtrinsicSignature.subEncode(buffer, signature);
            }
            $RuntimeCall.subEncode(buffer, call);
        },
    });
    return $.withMetadata($.metadata('$Extrinsic'), $.lenPrefixed($BaseEx));
};
exports.$Extrinsic = $Extrinsic;
