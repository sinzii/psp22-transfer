"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$PortableType = exports.$TypeParam = exports.$TypeDef = exports.$EnumTypeDef = exports.$PrimitiveKind = exports.$Field = exports.$TypeId = void 0;
const $ = __importStar(require("@dedot/shape"));
exports.$TypeId = $.compactU32;
exports.$Field = $.Struct({
    name: $.Option($.str),
    typeId: exports.$TypeId,
    typeName: $.Option($.str),
    docs: $.Vec($.str),
});
exports.$PrimitiveKind = $.FlatEnum([
    'bool',
    'char',
    'str',
    'u8',
    'u16',
    'u32',
    'u64',
    'u128',
    'u256',
    'i8',
    'i16',
    'i32',
    'i64',
    'i128',
    'i256',
]);
exports.$EnumTypeDef = $.Struct({
    members: $.Vec($.Struct({
        name: $.str,
        fields: $.Vec(exports.$Field),
        index: $.u8,
        docs: $.Vec($.str),
    })),
});
exports.$TypeDef = $.Enum({
    Struct: $.Struct({ fields: $.Vec(exports.$Field) }),
    Enum: exports.$EnumTypeDef,
    Sequence: $.Struct({ typeParam: exports.$TypeId }),
    SizedVec: $.Struct({ len: $.u32, typeParam: exports.$TypeId }),
    Tuple: $.Struct({ fields: $.Vec(exports.$TypeId) }),
    Primitive: $.Struct({ kind: exports.$PrimitiveKind }),
    Compact: $.Struct({ typeParam: exports.$TypeId }),
    BitSequence: $.Struct({ bitOrderType: exports.$TypeId, bitStoreType: exports.$TypeId }),
});
exports.$TypeParam = $.Struct({ name: $.str, typeId: $.Option(exports.$TypeId) });
exports.$PortableType = $.Struct({
    id: $.compact($.u32),
    path: $.Vec($.str),
    params: $.Vec(exports.$TypeParam),
    typeDef: exports.$TypeDef,
    docs: $.Vec($.str),
});
