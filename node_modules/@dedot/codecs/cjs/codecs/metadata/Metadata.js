"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Metadata = exports.Metadata = exports.$RuntimeApiMethodDefLatest = exports.$SignedExtensionDefLatest = exports.$StorageEntryLatest = exports.$PalletDefLatest = exports.$MetadataLatest = exports.MAGIC_NUMBER = exports.$MetadataVersioned = exports.$NotSupported = exports.notSupportedCodec = void 0;
const $ = __importStar(require("@dedot/shape"));
const index_js_1 = require("./conversion/index.js");
const v14_js_1 = require("./v14.js");
const v15_js_1 = require("./v15.js");
const notSupportedCodec = (msg = 'Not supported!') => {
    return $.createShape({
        metadata: $.metadata('$.NotSupported'),
        staticSize: 0,
        subEncode(buffer, value) {
            throw new Error(msg);
        },
        subDecode(buffer) {
            throw new Error(msg);
        },
    });
};
exports.notSupportedCodec = notSupportedCodec;
exports.$NotSupported = (0, exports.notSupportedCodec)();
exports.$MetadataVersioned = $.Enum({
    V0: (0, exports.notSupportedCodec)('Metadata V0 is not supported'),
    V1: (0, exports.notSupportedCodec)('Metadata V1 is not supported'),
    V2: (0, exports.notSupportedCodec)('Metadata V2 is not supported'),
    V3: (0, exports.notSupportedCodec)('Metadata V3 is not supported'),
    V4: (0, exports.notSupportedCodec)('Metadata V4 is not supported'),
    V5: (0, exports.notSupportedCodec)('Metadata V5 is not supported'),
    V6: (0, exports.notSupportedCodec)('Metadata V6 is not supported'),
    V7: (0, exports.notSupportedCodec)('Metadata V7 is not supported'),
    V8: (0, exports.notSupportedCodec)('Metadata V8 is not supported'),
    V9: (0, exports.notSupportedCodec)('Metadata V9 is not supported'),
    V10: (0, exports.notSupportedCodec)('Metadata V10 is not supported'),
    V11: (0, exports.notSupportedCodec)('Metadata V11 is not supported'),
    V12: (0, exports.notSupportedCodec)('Metadata V12 is not supported'),
    V13: (0, exports.notSupportedCodec)('Metadata V13 is not supported'),
    V14: v14_js_1.$MetadataV14,
    V15: v15_js_1.$MetadataV15,
});
// Ref: https://github.com/paritytech/frame-metadata/blob/a07b2451b82809501fd797691046c1164f7e8840/frame-metadata/src/v14.rs#L30
exports.MAGIC_NUMBER = 1635018093; // 0x6174656d
exports.$MetadataLatest = v15_js_1.$MetadataV15;
exports.$PalletDefLatest = v15_js_1.$PalletDefV15;
exports.$StorageEntryLatest = v15_js_1.$StorageEntryV15;
exports.$SignedExtensionDefLatest = v15_js_1.$SignedExtensionDefV15;
exports.$RuntimeApiMethodDefLatest = v15_js_1.$RuntimeApiMethodDefV15;
class Metadata {
    magicNumber;
    metadataVersioned;
    constructor(magicNumber, metadata) {
        if (magicNumber !== exports.MAGIC_NUMBER) {
            throw new Error('Invalid magic number');
        }
        this.magicNumber = magicNumber;
        this.metadataVersioned = metadata;
    }
    get versionNumber() {
        return parseInt(this.version.substring(1));
    }
    get version() {
        return this.metadataVersioned.type;
    }
    get latest() {
        const currentVersion = this.metadataVersioned.type;
        if (currentVersion === 'V15') {
            return this.metadataVersioned.value;
        }
        else if (currentVersion === 'V14') {
            return (0, index_js_1.toV15)(this.metadataVersioned.value);
        }
        throw new Error(`Unsupported metadata version, found: ${currentVersion}`);
    }
}
exports.Metadata = Metadata;
exports.$Metadata = $.instance(Metadata, $.Tuple($.u32, exports.$MetadataVersioned), (metadata) => [metadata.magicNumber, metadata.metadataVersioned]);
