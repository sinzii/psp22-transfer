import { IKeyringPair, Signer } from '@polkadot/types/types';
import { ApplyExtrinsicResult, BlockHash, DispatchError, DispatchInfo, Hash, RuntimeDispatchInfo } from '@dedot/codecs';
import { HexString } from '@dedot/utils';
import { Callback, IEventRecord, Unsub } from './index.js';
export type AddressOrPair = IKeyringPair | string;
export interface PayloadOptions {
    nonce?: number;
    tip?: bigint;
    assetId?: number | object;
    metadataHash?: HexString;
    [prop: string]: any;
}
export interface SignerOptions extends PayloadOptions {
    signer?: Signer;
}
export type DryRunResult = ApplyExtrinsicResult;
export type TxPaymentInfo = RuntimeDispatchInfo;
export interface ISubmittableResult<EventRecord extends IEventRecord = IEventRecord> {
    status: TxStatus;
    events: EventRecord[];
    dispatchError?: DispatchError;
    dispatchInfo?: DispatchInfo;
    txHash: Hash;
    txIndex?: number;
}
export interface IRuntimeTxCall {
    pallet: string;
    palletCall: {
        name: string;
        params?: object;
    } | string | null;
}
export interface ISubmittableExtrinsic<R extends ISubmittableResult = ISubmittableResult> {
    paymentInfo(account: AddressOrPair, options?: Partial<PayloadOptions>): Promise<TxPaymentInfo>;
    send(): Promise<Hash>;
    send(callback: Callback<R>): Promise<Unsub>;
    sign(account: AddressOrPair, options?: Partial<SignerOptions>): Promise<this>;
    signAndSend(account: AddressOrPair, options?: Partial<SignerOptions>): Promise<Hash>;
    signAndSend(account: AddressOrPair, callback: Callback<R>): Promise<Unsub>;
    signAndSend(account: AddressOrPair, options: Partial<SignerOptions>, callback?: Callback<R>): Promise<Unsub>;
}
export interface ISubmittableExtrinsicLegacy<R extends ISubmittableResult = ISubmittableResult> extends ISubmittableExtrinsic<R> {
    dryRun(account: AddressOrPair, optionsOrHash?: Partial<SignerOptions> | BlockHash): Promise<DryRunResult>;
}
export type TxStatus = {
    type: 'Validated';
} | {
    type: 'Broadcasting';
} | {
    type: 'BestChainBlockIncluded';
    value: {
        blockHash: HexString;
        blockNumber: number;
        txIndex: number;
    };
} | {
    type: 'NoLongerInBestChain';
} | {
    type: 'Finalized';
    value: {
        blockHash: HexString;
        blockNumber: number;
        txIndex: number;
    };
} | {
    type: 'Invalid';
    value: {
        error: string;
    };
} | {
    type: 'Drop';
    value: {
        error: string;
    };
};
